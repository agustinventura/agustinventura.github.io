<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AguasNegras</title>
    <link>http://www.aguasnegras.es</link>
    <atom:link href="http://www.aguasnegras.es/feed.xml" rel="self" type="application/rss+xml" />
    <description>AguasNegras, tecnología, programación y Java</description>
    <language>es-es</language>
    <pubDate>dom., 17 mar. 2019 19:05:51 +0100</pubDate>
    <lastBuildDate>dom., 17 mar. 2019 19:05:51 +0100</lastBuildDate>

    <item>
      <title>Copia de Seguridad de PostgreSQL en Docker</title>
      <link>http://www.aguasnegras.es/blog/2019/03/16-Copia_Seguridad_postgreSQL_Docker.html</link>
      <pubDate>sáb., 16 mar. 2019 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2019/03/16-Copia_Seguridad_postgreSQL_Docker.html</guid>
      	<description>
	&lt;p&gt;Creo que en los últimos posts ha quedado bien claro las ventajas de Docker, sobre todo en un entorno de desarrollo donde nos permite provisionar rápidamente software que antes era más o menos costoso de instalar, &lt;a href=&quot;https://www.aguasnegras.es/blog/2019/03/05-PostgreSQL_y_Docker.html&quot;&gt;como una base de datos&lt;/a&gt; y también ha quedado claro que Docker es una herramienta super flexible, tanto que podemos escoger hasta cual deseamos que sea su directorio de trabajo a través de la &lt;a href=&quot;https://www.aguasnegras.es/blog/2019/03/07-Docker_y_almacenamiento.html&quot;&gt;configuración&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sin embargo hay un apartado que no he tocado. Al hablar de infraestructura inmutable comenté como montar el volumen de datos de PostgreSQL con un data bind para que aunque destruyera el contenedor los datos persistieran y pudiera crear un contenedor nuevo para acceder a esos datos. Esta política es muy buena para destruir y recrear contenedores, pero claro, los datos siguen estando en el mismo ordenador, el host, ¿qué pasa si este se estropea?&lt;br /&gt;
Es decir, creo que no hay que confundir la disponibilidad de los datos para la infraestructura con una buena copia de seguridad de toda la vida.&lt;/p&gt;
&lt;h2&gt;Copia de Seguridad de PostgreSQL&lt;/h2&gt;
&lt;p&gt;En PostgreSQL la copia de seguridad se realiza con una herramienta llamada &lt;a href=&quot;https://www.postgresql.org/docs/11/app-pgdump.html&quot;&gt;pg_dump&lt;/a&gt;. Esta herramienta me permite exportar los datos en formato inserts de SQL (por defecto) o en formato propietario si es una gran cantidad de datos.&lt;/p&gt;
&lt;p&gt;Pero, si entramos en nuestro contenedor y lanzamos este pg_dump generando un archivo con la copia de seguridad... ¿cómo lo paso a mi host para moverlo a la nube o a dónde sea? Hay que tener en cuenta que el único volumen que esta montado es el de los datos, podría crear ahí una carpeta y meter la copia de seguridad, pero seamos sinceros, eso es una guarrada. ¿Entonces?&lt;/p&gt;
&lt;p&gt;Contenedor temporal al rescate. El comando pg_dump se puede utilizar en remoto, luego hipotéticamente puedo crear un contenedor en el cual montar un volumen donde haré la copia de seguridad y lanzar desde ese contenedor el pg_dump sobre el contenedor de PostgreSQL. Dicho y hecho:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run --rm --name pg-backup -v /home/agustin/Development/Docker/volumes/pg-backup/:/media/backup -e PGPASSWORD=docker postgres 
pg_dump -h 172.17.0.3 -U postgres -Fc mi-base-de-datos -f /media/backup/mi-backup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creo un contenedor temporal (--rm) en el que montaré un directorio de mi máquina en el directorio /media/backup y le paso como variable de entorno PGPASSWORD, de esta manera al lanzar pg_dump utilizará este valor como contraseña, y ya por último uso pg_dump para realizar el volcado.&lt;/p&gt;
&lt;p&gt;Y qué mejor manera para probar que la copia ha ido bien que restaurarla. Se puede hacer de manera equivalente a lo de arriba pero usando pg_restore:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run --rm --name pg-restore -v /home/agustin/Development/Docker/volumes/pg-backup/:/media/backup -e PGPASSWORD=docker postgres 
pg_restore -h 172.17.0.4 -U postgres -d mi-base-de-datos /media/backup/mi-backup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ojo que esto solo realizar el proceso de importación sobre la máquina de la base de datos (en este caso 172.17.0.4), tras eso se borraría y los datos quedaría en esta máquina. Hay que tener también en cuenta que pg_restore solo recupera la base de datos (el schema), no el usuario (role), así que si mi-base-de-datos correspondía al usuario mi-usuario, previamente hay que crear esta base de datos y usuario en el PostgreSQL destino (si no, tampoco pasa nada porque avisa).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Docker y almacenamiento: Como cambiar el directorio de las imágenes y contenedores</title>
      <link>http://www.aguasnegras.es/blog/2019/03/07-Docker_y_almacenamiento.html</link>
      <pubDate>jue., 7 mar. 2019 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2019/03/07-Docker_y_almacenamiento.html</guid>
      	<description>
	&lt;p&gt;Los contenedores no solo tienen la ventaja de ser entornos aislados sino que además ocupan muy poco espacio en disco. Esto se debe a varias causas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;No tienen el sistema operativo al completo (como una máquina virtual) lo cual ya de por sí es un ahorro de espacio.&lt;/li&gt;
&lt;li&gt;El proceso de tener una imagen e ir &amp;quot;instanciando&amp;quot; contenedor no ocupa tanto como podríamos esperar (tamaño de imagen x contenedores) gracias a &lt;a href=&quot;https://stackoverflow.com/questions/32775594/why-does-docker-need-a-union-file-system&quot;&gt;UnionFS&lt;/a&gt;, ya que solo se cambian los cambios de cada contenedor en particular.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto esta de maravilla y por ejemplo, hoy he montado un &lt;a href=&quot;https://github.com/fuzziebrain/docker-oracle-xe&quot;&gt;Oracle XE en un contenedor&lt;/a&gt; para lo que he tenido que hacer mi propia imagen. Si hago&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker image ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puedo ver que la imagen de Oracle Linux sobre la que se monta mi imagen de Oracle XE pesa 117 Mb y la imagen de Oracle XE 8,76 Gb.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019/03/07/docker-image-ls.png&quot; alt=&quot;docker image ls&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Si ahora miro el tamaño del contenedor con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker container ls -s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El contenedor ocupa apenas 471 Mb. Nada mal, ¿eh?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019/03/07/docker-container-ls-s.png&quot; alt=&quot;docker container ls -s&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Sin embargo, hay veces en que estamos limitados en espacio. Por ejemplo, yo tengo un SSD, compartido con Windows 10 (aunque no sé para qué si lo arranco de higos a brevas) y además en mi Ubuntu tengo dos particiones, una para / con 28 Gb y otra para /home con 59 Gb.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2019/03/07/df-h-grep-sda.png&quot; alt=&quot;df -h | grep sda&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Entonces no me interesa guardar las imágenes y los contenedores en / ya que me lo llenaría (sobre todo en este caso que Oracle es más bien glotón), por lo que me interesa cambiar el directorio en el que Docker guarda los datos.&lt;/p&gt;
&lt;h2&gt;Moviendo el directorio de datos de Docker&lt;/h2&gt;
&lt;p&gt;Buscando un poco en mi caso concreto, Ubuntu, he llegado a &lt;a href=&quot;https://askubuntu.com/questions/631450/change-data-directory-of-docker&quot;&gt;esta guía&lt;/a&gt; que lamentablemente esta obsoleta. En todo caso propone hacer un symlink, cosa que siempre debe funcionar, pero no me parece muy limpia.&lt;/p&gt;
&lt;p&gt;Si miro el archivo que citan en esa solución (&amp;quot;/etc/default/docker&amp;quot;) se dice que el archivo no aplica para systemd... que es lo que usa Ubuntu (después de abandonar upstart...), pero dan un &lt;a href=&quot;https://docs.docker.com/engine/admin/systemd/&quot;&gt;enlace a la documentación&lt;/a&gt; en el mismo archivo que tiene la clave: el archivo &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/dockerd//#daemon-configuration-file&quot;&gt;daemon.json&lt;/a&gt; que permite configurar el demonio de Docker.&lt;/p&gt;
&lt;p&gt;Así que dicho y hecho, basta con irse a /etc/docker y crear el archivo daemon.json si no existe y poner ahí el directorio que quiera, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;{
	&amp;quot;data-root&amp;quot;: &amp;quot;/home/agustin/Development/Docker/data&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahora, obviamente, toca bajar y volver a subir el servicio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sudo service docker stop
sudo service docker start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, a partir de ahora no solo las imágenes, sino los datos de contenedores, volúmenes, etc... me los guardará en ese directorio (que al estar en /home es otra partición distinta de /).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>PostgreSQL en Docker</title>
      <link>http://www.aguasnegras.es/blog/2019/03/05-PostgreSQL_y_Docker.html</link>
      <pubDate>mar., 5 mar. 2019 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2019/03/05-PostgreSQL_y_Docker.html</guid>
      	<description>
	&lt;p&gt;Una de las ventajas de &lt;a href=&quot;https://www.aguasnegras.es/blog/2017/05/14-comenzando-con-docker.html&quot;&gt;Docker&lt;/a&gt; es que te aisla del problema de tener que instalar el software que necesitas para desarrollar.&lt;br /&gt;
La encapsulación en contenedores no es solo una ventaja para los pasos a producción y la &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot;&gt;infraestructura como código&lt;/a&gt; sino que lo es, especialmente en entornos de desarrollo.&lt;br /&gt;
En muchas ocasiones instalas una base de datos o una cola de mensajes y ajustando la configuración te la terminas cargando y tienes que volver a crearla. La ventaja de Docker es que parte de esa premisa, se asume que te vas a cargar el sistema... y que no pasa nada. Y seamos sinceros, esto es muy frecuente que pase en los entornos de desarrollo (para eso estan).&lt;br /&gt;
Si bien hay tareas que son relativamente sencillas como instalar un &lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; que se puede hacer a tiro de apt, con Docker es MUCHO más sencillo y además tiene la ventaja de que si te cansas, puedes eliminar los contenedores y las imágenes y no has tocado tu sistema.&lt;/p&gt;
&lt;h2&gt;PostgreSQL en Docker&lt;/h2&gt;
&lt;p&gt;Lo primero es traer la imagen de &lt;a href=&quot;https://hub.docker.com/_/postgres&quot;&gt;PostgreSQL&lt;/a&gt;, que es la plantilla a partir de la cual se crea el contenedor en concreto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker pull postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto ya se puede arrancar un contenedor tal y como indican en la misma documentación de la imagen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run --name mi-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto funciona y lo que hace es crear un contenedor llamado &amp;quot;mi-postgres&amp;quot; que va a correr en background (-d) y la contraseña de la base de datos va a ser &amp;quot;mysecretpassword&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Conectarse&lt;/h2&gt;
&lt;p&gt;Para verificar que funciona, se puede crear un contenedor temporal que se conecte a la base de datos con el mismo cliente psql.&lt;/p&gt;
&lt;p&gt;Primero tengo que saber la ip de mi contenedor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker inspect --format=&apos;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&apos; pg-rx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Supongamos que esto devuelve 172.17.0.2 ahora creo un contenedor temporal que lanza el psql usando la ip para conectar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run -it --rm --name psql postgres psql -h 172.17.0.2 -U postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con -it se indica a Docker que cree una sesión interactiva y con --rm que al cerrar la sesión se destruya el contenedor. La última parte indica que lo cree a partir de la imagen postgres y que lance el comando psql al host 172.17.0.2 con el usuario postgres. Pedirá la contraseña del usuario &amp;quot;posgres&amp;quot; que será &amp;quot;secretpassword&amp;quot;.&lt;/p&gt;
&lt;h2&gt;Persistiendo los datos&lt;/h2&gt;
&lt;p&gt;Hasta aquí muy bien, pero hay dos problemas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Que solo se puede conectar desde otro contenedor ya que el puerto que usa PostgreSQL por defecto solo es accesible a través de la red interna que crea Docker para los contenedores.&lt;/li&gt;
&lt;li&gt;Que si por lo que sea el contenedor se destruye, se pierden los datos ya que estan en su interior. Esto en un entorno de integración continua me puede dar igual ya que alguna herramienta automatizaría el recuperarlos, pero lo cierto es que tampoco cuesta solucionarlo guardándolo en un directorio del host.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Soluciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exponer el puerto 5432 en el host.&lt;/li&gt;
&lt;li&gt;Utilizar un databind a una carpeta en el host. Se podría utilizar un volume, de hecho es lo recomendado pero como la solución mas habitual que se suele ver es el databind, pues databind.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Primero se crea el directorio para guardar los datos, algo así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;mkdir -p $HOME/docker/volumes/pgsql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y se crea un contenedor nuevo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run --name pg -e POSTGRES_PASSWORD=docker -d -p 5432:5432 -v $HOME/docker/volumes/pgsql/:/var/lib/postgresql/data postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cosas nuevas: con el -p se le indica que el puerto &amp;quot;5432&amp;quot; del host (el primer puerto) lo mapee al &amp;quot;5432&amp;quot; del contenedor (el segundo) y con -v que la carpeta creada anteriormente la mapee a la carpeta &amp;quot;/var/lib/postgresql/data&amp;quot;. Ojo con esto que si pones otro directorio falla el arranque del contenedor.&lt;/p&gt;
&lt;p&gt;Pues ya esta, ahora puedo utilizar una herramienta en mi host como DBeaver para conectar con el PostgreSQL del contenedor y además si por lo que sea hay que cargarse el contenedor, los datos persisten (mientras siga la carpeta, claro).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Certificados y Dispositivos en Tizen Studio</title>
      <link>http://www.aguasnegras.es/blog/2018/12/28-Certificates_Devices.html</link>
      <pubDate>vie., 28 dic. 2018 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2018/12/28-Certificates_Devices.html</guid>
      	<description>
	&lt;h2&gt;Certificados&lt;/h2&gt;
&lt;p&gt;Una de las cosas que piden para poder subir software (o instalarlo en dispositivos de prueba) en Samsung es disponer de un certificado, tanto de autor como de distribuidor.&lt;br /&gt;
Para crear un certificado podemos utilizar el mismo Certificate Manager de Tizen Studio, pero que en esta versión no viene instalado, así que lo primero es ir al Package Manager y en la sección Tizen SDK Tools &amp;gt; Baseline SDK instalar el Certificate Manager.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/04-Package_Manager_Certificate_Manager.png&quot; alt=&quot;Tizen Package Manager and Certificate Manager&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Y en Extension SDK hay que instalar el Samsung Certificate Extension y el Samsung Wearable Extension.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/04.1-Package_Manager_Extension.png&quot; alt=&quot;Tizen Samsung Certificate Extension&quot; /&gt;&lt;/p&gt;
&lt;p&gt;En el momento que esta instalado, lo podemos abrir desde el mismo Tizen Studio y pregunta si ya tenemos uno, etc... Resulta que yo tenía uno, pero se me olvidó la contraseña y esto trae bastantes problemas, ya que no puedo actualizar las aplicaciones que tengo publicadas. Primero tengo que eliminarlas y después republicarlas con el nuevo. En fín, ya lo haré, de momento voy a crear un certificado nuevo. En la pantalla inicial, pulso el +&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/05-Certificate_Manager_Empty.png&quot; alt=&quot;Empty Certificate Manager&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Y cuando me pregunta si un certificado de tipo Tizen o Samsung, selecciono Samsung. A continuación dejo marcado Mobile / Wearable y le pongo un nombre al perfil del certificado.&lt;/p&gt;
&lt;p&gt;Dejo marcado Create a new author certificate y en la siguiente pantalla pongo mi nombre y una contraseña. Si todo ha ido bien, al darle a next nos pide conectar con la cuenta de Samsung y nos sale la típica ventana de OAuth.&lt;/p&gt;
&lt;p&gt;Si todo va bien (a mí me ha dado un par de ventanas de error pero ha seguido funcionando...) nos pide una ruta para guardar una copia de seguridad del certificado y pasamos a crear un nuevo certificado de distribuidor.&lt;/p&gt;
&lt;p&gt;Lo dejo todo por defecto e incluso me detecta el DUID (número único de dispositivo) del Gear Sport.&lt;/p&gt;
&lt;h2&gt;Dispositivos&lt;/h2&gt;
&lt;p&gt;Vale, pues ahora que tengo el certificado, voy a probar a ejecutar el Tabata Timer en el Gear Sport que tengo. Para eso hay que configurar primero el dispositivo.&lt;br /&gt;
&lt;ul&gt;&lt;/p&gt;
&lt;li&gt;En Ajustes &gt; Sobre Gear, habilitar Depuración.&lt;/li&gt;
&lt;li&gt;Además hará falta tener el dispositivo en la misma red wifi que el ordenador.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora en Tizen Studio abrimos el Device Manager y le damos al Remote Device Manager, que es un icono como de un móvil enganchado a un monitor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/07-Remote_Device_Manager.png&quot; alt=&quot;Remote Device Manager Button&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Y en la ventana que sale le damos a Scan Devices (el primer botón que tiene forma... de algo, yo que sé). Si todo ha ido bien veremos en el Gear un aviso con la clave RSA y si queremos conectar, le damos que sí y ya lo vemos en la ventana.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/08-Remote_Device_Manager.png&quot; alt=&quot;Remote Device Manager&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Pues nada, podemos cerrar (sólo el Remote Device Manager) y ya podemos lanzar la aplicación a tiro de click con el botón derecho Run As &amp;gt; Tizen Web App.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tizen Studio</title>
      <link>http://www.aguasnegras.es/blog/2018/12/27-Tizen_Studio.html</link>
      <pubDate>jue., 27 dic. 2018 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2018/12/27-Tizen_Studio.html</guid>
      	<description>
	&lt;p&gt;A finales de 2017 participé en un concurso de Samsung llamado &lt;a href=&quot;https://www.europe-samsung.com/smsdev/Home/Articulo/447&quot;&gt;Dispositivos por Apps&lt;/a&gt; y que, mediante el regalo de dispositivos pretende aumentar la presencia de aplicaciones en el market propio de Samsung (Galaxy Apps).&lt;br /&gt;
El caso fue que que en aquel momento hice tres aplicaciones para relojes Samsung (y sin tener uno, jaja) y me saqué un reloj Samsung Gear Sport. Las aplicaciones en cuestión eran las siguientes:&lt;br /&gt;
&lt;ul&gt;&lt;/p&gt;
&lt;li&gt; [TabataTimer](https://github.com/agustinventura/TabataTimer): Un temporizador Tabata configurable, incluyendo número de rondas, duración del intervalo de trabajo y del intervalo de descanso.&lt;/li&gt;
&lt;li&gt; [DiceRoller](https://github.com/agustinventura/DiceRoller): Un tirador de dados, por si te pilla en una partidilla de algo y no tienes a mano los dados, pues puedes seleccionar el tipo de dados y el número y la aplicación los &quot;tira&quot; por tí.&lt;/li&gt;
&lt;li&gt; [SwimMonitor](https://github.com/agustinventura/SwimMonitor): La aplicación que creo que me quedó mejor de todas. Permite llevar el control de los largos que vas haciendo en la piscina y además revisar entrenamientos anteriores para poder compararlos.&lt;/li&gt;
&lt;/ul&gt;
Pues bien, ahora ha vuelto a salir la promoción y esta vez piden nada más y nada menos que seis aplicaciones, pero teniendo en cuenta que ya sé más o menos como funciona todo, creo que puedo sacarlas en las semanas que dan.
&lt;h2&gt;Tizen Studio&lt;/h2&gt;
&lt;p&gt;Lo primero de todo es descargar el &lt;a href=&quot;https://developer.tizen.org/development/tizen-studio/download&quot;&gt;Tizen Studio&lt;/a&gt; en su versión de Ubuntu. El instalador pide dos dependencias:&lt;br /&gt;
&lt;ul&gt;&lt;/p&gt;
&lt;li&gt;libwebkitgtk-1.0-0: Que por fortuna se puede instalar con apt-get&lt;/li&gt;
&lt;li&gt;rpm2cpio: Que también se puede instalar por apt-get&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La instalación no tiene mucho más porque Tizen Studio es un Eclipse modificado.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/01-Tizen_Studio.png&quot; alt=&quot;Tizen Studio&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Package Manager&lt;/h2&gt;
&lt;p&gt;Para instalar los distintos entornos de ejecución (y crear emuladores), hay que utilizar el Package Manager:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/02-Package_Manager.png&quot; alt=&quot;Package Manager&quot; /&gt;&lt;/p&gt;
&lt;p&gt;En mi caso, repasando la paquetería disponible para wearables y web app development me llevo la grata sorpresa de que solo hay que instalar los emuladores. Repasando el Gear Sport, veo que la versión de Tizen que trae es la 3.0.0.2 y el Tizen Studio me ofrece hasta la 5, así que yo que sé, voy a instalar los emuladores de la 4 y la 5 y hago las aplicaciones de 3 para arriba.&lt;br /&gt;
Al darle a instalar me ha pedido una serie de paquetes extra del sistema operativo, en concreto:&lt;br /&gt;
&lt;ul&gt;&lt;/p&gt;
&lt;li&gt;libpng12-0&lt;/li&gt;
&lt;li&gt;libsdl1.2debian&lt;/li&gt;
&lt;li&gt;bridge-utils&lt;/li&gt;
&lt;li&gt;openvpn&lt;/li&gt;
&lt;/ul&gt;
Y resulta que la primera no esta, así que toca buscar por Google y resulta que hay que [instalarla a mano](https://askubuntu.com/questions/840257/e-package-libpng12-0-has-no-installation-candidate-ubuntu-16-10-gnome)
&lt;p&gt;Bueno, pues tras ésto ya se puede instalar tranquilamente y ya tenemos nuestros emuladores.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2018/12/03-Tizen_Emulator.png&quot; alt=&quot;Tizen Emulators&quot; /&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>SDKMAN</title>
      <link>http://www.aguasnegras.es/blog/2018/10/12-sdkman.html</link>
      <pubDate>vie., 12 oct. 2018 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2018/10/12-sdkman.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;https://sdkman.io/&quot;&gt;SDKMAN&lt;/a&gt; es un gestor de entornos y herramientas Java. Cuando trabajas en un entorno &amp;quot;corporativo&amp;quot; (¿aburrido?) sueles tener claramente fijadas las versiones de herramientas de desarrollo a utilizar, por ejemplo, Java 8 en la versión 1.8.0_121 o Maven 3.2.1, etc...&lt;br /&gt;
Sin embargo cuando empiezas a cacharrear y a tratar de instalar cosas nuevas es relativamente normal que acabes con dos (o tres o seis) versiones del JDK: la &amp;quot;buena&amp;quot; (1.8), la de &amp;quot;los módulos&amp;quot; (9), la de &amp;quot;los val&amp;quot; (10) y la &amp;quot;nueva buena&amp;quot; (11). Todo eso puedes gestionarlo a mano, claro, para eso esta JAVA_HOME, pero ¿qué pasa si tienes varias versiones de Maven? ¿Y si son más herramientas? Ya se empieza a hacer cansino. Pues bien, SDKMAN se ocupa precisamente de eso, lo instalas y él te instala las versiones que quieras de las herramientas, te pone unas activas, etc...&lt;br /&gt;
Pero mejor enseño un ejemplo.&lt;/p&gt;
&lt;h2&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Pues basta con seguir las &lt;a href=&quot;https://sdkman.io/install&quot;&gt;instrucciones&lt;/a&gt;. Yo como soy un poco particular y maniático, me gusta tener todo lo relacionado con el desarrollo ordenado en carpetas particulares, así que para la instalación especifico primero el directorio en el que quiero que me lo instale y después lanzo el script de instalación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;export SDKMAN_DIR=&amp;quot;/home/agustin/Development/Java/Tools/sdkman&amp;quot;
curl -s &amp;quot;https://get.sdkman.io&amp;quot; | bash
source Development/Java/Tools/sdkman/bin/sdkman-init.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con ésto ya esta instalado (en el directorio Development/Java/Tools/sdkman).&lt;/p&gt;
&lt;h2&gt;Uso&lt;/h2&gt;
&lt;p&gt;Vale, pues lo primero es comprobar que esta bien:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sdk help
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez instalado, se puede ver todo el software disponible con list:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sdk list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y todas las versiones de un software concreto con list &lt;software&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sdk list java
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para instalar Java 11 (OpenJDK):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sdk install java 11.0.0-open
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y con ésto, java -version te debe devolver OpenJDK 11 (es posible que tengas que abrir un terminal nuevo).&lt;/p&gt;
&lt;h2&gt;Desinstalación&lt;/h2&gt;
&lt;p&gt;Si por lo que sea te cansas de SDKMAN, la desinstalación son dos pasos:&lt;br /&gt;
1. Borrar el directorio de instalación (.sdkman en tu home por defecto)&lt;br /&gt;
2. Repasar .bashrc, .bash_profile o .profile para ver que no haya quedado rastro.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Domain Driven Design, Sesión 2</title>
      <link>http://www.aguasnegras.es/blog/2017/05/29-DDD-Sesion-2.html</link>
      <pubDate>lun., 29 may. 2017 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2017/05/29-DDD-Sesion-2.html</guid>
      	<description>
	&lt;p&gt;Ayer tuvimos la segunda sesión de DDD en las oficinas de &lt;a href=&quot;https://www.comalis.com/&quot;&gt;Comalis&lt;/a&gt;. Personalmente se me hizo bastante corto ya que tuvimos bastante debate y muy interesante. Yo aprendí muchísimo… pero por otra parte salí con nuevas lagunas.&lt;br /&gt;
Empezamos con una pequeña introducción por parte de Tamara de &lt;a href=&quot;https://www.comalis.com/&quot;&gt;Comalis&lt;/a&gt; sobre la empresa. Se dedican fundamentalmente al hosting, cloud, antispam, ssl, etc. Son franceses (el CPD esta en Lyon) pero tienen las oficinas aquí, en Sevilla. Tienen programa de afiliados, así que si os interesa os podéis poner en contacto con ellos que son muy agradables, nos tenían preparado hasta café y pastitas.&lt;br /&gt;
En lo técnico, repasamos el origen de DDD, la importancia de la reducción de la carga cognitiva al dividir el problema en varios contextos y no tener que mantenerlos todos a la vez en la cabeza. Esto puede implicar que tengamos datos duplicados entre contextos, pero de lo que se trata no es de optimizar en lo técnico, sino de desarrollar un software de calidad, flexible y adaptable.&lt;br /&gt;
También pasamos por encima del lenguaje ubicuo, que es el lenguaje que utilizamos para definir y describir el sistema. Debe estar lo más próximo posible al lenguaje del negocio para malentendidos o directamente definir mal el sistema.&lt;br /&gt;
Una vez expuesta la parte más abstracta, pasamos al caso concreto: la gestión de un gimnasio. Dentro de un gimnasio podemos tener distintos contextos: facturación, mantenimiento, gestión de personal o el técnico como tal. Este técnico puedo incluir definir rutinas para los clientes y que estos puedan ir apuntando las actividades que van realizando en el gimnasio. El caso de estudio se centraba en esta última parte, en concreto propuse dos historias de usuario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Como usuario, deseo poder tener rutinas asignadas para consultar en cualquier momento que actividad tengo que realizar a continuación.&lt;/li&gt;
&lt;li&gt;Como usuario, deseo poder ir registrando diariamente las actividades que voy realizando en el gimnasio esten o no dentro de una de mis rutinas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://drive.google.com/uc?export=view&amp;amp;id=0BymoUnvpt9LxVUNHV1lSMlFuZ0E&quot; alt=&quot;Entidades y Objetos de Valor&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Empezando por el final, este fue el resultado de nuestro sesudo análisis (si que dibujamos, bien, sí… y mi Rs por lo visto parecen Zs).&lt;br /&gt;
En el camino tuvimos que aclarar que es una Entidad (algo que tiene identidad dentro del sistema), que es un Objeto Valor (algo que NO tiene identidad) y definir si los distintos componentes de nuestro esquema eran objetos de valor o entidades. Como cosas a destacar, pues en primer lugar que no hay una solución correcta, sino que el proceso es iterativo, se va refinando en cada iteración. Por ejemplo, originalmente pensamos que &lt;strong&gt;Cliente&lt;/strong&gt; era un objeto valor, pero más tarde vimos claro que era una entidad.&lt;br /&gt;
Un punto de vista muy interesante que propuso Isra fue que muchas veces las entidades se ven desde fuera del sistema con más claridad que desde dentro del mismo. También me quedo con lo que comentó Ignacio de si vamos a &lt;em&gt;“pensar a futuro”&lt;/em&gt; sobre el componente, es decir, si vamos a permitir que cambie de estado en un futuro (como puede ser un &lt;strong&gt;Día&lt;/strong&gt; en el esquema, ya que podemos añadirle actividades en cualquier momento). También es importante considerar que este esquema representa nuestro dominio y NO se refiere en ningún momento al modelo de datos (sea cual sea).&lt;br /&gt;
Por último, estuvimos introduciendo el concepto de agregado y raíz del agregado, en este caso &lt;strong&gt;Cliente&lt;/strong&gt; sería la raíz del agregado y controlaría el acceso a todo lo que se relaciona con él, como los días o las rutinas y sobre todo, mantendria la coherencia de los distintos componentes del agregado, por ejemplo, que no haya rutinas sin actividades.&lt;br /&gt;
Todo ésto lo acompañamos con un pequeño esbozo en forma de clases de lo que hay en la pizarra y que esta en &lt;a href=&quot;https://github.com/agustinventura/ddd-svqjug&quot;&gt;GitHub&lt;/a&gt;&lt;br /&gt;
Esto fue todo, ya que al final las dos horas se hicieron cortas. Yo salí contento y no me importaría seguir desarrollando ese primer código que tenemos en siguientes sesiones si hay interés en continuar. Y el que quiera reengancharse, bienvenido es :)&lt;/p&gt;
&lt;p&gt;Os dejo aquí los recursos que he repasado para la sesión por si queréis echarles un vistazo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.es/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.es/Patterns-Principles-Practices-Domain-Driven-Design/dp/1118714709&quot;&gt;Patterns, principles and practices of Domain-Driven Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/minibooks/domain-driven-design-quickly&quot;&gt;DDD Quickly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1OgvUIsv96o&quot;&gt;DDD &amp;amp; Rest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=v1XIcgFUIEw&quot;&gt;Whoops, where did my architecture go?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

	</description>
    </item>
    <item>
      <title>Comenzando con Docker</title>
      <link>http://www.aguasnegras.es/blog/2017/05/14-comenzando-con-docker.html</link>
      <pubDate>dom., 14 may. 2017 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2017/05/14-comenzando-con-docker.html</guid>
      	<description>
	&lt;p&gt;&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; es una tecnología de contenedores relativamente reciente (de 2013) que si bien ha puesto sobre el terreno de juego el concepto de contenedores (aunque estos son tan antiguos como del 2005 que fue cuando salieron con Solaris...). Un contenedor viene a ser una máquina virtual ligera, en realidad es una aplicación (se ejecuta en espacio de usuario, usa el kernel del sistema operativo, etc...) en la que se puede instalar un sistema operativo y unas aplicaciones (una imagen) y por tanto se comportará como una máquina virtual a efectos prácticos. La ventaja de esta aproximación es que mientras una máquina virtual tiene unos recursos fijos que toma del sistema anfitrión, Docker no, con lo que es más eficiente y ligero.&lt;br /&gt;
La verdad es que todo el mundo habla de Docker, pero todavía no me he encontrado a nadie que lo use en producción. No obstante, este sistema es muy cómodo para montar entornos de desarrollo.&lt;br /&gt;
Lo primero, como siempre, es instalar Docker. La página de &lt;a href=&quot;https://docs.docker.com/engine/installation/linux/ubuntu/&quot;&gt;instalación&lt;/a&gt; no refiere aún información para Ubuntu 17.04, a ver que me voy encontrando.&lt;br /&gt;
El primer paso de la instalación es instalar una serie de paquetes que para mi sorpresa (no) ya tengo instalados. A continuación, y resumiendo las detalladísimas instrucciones de instalación (esto es buena documentación y lo demás son tonterías), los pasos para la instalación son los siguientes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;quot;
sudo apt-get update
sudo apt-get install docker-ce
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y aquí viene el primer problema, el repositorio añadido es para la versión actual de ubuntu &lt;em&gt;($lsb_release -cs)&lt;/em&gt; devuelve &lt;em&gt;zesty&lt;/em&gt;, y aún no hay soporte, así que veo dos opciones, o bien instalo el de xenial (modificando a mano el nombre del repositorio) o bien instalo los binarios. Por lo que veo en &lt;a href=&quot;https://askubuntu.com/questions/909691/how-to-install-docker-on-ubuntu-17-04&quot;&gt;askubuntu&lt;/a&gt; lo de instalar la versión de xenial no es tan descabellado, así que nada, palante. Modifico en &lt;em&gt;sources.list&lt;/em&gt; la definición del repositorio y donde pone &lt;em&gt;zesty&lt;/em&gt; pongo &lt;em&gt;xenial&lt;/em&gt; y repito los dos últimos pasos de arriba. Docker instalado :D&lt;br /&gt;
Ahora hay otra sección, de pasos tras la instalación. La más relevante es la de ejecutar docker sin tener que usar sudo (ojo, que esto puede ser un riesgo de seguridad, pero como es para un entorno de desarrollo...). Básicamente hay que crear un grupo de usuarios para docker y añadir el usuario actual a ese grupo (y reiniciar la sesión para que pille los cambios, claro):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sudo groupadd docker
sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación comentan que docker se inicia por defecto al arrancar el sistema. Esto no me parece muy bien ya que no siempre voy a querer iniciar docker, pero bueno, tampoco tengo ganas de liarlo mucho, así que ahí se queda.&lt;br /&gt;
Y listo, el resto de paso son resolución de problemas y aspectos avanzados que tampoco me afectan mucho. Ahm... ¿y cómo se verifica que ésto funciona? Muy fácil:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para seguir, esta el &lt;a href=&quot;https://docs.docker.com/get-started/&quot;&gt;getting-started&lt;/a&gt;, que retoma justo en ese paso. Tras un breve repaso teórico (e importante) se pasa a definir un contenedor mediante un Dockerfile, que no es más que un archivo de texto plano en el que se provisiona el sistema a partir de una imagen base y se ejecutan ciertas acciones de configuración. Vamos con el ejemplo:&lt;br /&gt;
FROM python:2.7-slim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WORKDIR /app
ADD . /app
RUN pip install -r requirements.txt
EXPOSE 80

ENV NAME World
CMD [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí hay tres partes bien diferenciadas:&lt;br /&gt;
1. Instalación de la imagen (que ya viene con python en este caso)&lt;br /&gt;
2. Configuración del entorno: compartir la carpeta app con el anfitrión, instalar dependencias y abrir el puerto 80 al exterior.&lt;br /&gt;
3. Configuración y ejecución de la aplicación concreta.&lt;/p&gt;
&lt;p&gt;Como la carpeta donde esta el &lt;em&gt;Dockerfile&lt;/em&gt; se esta montando en &lt;em&gt;/app&lt;/em&gt;, se crean en esa misma carpeta los archivos &lt;em&gt;requirements.txt&lt;/em&gt; y &lt;em&gt;app.py&lt;/em&gt;, con lo que para editar los archivos (y desarrollar) puedo usar mi equipo mientras que para ejecutarlo se usará el contenedor. Con ésto, se puede crear la imagen y ejecutarla:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker build -t friendlyhello .
docker run -p 4000:80 friendlyhelloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al &lt;em&gt;build&lt;/em&gt; se le indica el nombre de la imagen y el directorio en el que esta el &lt;em&gt;Dockerfile&lt;/em&gt; mientras que al &lt;em&gt;run&lt;/em&gt; se le pasa la redirección del puerto, es decir, el puerto del anfitrión 4000 redirigirá al puerto 80 del contenedor y el nombre de la imagen.&lt;br /&gt;
Para el &lt;em&gt;build&lt;/em&gt; hay que esperar un poco a que descargue de internet :)&lt;br /&gt;
Cuando ejecuto el &lt;em&gt;run&lt;/em&gt; puedo ver que se ha arrancado la aplicación y si accedo al puerto 4000 en localhost, puedo ver en la consola la traza de peticiones HTTP que se ejecutan.&lt;br /&gt;
Como esto no siempre es útil, se pueden ejecutar las imágenes en modo &lt;em&gt;detached&lt;/em&gt; (en segundo plano), tan solo pasando el parámetro &lt;em&gt;-d&lt;/em&gt; a &lt;em&gt;run&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker run -d -p 4000:80 friendlyhelloworld
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;em&gt;docker ps&lt;/em&gt; se puede consultar los contenedores que se estan ejecutando y con &lt;em&gt;docker stop&lt;/em&gt; se pueden parar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker ps
docker stop e02aa5295525
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El getting started continúa explicando que existen registro de imágenes en la nube y que puedes guardar ahí tus imágenes y compartirlas y tal (cosa muy útil). Yo me voy a saltar esa parte y sin embargo si voy a probar algo de la &lt;a href=&quot;http://developer.okta.com/blog/2017/05/10/developers-guide-to-docker-part-1&quot;&gt;introducción de Okta&lt;/a&gt;.&lt;br /&gt;
Primero, ¿cómo puedo saber que imágenes tengo en mi sistema?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker image list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En mi caso tengo tres:&lt;br /&gt;
* friendlyhello: La imagen que acabo de crear&lt;br /&gt;
* python: La base de la imagen que acabo de crear&lt;br /&gt;
* hello-world: La prueba de funcionamiento&lt;br /&gt;
Vale, ¿y como puedo borrar una imagen que ya no necesito?:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker rmi python:2.7-slim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con ésto por ejemplo me cargo la imagen python:2.7-slim y &lt;em&gt;todos los contenedores que la usan&lt;/em&gt;, así que ojocuidao. Eso sí, no me cargo las imágenes derivadas como puede ser &lt;em&gt;friendlyhello&lt;/em&gt;.&lt;br /&gt;
Bueno, otra cosa, cuando paro un contenedor (con &lt;em&gt;stop&lt;/em&gt;) resulta que el contenedor se queda en estado parado. ¿Y si no lo necesito más? Pues puedo listar todos los contenedores (esten en ejecución o no) y borrar el que escoja:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;docker ps -a
docker rm distracted_goodall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y hasta aquí voy a llegar con la introducción, ya que ahora empieza divergir mi camino. En la próxima, Docker y Spring Boot.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Logging de consultas y parametros de Hibernate</title>
      <link>http://www.aguasnegras.es/blog/2017/03/27-logging-consultas-parametros-hibernate.html</link>
      <pubDate>lun., 27 mar. 2017 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2017/03/27-logging-consultas-parametros-hibernate.html</guid>
      	<description>
	&lt;p&gt;Una de las funcionalidades básicas de &lt;a href=&quot;http://hibernate.org/orm/&quot;&gt;Hibernate&lt;/a&gt; es abstraer la base de datos, pero sin embargo en tiempo de desarrollo resulta bastante útil controlar las consultas que va generando el motor así como sus parámetros.&lt;br /&gt;
Desde las primeras versiones Hibernate tiene una propiedad, &lt;em&gt;show_sql&lt;/em&gt; que muestra estas consultas por consola. Esto tiene dos desventajas, la primera que usa la consola y la segunda que para habilitarlo y deshabilitarlo se depende de un archivo de configuración específico (normalmente el propio de Hibernate o incluso una clase Java si se esta utilizando la configuración Java de Spring). Además este parámetro tan sólo muestra las consultas y no los parámetros de las mismas.&lt;br /&gt;
La solución idónea pasa por utilizar el sistema de logging estándar que se utilice en la aplicación, así se puede mostrar en consola o registrar en un archivo o cualquier otro tipo de solución y además su activación y desactivación se hace en el sitio lógico, el archivo de configuración de logs de la aplicación.&lt;br /&gt;
Otra ventaja es que, además, con su configuración oportuna se pueden logar también los parámetros de las consultas (algo muy útil para contrastar con nuestro cliente SQL favorito).&lt;br /&gt;
Para poder mostrar estos logs hay dos loggers propios de Hibernate que configurar:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;org.hibernate.SQL: Se encarga de mostrar las consultas.&lt;/li&gt;
&lt;li&gt;org.hibernate.type.descriptor.sql.BasicBinder: Hay soluciones que proponen quedarse al nivel de type, pero en ese caso el log muestra toda la información relativas a tipos de Hibernate, no solo los valores de los parámetros. Con este logger se muestran únicamente éstos.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y un ejemplo de configuración para log4j:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE log4j:configuration SYSTEM &amp;quot;log4j.dtd&amp;quot; &amp;gt;
&amp;lt;log4j:configuration&amp;gt;

	&amp;lt;appender name=&amp;quot;hibernate_log&amp;quot; class=&amp;quot;org.apache.log4j.ConsoleAppender&amp;quot;&amp;gt;
		&amp;lt;layout class=&amp;quot;org.apache.log4j.PatternLayout&amp;quot;&amp;gt;
			&amp;lt;param name=&amp;quot;ConversionPattern&amp;quot; value=&amp;quot;%d{ABSOLUTE} %p %c - %m%n&amp;quot; /&amp;gt;
		&amp;lt;/layout&amp;gt;
	&amp;lt;/appender&amp;gt;

	&amp;lt;appender name=&amp;quot;stdout&amp;quot; class=&amp;quot;org.apache.log4j.ConsoleAppender&amp;quot;&amp;gt;
		&amp;lt;layout class=&amp;quot;org.apache.log4j.PatternLayout&amp;quot;&amp;gt;
			&amp;lt;param name=&amp;quot;ConversionPattern&amp;quot; value=&amp;quot;%d{ABSOLUTE} %p %c - %m%n&amp;quot; /&amp;gt;
		&amp;lt;/layout&amp;gt;
	&amp;lt;/appender&amp;gt;
	
	&amp;lt;logger name=&amp;quot;org.hibernate.SQL&amp;quot;&amp;gt;
		&amp;lt;level value=&amp;quot;trace&amp;quot; /&amp;gt;
		&amp;lt;appender-ref ref=&amp;quot;hibernate_log&amp;quot; /&amp;gt;
	&amp;lt;/logger&amp;gt;

	&amp;lt;logger name=&amp;quot;org.hibernate.type.descriptor.sql.BasicBinder&amp;quot;&amp;gt;
		&amp;lt;level value=&amp;quot;trace&amp;quot; /&amp;gt;
		&amp;lt;appender-ref ref=&amp;quot;hibernate_log&amp;quot; /&amp;gt;
	&amp;lt;/logger&amp;gt;
	
	&amp;lt;root&amp;gt;
		&amp;lt;priority value=&amp;quot;error&amp;quot; /&amp;gt;
		&amp;lt;appender-ref ref=&amp;quot;stdout&amp;quot; /&amp;gt;
	&amp;lt;/root&amp;gt;
&amp;lt;/log4j:configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>Nueva API de Fecha y Hora en Java 8</title>
      <link>http://www.aguasnegras.es/blog/2016/06/16-Nueva+API+de+Fecha+y+Hora+en+Java+8.html</link>
      <pubDate>jue., 16 jun. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/06/16-Nueva+API+de+Fecha+y+Hora+en+Java+8.html</guid>
      	<description>
	&lt;p&gt;Unos apuntes rápidos sobre la nueva API de fecha y hora en Java 8. Primero, clases fundamentales:&lt;br /&gt;
1. LocalDate: La fecha en el contexto local. En una zona horaria determinada.&lt;br /&gt;
2. LocalTime: La hora en el contexto local.&lt;br /&gt;
3. LocalDateTime: La composición de ambas.&lt;/p&gt;
&lt;p&gt;Aquí lo fundamental es que corresponden al contexto local del observador, es decir esa hora es válida para Sevilla pero no para Canarias. La hora y la fecha (por extensión) si la necesito completa se representa mediante una fecha/hora y un offset con respecto a UTC. Por ejemplo, ahora mismo en Sevilla estoy en UTC +02:00 y en Canarias en UTC +01:00. Para representar eso tengo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OffsetTime: Una hora con un Offset.&lt;/li&gt;
&lt;li&gt;ZonedDateTime: Una fecha con una zona horaria que a su vez contiene un Offset.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por último hay otras dos clases MUY interesantes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Duration: Una cantidad de tiempo en horas. Es decir, 34.5 sgs, 173.25 horas, etc...&lt;/li&gt;
&lt;li&gt;Period: Una cantidad de tiempo en fecha. Por ejemplo 3 días o 1.5 años, etc... Lo guay de esto es que maneja días conceptuales. Mientras que si uso Duration y añado un día son siempre 24 horas, Period tiene en cuenta, por ejemplo, el cambio horario, y si añado un día y ese día tiene 23 horas (porque ha habido que restar una hora), solo añade 23.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por último, la integración con la persistencia. El problema que hay es que Java 8 es más moderno que la especificación de persistencia (JPA 2.1), así que oficialmente no hay soporte para estos tipos, pero, si se usa Hibernate como proveedor de JPA (cosa que siempre hago porque después de probar varios es el que mejor funciona), &lt;a href=&quot;http://docs.jboss.org/hibernate/orm/5.1/userguide/html_single/Hibernate_User_Guide.html#basic-datetime&quot;&gt;basta con añadir una dependencia&lt;/a&gt; y hay soporte automático:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-java8&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;${hibernate.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>Wordpress to JBake - Generación de Archivos</title>
      <link>http://www.aguasnegras.es/blog/2016/06/10-wp2jbake-generacion.html</link>
      <pubDate>vie., 10 jun. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/06/10-wp2jbake-generacion.html</guid>
      	<description>
	&lt;p&gt;Bueno, pues ya queda la parte final, lanzarlo. Creo un método &lt;em&gt;main&lt;/em&gt; en &lt;em&gt;Wp2JBake&lt;/em&gt;, el primer argumento será el archivo de origen y el segundo el directorio de destino.&lt;br /&gt;
Como de toda la gestión de errores se encarga el programa en sí, lo único que tengo que hacer es capturar la posible &lt;em&gt;IllegalArgumentException&lt;/em&gt; y listo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public static void main (String... args) {
    if (args.length!=2) {
        System.out.println(&amp;quot;Wp2JBake needs two arguments to work: First the input file and second the destination folder&amp;quot;);
    } else {
        try {
            Wp2JBake exporter = new Wp2JBake(args[0], args[1]);
            Set&amp;lt;File&amp;gt; exportResult = exporter.generateJBakeMarkdown();
            if (!exportResult.isEmpty()) {
                System.out.println(&amp;quot;Export successful in &amp;quot; + args[1]);
            }
        } catch (IllegalArgumentException | IllegalStateException e) {
            System.out.println(&amp;quot;Error exporting: &amp;quot; + e.getMessage());
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora queda lo de siempre, generar el jar en Maven con todas sus dependencias. Añado al pom.xml la configuración del assembly-plugin para que genere el Manifest ya que sin él, el jar no sería ejecutable y además le digo que empaquete las dependencias junto con el jar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;&amp;lt;build&amp;gt;
    &amp;lt;plugins&amp;gt;
        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
                &amp;lt;descriptorRefs&amp;gt;
                    &amp;lt;descriptorRef&amp;gt;jar-with-dependencies&amp;lt;/descriptorRef&amp;gt;
                &amp;lt;/descriptorRefs&amp;gt;
                &amp;lt;archive&amp;gt;
                    &amp;lt;manifest&amp;gt;
                        &amp;lt;mainClass&amp;gt;com.digitalsingular.wp2jbake.Wp2JBake&amp;lt;/mainClass&amp;gt;
                    &amp;lt;/manifest&amp;gt;
                &amp;lt;/archive&amp;gt;
            &amp;lt;/configuration&amp;gt;
            &amp;lt;executions&amp;gt;
                &amp;lt;execution&amp;gt;
                    &amp;lt;id&amp;gt;assemble-all&amp;lt;/id&amp;gt;
                    &amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
                    &amp;lt;goals&amp;gt;
                        &amp;lt;goal&amp;gt;single&amp;lt;/goal&amp;gt;
                    &amp;lt;/goals&amp;gt;
                &amp;lt;/execution&amp;gt;
            &amp;lt;/executions&amp;gt;
        &amp;lt;/plugin&amp;gt;
    &amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y por fín se acabó, con ésto ya genero la exportación.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Configuración de Linux Mint</title>
      <link>http://www.aguasnegras.es/blog/2016/06/09-configuracion-mint.html</link>
      <pubDate>jue., 9 jun. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/06/09-configuracion-mint.html</guid>
      	<description>
	&lt;p&gt;Aprovechando que he actualizado el portátil (le he puesto 16 Gb de RAM y un SSD de 240 Gb), voy a documentar un poco mi configuración para que no se me vuelva a olvidar.&lt;br /&gt;
En primer lugar he instalado el último Linux Mint disponible, el 17.3 Rosa. No soy un gran fan de Mint (de hecho me parece que gráficamente hablando se han quedado un poco desfasados).&lt;br /&gt;
Una vez instalado he dado los siguientes pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Actualizar el sistema: apt-get update &amp;amp;&amp;amp; apt-get upgrade&lt;/li&gt;
&lt;li&gt;Instalar los últimos drivers de nvidia a través del mismo Administrador de controladores de Mint. Con eso y reiniciando ya me encuentra el HDMI (cosas de tener una tarjeta gráfica dual) y por tanto puedo usar el monitor de 23&amp;quot;.&lt;/li&gt;
&lt;li&gt;Instalar los drivers del adaptador wifi usb. El adaptador wifi de mi portátil deja bastante que desear, así que habitualmente uso un d-link usb para el wifi. La cosa es que el driver que trae por defecto Ubuntu (y Mint por extensión) es bastante malo (MUY malo), pero afortunadamente la comunidad se ha currado un driver mejor, &lt;a href=&quot;https://github.com/pvaret/rtl8192cu-fixes&quot;&gt;éste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Instalar vim.&lt;/li&gt;
&lt;li&gt;Desactivar la gestión de energía del wifi usb (wlan1) para que siempre vaya al máximo. Consume más, pero la verdad, la batería del portátil ya es vieja y dura media hora, así que me dá igual xD. En fín, me creo un script que lo desactivará en cada inicio: sudo vi sudo touch /etc/pm/power.d/wireless. Y ahí pongo las siguientes dos líneas:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;#!/bin/sh
/sbin/iwconfig wlan0 power off
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, le cambio los permisos a 755: sudo chmod 755 /etc/pm/power.d/wireless y listo.&lt;br /&gt;
6. Deshabilitar la tarjeta wifi por defecto: añado iface wlan0 inet manual a /etc/network/interfaces&lt;br /&gt;
7. En Configuración del Sistema &amp;gt; Apariencia &amp;gt; Efectos, desactivar&lt;br /&gt;
8. En Configuración del Sistema &amp;gt; Preferencias &amp;gt; Ajuste de ventanas, desactivar&lt;br /&gt;
9. En Configuración del Sistema &amp;gt; Preferencias &amp;gt; Escritorio, desactivar mostrar iconos de escritorio&lt;br /&gt;
10. Instalar Chrome&lt;br /&gt;
11. Instalar Atom&lt;br /&gt;
12. Instalar terminator&lt;br /&gt;
13. Instalar Java. Seamos sinceros, el OpenJDK por no hablar del IceTea son reguleros, así que instalo el Java oficial de Oracle usando el PPA de &lt;a href=&quot;http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html&quot;&gt;Webupd8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y ahora vamos con una lista de consejos sacados de &lt;a href=&quot;https://sites.google.com/site/easylinuxtipsproject&quot;&gt;Easy Linux Tips&lt;/a&gt; y aplicados según mi buen criterio:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Disminuir lo proclive que es el sistema a usar la SWAP, sobre todo ahora que tengo 16 Gb de RAM. El swappiness es un parámetro del 0 al 100, así que lo voy a dejar en 5. Para eso edito el archivo /etc/sysctl.conf y al final pongo el parámetro vm.swappiness=5&lt;/li&gt;
&lt;li&gt;Otra opción a tunear ahí es el uso de la caché. El procesador usa una caché de datos y otra de inodes (información del sistema de ficheros). Habitualmente tiene prioridad total la de datos, pero en equipos de escritorio se &lt;a href=&quot;http://bicosyes.com/2007/10/mejorando-rendimiento-en-linux-de-escritorio/&quot;&gt;recomienda&lt;/a&gt; ponerlo al 50. Para eso se usa el parámetro vm.vfs_cache_pressure=50 en /etc/sysctl.conf.&lt;/li&gt;
&lt;li&gt;Desactivar la hibernación. Bueno, lo de hibernar los equipos me parece una soberana gilipollez (así de claro), así que lo desactivo ejecutando ésto: sudo mv -v /etc/polkit-1/localauthority/50-local.d/com.ubuntu.enable-hibernate.pkla / sencillamente muevo el archivo de configuración a root, así ya no lo encuentra y listo&lt;/li&gt;
&lt;li&gt;Ahora vamos con el tuneo específico para el SSD, que es la primera vez que lo hago. En primer lugar, le añado noatime en /etc/fstab a las dos particiones ext4 que tengo (/ y /home), de esta manera, no se escribirá la hora de acceso a los ficheros en el disco y me ahorro escrituras (que son satán para los SSD). Los vuelvo a montar con sudo mount -a&lt;/li&gt;
&lt;li&gt;TRIM es un comando que sirve para optimizar el uso y acceso de la SSD y en general mantener la velocidad. Bueno, pues por lo visto en Ubuntu y Mint se ejecuta a través de un cron semanal (bieeeeennn old school total). Lo voy a pasar a rc.local para que se ejecute en cada arranque y listo. Edito /etc/rc.local y añado dos líneas: fstrim / y fstrim /home antes del exit 0. Por último, desactivo el cron, sencillamente muevo el script de sitio: sudo mv -v /etc/cron.weekly/fstrim /fstrim&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ahora unos trucos para acelerar el arranque:&lt;br /&gt;
1. Deshabilitar la splash screen, a mí de todas formas no me gusta, prefiero ver el proceso de arranque. Edito la configuración de grub en /etc/default/grub y la línea GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot; la cambio por GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;profile&amp;quot;. De esa manera puedo controlar el proceso de arranque y además me hace un profiling para acelerarlo un poco.&lt;br /&gt;
2. Instalo bum (bootup manager) y desactivo varios servicios que vienen activos y que no uso: openvpn, virtualbox-guest-utils y saned.&lt;/p&gt;
&lt;p&gt;Y por último, las chorradas:&lt;br /&gt;
1. Instalar grub-customizer para poner bonito el grub sin tener que usar la línea de comando. Ponerle una imagen, etc...&lt;br /&gt;
2. Instalar el conky y ajustar el .conkyrc&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Wordpress to JBake - Integración</title>
      <link>http://www.aguasnegras.es/blog/2016/06/08-wp2jbake-integracion.html</link>
      <pubDate>mié., 8 jun. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/06/08-wp2jbake-integracion.html</guid>
      	<description>
	&lt;p&gt;Realmente las pruebas de integración ya casi estan hechas y son muy sencillas ya que se trata de interactuar en todo caso con la clase principal &lt;em&gt;Wp2JBake&lt;/em&gt;, usando donde sea necesario el archivo de pruebas.&lt;br /&gt;
Lo único interesante van a ser los asserts para comprobar que todo es correcto.&lt;br /&gt;
En un principio, las pruebas definidas pasan sin mayor problema, pero en primer lugar, hay que preguntarse si se estan exportando todos los posts o solo aquellos que estan publicados, es decir, el test usando el wp-source.xml sería el siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void processXML() {
    sut = new Wp2JBake(POSTS_SOURCE, DESTINATION);
    Set&amp;lt;File&amp;gt; markdowns = sut.generateJBakeMarkdown();
    assertThat(markdowns.size(), is(5));
    assertThat(markdowns, is(not(empty())));
    for (File markdown: markdowns) {
        assertThat(markdown.exists(), is(true));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y este test falla porque markdowns tiene 7 elementos. Esto es así porque hay 2 elementos que en &lt;em&gt;pubDate&lt;/em&gt; tienen como año el -0001, lo cual significa que es un borrador, así que hay que corregir la implementación. En un principio lo iba a poner en el &lt;em&gt;MdWriter&lt;/em&gt;, pero realmente esta clase tan solo tiene que conocer los detalles de la escritura, no cuales elementos se deben escribir y cuales no. En &lt;em&gt;WpParser&lt;/em&gt; tampoco tiene sentido por motivos similares, esta clase solo lee. Pensándolo de otra forma, ¿qué clase es la que decide cómo se lee y cómo se escribe? Pues &lt;em&gt;Wp2JBake&lt;/em&gt;, más concretamente en el callback &lt;em&gt;postRead&lt;/em&gt;, así que ahí es el sitio en el que decidir si el post se exporta o no:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class Wp2JBake {

    public static final int DRAFT_YEAR = 2;
    private WpReader wpReader;

    private MdWriter mdWriter;

    private HashSet&amp;lt;File&amp;gt; exportResult;

    public Wp2JBake(String origin, String destination) {
        this.wpReader = new WpReader(origin);
        this.mdWriter = new MdWriter(destination);
    }

    public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
        exportResult = new HashSet&amp;lt;&amp;gt;();
        wpReader.readPosts(this);
        return exportResult;
    }

    public void postRead(Post post) {
        if (!postIsDraft(post)) {
            exportResult.add(mdWriter.write(post));
        }
    }

    private boolean postIsDraft(Post post) {
        Calendar postCalendar = Calendar.getInstance();
        postCalendar.setTime(post.getPublishingDate());
        return (postCalendar.get(Calendar.YEAR) == DRAFT_YEAR);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo de la fecha es un poco... por algún motivo, al hacer el parseo de la fecha, decide que el año -0001 lo va a convertir en 2, eah... pues nada, así se queda porque tanto me dá un valor como otro. Y ahora ya pasa el test. Bueno, pues lo siguiente es comprobar qué pasa con las etiquetas &lt;code&gt;&amp;lt;pre&lt;/code&gt;&amp;gt;.&lt;br /&gt;
El problema que hay realmente con esas etiquetas no es del conversor ni nada, sino que al migrar a JBake tengo que pasarlas a prettyprint para que las entienda, puedo tener el mismo problema con otras etiquetas, que las tenga que convertir por un motivo de formato, que no queden muy feas en el nuevo diseño del blog.&lt;br /&gt;
Pero empiezo por las &lt;code&gt;&amp;lt;pre&lt;/code&gt;&amp;gt;. Esto sí que es claramente algo a tratar en &lt;em&gt;MdWriter&lt;/em&gt;, el plugin de Wordpress para colorear el código utilizaba distintas marcas como &lt;code&gt;&amp;lt;pre lang=xml&lt;/code&gt;&amp;gt; o &lt;code&gt;&amp;lt;pre lang=java&lt;/code&gt;&amp;gt; por tanto hay que sustituir en content todo lo que sea &lt;code&gt;&amp;lt;pre *&lt;/code&gt;&amp;gt; por `````prettyprint linenums. Ahora que lo pienso, &lt;em&gt;MdWriter&lt;/em&gt; debe saber como escribir, pero desde luego no es responsabilidad suya saber como traducir, así que sale una clase nueva &lt;em&gt;MdTranslator&lt;/em&gt; con un único método, &lt;em&gt;translate&lt;/em&gt;. Y repasando el método de escritura del post, también es responsabilidad suya el convertir los tags y la fecha, ahora se ve claramente, así que harán falta más métodos.&lt;/p&gt;
&lt;p&gt;Habrá que crear sus correspondientes test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdTranslatorTest {

    public static final String TAG_1 = &amp;quot;tag 1&amp;quot;;
    public static final String TAG_2 = &amp;quot;tag 2&amp;quot;;
    public static final String TEST_DATE = &amp;quot;2016-01-01&amp;quot;;
    public static final String TEST_CONTENT = &amp;quot;content&amp;quot;;
    public static final String TEST_PRE_CONTENT = &amp;quot;&amp;lt;pre lang=\&amp;quot;java\&amp;quot;&amp;gt; java content &amp;lt;/pre&amp;gt;&amp;quot;;
    public static final String TEST_PRE_RESULT = &amp;quot;\n```prettyprint linenums\n java content \n```\n&amp;quot;;

    private MdTranslator sut = new MdTranslator();

    @Test
    public void translateDate() throws Exception {
        String dateAsString = TEST_DATE;
        SimpleDateFormat formatter = new SimpleDateFormat(MdTranslator.POST_DATE_FORMAT);
        Date date = formatter.parse(dateAsString);
        String translatedDate = sut.translateDate(date);
        assertThat(translatedDate, is(dateAsString));
    }

    @Test
    public void translateTags() {
        List&amp;lt;String&amp;gt; tags = new ArrayList&amp;lt;&amp;gt;(2);
        tags.add(TAG_1);
        tags.add(TAG_2);
        String translatedTags = sut.translateTags(tags);
        assertThat(translatedTags, is(TAG_1 + MdTranslator.TAG_DELIMITER + TAG_2));
    }

    @Test
    public void translateContent() {
        String translatedContent = sut.translateContent(TEST_CONTENT);
        assertThat(translatedContent, is(TEST_CONTENT));
    }

    @Test
    public void translateContentWithPreWithLanguage() {
        String translatedContent = sut.translateContent(TEST_PRE_CONTENT);
        assertThat(translatedContent, is(TEST_PRE_RESULT));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Todos funcionan menos el último, claro, hay que cambiar la implementación del &lt;em&gt;translateContent&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdTranslator {

    public static final String POST_DATE_FORMAT = &amp;quot;yyyy-MM-dd&amp;quot;;
    public static final String TAG_DELIMITER = &amp;quot;,&amp;quot;;


    public String translateDate(Date dateToTranslate) {
        DateFormat formatter = new SimpleDateFormat(POST_DATE_FORMAT);
        return formatter.format(dateToTranslate);
    }

    public String translateTags(Collection&amp;lt;String&amp;gt; tagsToTranslate) {
        return tagsToTranslate.stream().map(Object::toString).collect(Collectors.joining(TAG_DELIMITER));
    }

    public String translateContent(String contentToTranslate) {
        String translatedContent = translatePre(contentToTranslate);
        return translatedContent;
    }

    private String translatePre(String contentToTranslate) {
        String contentWithoutStartingPre = contentToTranslate.replaceAll(&amp;quot;&amp;lt;pre[^&amp;gt;]*&amp;gt;&amp;quot;, &amp;quot;\n```prettyprint linenums\n&amp;quot;);
        String contentWithoutEndingPre = contentWithoutStartingPre.replaceAll(&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;, &amp;quot;\n```\n&amp;quot;);
        return contentWithoutEndingPre;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con ésto ya bastaría, pero mirando el estilo, hay bastantes etiquetas &lt;code&gt;&amp;lt;h1&lt;/code&gt;&amp;gt; etc... para dar formato. Estas etiquetas no pegan nada en el diseño nuevo de la página, ya que el titular del post es un &lt;code&gt;&amp;lt;h4&lt;/code&gt;&amp;gt;, así que el &lt;code&gt;&amp;lt;h1&lt;/code&gt;&amp;gt; debería ser el &lt;code&gt;&amp;lt;h5&lt;/code&gt;&amp;gt; y sucesivamente... vamos a ello.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdTranslatorTest {

    public static final String TAG_1 = &amp;quot;tag 1&amp;quot;;
    public static final String TAG_2 = &amp;quot;tag 2&amp;quot;;
    public static final String TEST_DATE = &amp;quot;2016-01-01&amp;quot;;
    public static final String TEST_CONTENT = &amp;quot;content&amp;quot;;
    public static final String TEST_PRE_CONTENT = &amp;quot;&amp;lt;pre lang=\&amp;quot;java\&amp;quot;&amp;gt; java content &amp;lt;/pre&amp;gt;&amp;quot;;
    public static final String TEST_PRE_RESULT = &amp;quot;\n```prettyprint linenums\n java content \n```\n&amp;quot;;
    private static final String TEST_HEADING_CONTENT = &amp;quot;&amp;lt;h1&amp;gt; Title &amp;lt;/h1&amp;gt;&amp;lt;H2&amp;gt; Subtitle &amp;lt;/H2&amp;gt;&amp;quot;;
    private static final String TEST_HEADING_RESULT = &amp;quot;&amp;lt;h5&amp;gt; Title &amp;lt;/h5&amp;gt;&amp;lt;h6&amp;gt; Subtitle &amp;lt;/h6&amp;gt;&amp;quot;;

    private MdTranslator sut = new MdTranslator();

    @Test
    public void translateDate() throws Exception {
        String dateAsString = TEST_DATE;
        SimpleDateFormat formatter = new SimpleDateFormat(MdTranslator.POST_DATE_FORMAT);
        Date date = formatter.parse(dateAsString);
        String translatedDate = sut.translateDate(date);
        assertThat(translatedDate, is(dateAsString));
    }

    @Test
    public void translateTags() {
        List&amp;lt;String&amp;gt; tags = new ArrayList&amp;lt;&amp;gt;(2);
        tags.add(TAG_1);
        tags.add(TAG_2);
        String translatedTags = sut.translateTags(tags);
        assertThat(translatedTags, is(TAG_1 + MdTranslator.TAG_DELIMITER + TAG_2));
    }

    @Test
    public void translateContent() {
        String translatedContent = sut.translateContent(TEST_CONTENT);
        assertThat(translatedContent, is(TEST_CONTENT));
    }

    @Test
    public void translateContentWithPre() {
        String translatedContent = sut.translateContent(TEST_PRE_CONTENT);
        assertThat(translatedContent, is(TEST_PRE_RESULT));
    }

    @Test
    public void translateContentWithHeading() {
        String translatedContent = sut.translateContent(TEST_HEADING_CONTENT);
        assertThat(translatedContent, is(TEST_HEADING_RESULT));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdTranslator {

    public static final String POST_DATE_FORMAT = &amp;quot;yyyy-MM-dd&amp;quot;;
    public static final String TAG_DELIMITER = &amp;quot;,&amp;quot;;
    public static final String START_PRE = &amp;quot;&amp;lt;pre[^&amp;gt;]*&amp;gt;&amp;quot;;
    public static final String START_PRETTYPRINT = &amp;quot;\n```prettyprint linenums\n&amp;quot;;
    public static final String END_PRE = &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;;
    public static final String END_PRETTYPRINT = &amp;quot;\n```\n&amp;quot;;
    public static final String START_H1 = &amp;quot;&amp;lt;h1&amp;gt;&amp;quot;;
    public static final String START_H5 = &amp;quot;&amp;lt;h5&amp;gt;&amp;quot;;
    public static final String END_H1 = &amp;quot;&amp;lt;/h1&amp;gt;&amp;quot;;
    public static final String END_H5 = &amp;quot;&amp;lt;/h5&amp;gt;&amp;quot;;
    public static final String START_H2 = &amp;quot;&amp;lt;h2&amp;gt;&amp;quot;;
    public static final String START_H6 = &amp;quot;&amp;lt;h6&amp;gt;&amp;quot;;
    public static final String END_H2 = &amp;quot;&amp;lt;/h2&amp;gt;&amp;quot;;
    public static final String END_H6 = &amp;quot;&amp;lt;/h6&amp;gt;&amp;quot;;
    public static final String START_H3 = &amp;quot;&amp;lt;h3&amp;gt;&amp;quot;;
    public static final String START_H7 = &amp;quot;&amp;lt;h7&amp;gt;&amp;quot;;
    public static final String END_H3 = &amp;quot;&amp;lt;/h3&amp;gt;&amp;quot;;
    public static final String END_H7 = &amp;quot;&amp;lt;/h7&amp;gt;&amp;quot;;


    public String translateDate(Date dateToTranslate) {
        DateFormat formatter = new SimpleDateFormat(POST_DATE_FORMAT);
        return formatter.format(dateToTranslate);
    }

    public String translateTags(Collection&amp;lt;String&amp;gt; tagsToTranslate) {
        return tagsToTranslate.stream().map(Object::toString).collect(Collectors.joining(TAG_DELIMITER));
    }

    public String translateContent(String contentToTranslate) {
        String translatedContent = translatePre(contentToTranslate);
        translatedContent = translateHeadings(translatedContent);
        return translatedContent;
    }

    private String translatePre(String contentToTranslate) {
        String contentWithoutStartingPre = contentToTranslate.replaceAll(START_PRE, START_PRETTYPRINT);
        String contentWithoutEndingPre = contentWithoutStartingPre.replaceAll(END_PRE, END_PRETTYPRINT);
        return contentWithoutEndingPre;
    }

    private String translateHeadings(String contentToTranslate) {
        String contentWithoutStartingh1 = contentToTranslate.replace(START_H1, START_H5).replace(START_H1.toUpperCase(), START_H5);
        String contentWithoutEndingh1 = contentWithoutStartingh1.replace(END_H1, END_H5).replace(END_H1.toUpperCase(), END_H5);
        String contentWithoutStartingh2 = contentWithoutEndingh1.replace(START_H2, START_H6).replace(START_H2.toUpperCase(), START_H6);
        String contentWithoutEndingh2 = contentWithoutStartingh2.replace(END_H2, END_H6).replace(END_H2.toUpperCase(), END_H6);
        String contentWithoutStartingh3 = contentWithoutEndingh2.replace(START_H3, START_H7).replace(START_H3.toUpperCase(), START_H7);
        String contentWithoutEndingh3 = contentWithoutStartingh3.replace(END_H3, END_H7).replace(END_H3.toUpperCase(), END_H7);
        return contentWithoutEndingh3;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que no digo que no haya forma más elegante de convertir las etiquetas de heading... pero de momento, servirá.&lt;/p&gt;
&lt;p&gt;Y ya el (espero) último problema. Wordpress muchas veces mete elementos propios en etiquetas rollo &lt;em&gt;[caption]...[/caption]&lt;/em&gt;. Esta parte es complicada, porque en ese caso por ejemplo usaba una imagen subida al mismo wordpress y si bien podría hacer una petición para bajar la imagen y guardarla y tal... va a ser que no, lo que voy a hacer sencillamente es cargarme esas etiquetas (que al fin y al cabo solo son para embellecer) y dejar el contenido de las mismas, a ver que pasa.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdTranslatorTest {

    public static final String TAG_1 = &amp;quot;tag 1&amp;quot;;
    public static final String TAG_2 = &amp;quot;tag 2&amp;quot;;
    public static final String TEST_DATE = &amp;quot;2016-01-01&amp;quot;;
    public static final String TEST_CONTENT = &amp;quot;content&amp;quot;;
    public static final String TEST_PRE_CONTENT = &amp;quot;&amp;lt;pre lang=\&amp;quot;java\&amp;quot;&amp;gt; java content &amp;lt;/pre&amp;gt;&amp;quot;;
    public static final String TEST_PRE_RESULT = &amp;quot;\n```prettyprint linenums\n java content \n```\n&amp;quot;;
    private static final String TEST_HEADING_CONTENT = &amp;quot;&amp;lt;h1&amp;gt; Title &amp;lt;/h1&amp;gt;&amp;lt;H2&amp;gt; Subtitle &amp;lt;/H2&amp;gt;&amp;quot;;
    private static final String TEST_HEADING_RESULT = &amp;quot;&amp;lt;h5&amp;gt; Title &amp;lt;/h5&amp;gt;&amp;lt;h6&amp;gt; Subtitle &amp;lt;/h6&amp;gt;&amp;quot;;
    public static final String TEST_WORDPRESS_TAGS_CONTENT = &amp;quot;[caption id=&apos;image&apos;] image [/caption]&amp;quot;;
    public static final String TEST_WORDPRESS_TAGS_RESULT = &amp;quot; image &amp;quot;;

    private MdTranslator sut = new MdTranslator();

    @Test
    public void translateDate() throws Exception {
        String dateAsString = TEST_DATE;
        SimpleDateFormat formatter = new SimpleDateFormat(MdTranslator.POST_DATE_FORMAT);
        Date date = formatter.parse(dateAsString);
        String translatedDate = sut.translateDate(date);
        assertThat(translatedDate, is(dateAsString));
    }

    @Test
    public void translateTags() {
        List&amp;lt;String&amp;gt; tags = new ArrayList&amp;lt;&amp;gt;(2);
        tags.add(TAG_1);
        tags.add(TAG_2);
        String translatedTags = sut.translateTags(tags);
        assertThat(translatedTags, is(TAG_1 + MdTranslator.TAG_DELIMITER + TAG_2));
    }

    @Test
    public void translateContent() {
        String translatedContent = sut.translateContent(TEST_CONTENT);
        assertThat(translatedContent, is(TEST_CONTENT));
    }

    @Test
    public void translateContentWithPre() {
        String translatedContent = sut.translateContent(TEST_PRE_CONTENT);
        assertThat(translatedContent, is(TEST_PRE_RESULT));
    }

    @Test
    public void translateContentWithHeading() {
        String translatedContent = sut.translateContent(TEST_HEADING_CONTENT);
        assertThat(translatedContent, is(TEST_HEADING_RESULT));
    }

    @Test
    public void translateContentWithWordpressTags() {
        String translatedContent = sut.translateContent(TEST_WORDPRESS_TAGS_CONTENT);
        assertThat(translatedContent, is(TEST_WORDPRESS_TAGS_RESULT));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdTranslator {

    public static final String POST_DATE_FORMAT = &amp;quot;yyyy-MM-dd&amp;quot;;
    public static final String TAG_DELIMITER = &amp;quot;,&amp;quot;;
    public static final String START_PRE = &amp;quot;&amp;lt;pre[^&amp;gt;]*&amp;gt;&amp;quot;;
    public static final String START_PRETTYPRINT = &amp;quot;\n```prettyprint linenums\n&amp;quot;;
    public static final String END_PRE = &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;;
    public static final String END_PRETTYPRINT = &amp;quot;\n```\n&amp;quot;;
    public static final String START_H1 = &amp;quot;&amp;lt;h1&amp;gt;&amp;quot;;
    public static final String START_H5 = &amp;quot;&amp;lt;h5&amp;gt;&amp;quot;;
    public static final String END_H1 = &amp;quot;&amp;lt;/h1&amp;gt;&amp;quot;;
    public static final String END_H5 = &amp;quot;&amp;lt;/h5&amp;gt;&amp;quot;;
    public static final String START_H2 = &amp;quot;&amp;lt;h2&amp;gt;&amp;quot;;
    public static final String START_H6 = &amp;quot;&amp;lt;h6&amp;gt;&amp;quot;;
    public static final String END_H2 = &amp;quot;&amp;lt;/h2&amp;gt;&amp;quot;;
    public static final String END_H6 = &amp;quot;&amp;lt;/h6&amp;gt;&amp;quot;;
    public static final String START_H3 = &amp;quot;&amp;lt;h3&amp;gt;&amp;quot;;
    public static final String END_H3 = &amp;quot;&amp;lt;/h3&amp;gt;&amp;quot;;
    public static final String START_WORDPRESS_CAPTION = &amp;quot;\\[caption[^\\]]*\\]&amp;quot;;
    public static final String END_WORDPRESS_CAPTION = &amp;quot;\\[/caption\\]&amp;quot;;


    public String translateDate(Date dateToTranslate) {
        DateFormat formatter = new SimpleDateFormat(POST_DATE_FORMAT);
        return formatter.format(dateToTranslate);
    }

    public String translateTags(Collection&amp;lt;String&amp;gt; tagsToTranslate) {
        return tagsToTranslate.stream().map(Object::toString).collect(Collectors.joining(TAG_DELIMITER));
    }

    public String translateContent(String contentToTranslate) {
        String translatedContent = translatePre(contentToTranslate);
        translatedContent = translateHeadings(translatedContent);
        translatedContent = deleteWordpressImages(translatedContent);
        return translatedContent;
    }

    private String deleteWordpressImages(String contentToTranslate) {
        String contentWithoutStartingTag = contentToTranslate.replaceAll(START_WORDPRESS_CAPTION, StringUtils.EMPTY);
        String contentWithoutEndingTag = contentWithoutStartingTag.replaceAll(END_WORDPRESS_CAPTION, StringUtils.EMPTY);
        return contentWithoutEndingTag;
    }

    private String translatePre(String contentToTranslate) {
        String contentWithoutStartingPre = contentToTranslate.replaceAll(START_PRE, START_PRETTYPRINT);
        String contentWithoutEndingPre = contentWithoutStartingPre.replaceAll(END_PRE, END_PRETTYPRINT);
        return contentWithoutEndingPre;
    }

    private String translateHeadings(String contentToTranslate) {
        String contentWithoutStartingh1 = contentToTranslate.replace(START_H1, START_H5).replace(START_H1.toUpperCase(), START_H5);
        String contentWithoutEndingh1 = contentWithoutStartingh1.replace(END_H1, END_H5).replace(END_H1.toUpperCase(), END_H5);
        String contentWithoutStartingh2 = contentWithoutEndingh1.replace(START_H2, START_H6).replace(START_H2.toUpperCase(), START_H6);
        String contentWithoutEndingh2 = contentWithoutStartingh2.replace(END_H2, END_H6).replace(END_H2.toUpperCase(), END_H6);
        String contentWithoutStartingh3 = contentWithoutEndingh2.replace(START_H3, START_H6).replace(START_H3.toUpperCase(), START_H6);
        String contentWithoutEndingh3 = contentWithoutStartingh3.replace(END_H3, END_H6).replace(END_H3.toUpperCase(), END_H6);
        return contentWithoutEndingh3;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un detalle más revisando la documentación de &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax#html&quot;&gt;Markdown&lt;/a&gt;, te recomiendan que los elementos a nivel de bloque vayan precedidos y sucedidos por una línea en blanco, eso significa más trabajo para el translator. En particular, tengo que tocar el tratamiento de los heading para añadirlo y además, procesar &lt;em&gt;&lt;p&gt;&lt;/em&gt;, &lt;em&gt;&lt;ul&gt;&lt;/em&gt;, &lt;em&gt;&lt;ol&gt;&lt;/em&gt;, &lt;em&gt;&lt;blockquote&gt;&lt;/em&gt;, &lt;em&gt;&lt;table&gt;&lt;/em&gt; y &lt;em&gt;&lt;div&gt;&lt;/em&gt;. Hay algunos más pero creo que con eso ya voy cubierto, si no, cuestión de ir añadiendo más casos.&lt;/p&gt;
&lt;p&gt;Test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void translateContentWithBlockElements() {
    String translatedContent = sut.translateContent(&amp;quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;div&amp;gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;);
    assertThat(translatedContent, is(&amp;quot;\n&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;\n\n&amp;lt;div&amp;gt;\n&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;\n&amp;lt;/div&amp;gt;\n&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;E implementación (me acabo de enterar de que con el replaceAll se pueden usar placeholders como el $0):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private String addNewLinesToBlockElements(String contentToTranslate) {
    contentToTranslate = contentToTranslate.replaceAll(&amp;quot;&amp;lt;p[^&amp;gt;]*&amp;gt;|&amp;lt;div[^&amp;gt;]*&amp;gt;|&amp;lt;ol[^&amp;gt;]*&amp;gt;|&amp;lt;ul[^&amp;gt;]*&amp;gt;|&amp;lt;blockquote[^&amp;gt;]*&amp;gt;|&amp;lt;table[^&amp;gt;]*&amp;gt;&amp;quot;, &amp;quot;\n$0&amp;quot;);
    contentToTranslate = contentToTranslate.replaceAll(&amp;quot;&amp;lt;/p&amp;gt;|&amp;lt;/div&amp;gt;|&amp;lt;/ol&amp;gt;|&amp;lt;/ul&amp;gt;|&amp;lt;/blockquote&amp;gt;|&amp;lt;/table&amp;gt;&amp;quot;, &amp;quot;$0\n&amp;quot;);
    return contentToTranslate;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, se sacan las correspondientes constantes y listo.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Wordpress to JBake - Escritura</title>
      <link>http://www.aguasnegras.es/blog/2016/06/05-wp2jbake-escritura.html</link>
      <pubDate>dom., 5 jun. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/06/05-wp2jbake-escritura.html</guid>
      	<description>
	&lt;p&gt;Retomando la migración del blog, una vez resuelta la parte de leer los posts, hay que hacer la escritura. El enfoque pasa por lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Tener una plantilla de post que se leerá en el constructor. Esta plantilla tendrá placeholders para saber donde van los campos.&lt;/li&gt;
&lt;li&gt;Tratar según que campos, por ejemplo los tags habrá que representarlos como un string y separados por comas, las etiquetas &lt;code&gt;&amp;lt;pre&lt;/code&gt;&amp;gt; que indican código habrá que convertiras a prettyprint.&lt;/li&gt;
&lt;li&gt;Escribir el archivo, a ser posible usando async I/O, así no se bloquea.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Empezando por lo primero, la plantilla irá en &lt;em&gt;src/main/resources&lt;/em&gt; y será la siguiente&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;title=$title$
date=$date$
type=post
tags=$tags$
status=published
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;$content$&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Los placeholders he decidido que empiecen y terminen por $ para mayor seguridad. El test sería el siguiente:

```prettyprint
@Test
public void writerWithValidDestination() {
    sut = new MdWriter(&amp;quot;src/test/destination&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la implementación, aprovechando para lo cual he simplificado la clase usando las clases nuevas de Java 8 &lt;em&gt;Files&lt;/em&gt; y &lt;em&gt;Path&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdWriter {

    private String template;

    private String destinationFolder;

    public MdWriter(String destinationFolder) {
        if (StringUtils.isEmpty(destinationFolder) || !isWritable(destinationFolder)) {
            throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
        } else {
            readTemplate();
            this.destinationFolder = destinationFolder;
        }
    }

    private void readTemplate() {
        try {
            template = new String(Files.readAllBytes(Paths.get(&amp;quot;src/main/resources/template.md&amp;quot;)));
        } catch (IOException e) {
            throw new IllegalStateException(&amp;quot;Could not read post template template.md: &amp;quot; + e.getMessage());
        }
    }

    private boolean isWritable(String destination) {
        Path destinationPath = Paths.get(destination);
        if (Files.exists(destinationPath)) {
            return Files.isWritable(destinationPath);
        } else {
            return Files.isWritable(destinationPath.getParent());
        }
    }

    public File write(Post post) {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora tengo que crear la estructura de archivos en la que va el post, es decir, tengo que verificar si existe existe la ruta del tipo detinationFolder/yyyy/mm y ahí crear un archivo de nombre dd-tituloDelPost y por último, escribirlo. La verdad que todo esto es MUY fácil con &lt;em&gt;Paths&lt;/em&gt; y &lt;em&gt;Files&lt;/em&gt;, así que ya no hace falta usar los &lt;em&gt;commons-io&lt;/em&gt;, al menos para ésto.&lt;br /&gt;
Los tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdWriterTest {

    public static final String POST_DATE_FORMAT = &amp;quot;yyyy-MM-dd&amp;quot;;
    public static final String TEST_POST_CONTENT = &amp;quot;content&amp;quot;;
    public static final String TEST_POST_TITLE = &amp;quot;title&amp;quot;;
    public static final Date TEST_POST_DATE = new Date();
    public static final String POST = &amp;quot;post&amp;quot;;
    public static final String EMPTY_TAGS = &amp;quot;&amp;quot;;
    public static final String PUBLISHED = &amp;quot;published&amp;quot;;
    public static final String METADATA_SEPARATOR = &amp;quot;~~~~~~&amp;quot;;
    public static final String FIRST_TAG = &amp;quot;tag1&amp;quot;;
    public static final String SECOND_TAG = &amp;quot;tag2&amp;quot;;
    private MdWriter sut;

    private String destination = &amp;quot;src/test/destination&amp;quot;;

    @Before
    public void setUp() throws IOException {
        cleanDestination();
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithoutDestination() {
        sut = new MdWriter(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithEmptyDestination() {
        sut = new MdWriter(&amp;quot;&amp;quot;);
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithNonWritableDestination() {
        File destination = new File(&amp;quot;destination&amp;quot;);
        destination.mkdir();
        destination.deleteOnExit();
        destination.setReadOnly();
        sut = new MdWriter(destination.getAbsolutePath());
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithNonWritableDestinationParent() {
        File destinationParent = new File(&amp;quot;destinationParent&amp;quot;);
        destinationParent.mkdir();
        destinationParent.deleteOnExit();
        destinationParent.setReadOnly();
        sut = new MdWriter(destinationParent.getAbsolutePath() + File.separator + &amp;quot;destination&amp;quot;);
    }

    @Test
    public void writerWithValidDestination() {
        sut = new MdWriter(destination);
    }

    @Test(expected =  IllegalArgumentException.class)
    public void writeEmptyPost() {
        sut = new MdWriter(destination);
        sut.write(new Post());
        new File(destination).delete();
    }

    @Test
    public void writePostWithoutTags() throws IOException {
        sut = new MdWriter(destination);
        Post post = new Post().withContent(TEST_POST_CONTENT).withTitle(TEST_POST_TITLE).withPublishingDate(TEST_POST_DATE);
        File postFile = sut.write(post);
        assertThat(postFile, notNullValue());
        List&amp;lt;String&amp;gt; lines = Files.readAllLines(Paths.get(postFile.getPath()));
        assertThat(getValue(lines.get(0)), is(post.getTitle()));
        assertThat(getValue(lines.get(1)), is(getPostDate(post)));
        assertThat(getValue(lines.get(2)), is(POST));
        assertThat(getValue(lines.get(3)), is(EMPTY_TAGS));
        assertThat(getValue(lines.get(4)), is(PUBLISHED));
        assertThat(getValue(lines.get(5)), is(METADATA_SEPARATOR));
        assertThat(lines.get(6), is(post.getContent()));
        cleanDestination();
    }

    @Test
    public void writePostWithTags() throws IOException {
        sut = new MdWriter(destination);
        Post post = new Post().withContent(TEST_POST_CONTENT).withTitle(TEST_POST_TITLE).withPublishingDate(TEST_POST_DATE).withTag(FIRST_TAG).withTag(SECOND_TAG);
        File postFile = sut.write(post);
        assertThat(postFile, notNullValue());
        List&amp;lt;String&amp;gt; lines = Files.readAllLines(Paths.get(postFile.getPath()));
        assertThat(getValue(lines.get(0)), is(post.getTitle()));
        assertThat(getValue(lines.get(1)), is(getPostDate(post)));
        assertThat(getValue(lines.get(2)), is(POST));
        assertThat(getValue(lines.get(3)), is(FIRST_TAG+&amp;quot;,&amp;quot;+SECOND_TAG));
        assertThat(getValue(lines.get(4)), is(PUBLISHED));
        assertThat(getValue(lines.get(5)), is(METADATA_SEPARATOR));
        assertThat(lines.get(6), is(post.getContent()));
        cleanDestination();
    }

    private String getPostDate(Post post) {
        DateFormat formatter = new SimpleDateFormat(POST_DATE_FORMAT);
        return formatter.format(post.getPublishingDate());
    }

    private String getValue(String line) {
        int valueStart = line.indexOf(&amp;quot;=&amp;quot;)+1;
        return line.substring(valueStart);
    }

    private void cleanDestination() throws IOException {
        if (Files.exists(Paths.get(destination))) {
            Files.walkFileTree(Paths.get(destination), new SimpleFileVisitor&amp;lt;Path&amp;gt;() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    Files.delete(file);
                    return FileVisitResult.CONTINUE;
                }

                @Override
                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                    Files.delete(dir);
                    return FileVisitResult.CONTINUE;
                }

            });
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la implementación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdWriter {

    public static final String TEMPLATE = &amp;quot;src/main/resources/template.md&amp;quot;;
    public static final String TITLE = &amp;quot;$title$&amp;quot;;
    public static final String DATE = &amp;quot;$date$&amp;quot;;
    public static final String TAGS = &amp;quot;$tags$&amp;quot;;
    public static final String CONTENT = &amp;quot;$content$&amp;quot;;
    public static final String POST_DATE_FORMAT = &amp;quot;yyyy-MM-dd&amp;quot;;
    public static final String POST_EXTENSION = &amp;quot;.md&amp;quot;;
    public static final String DATE_TITLE_SEPARATOR = &amp;quot;-&amp;quot;;

    private String template;

    private String destinationFolder;

    public MdWriter(String destinationFolder) {
        if (StringUtils.isEmpty(destinationFolder) || !isWritable(destinationFolder)) {
            throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
        } else {
            readTemplate();
            this.destinationFolder = destinationFolder;
        }
    }

    private void readTemplate() {
        try {
            template = new String(Files.readAllBytes(Paths.get(TEMPLATE)));
        } catch (IOException e) {
            throw new IllegalStateException(&amp;quot;Could not read post template template.md: &amp;quot; + e.getMessage());
        }
    }

    private boolean isWritable(String destination) {
        Path destinationPath = Paths.get(destination);
        if (Files.exists(destinationPath)) {
            return Files.isWritable(destinationPath);
        } else {
            return Files.isWritable(destinationPath.getParent());
        }
    }

    public File write(Post post) {
        validatePost(post);
        Path destinationPath = getDestinationPath(post);
        createDestinationPath(destinationPath);
        String postMarkdown = getPostMarkdown(post);
        try {
            Files.write(destinationPath, postMarkdown.getBytes()
                    , StandardOpenOption.CREATE_NEW);
        } catch (IOException e) {
            throw new IllegalStateException(&amp;quot;Error writing file &amp;quot; + destinationPath.toString() + &amp;quot;: &amp;quot; + e.getLocalizedMessage());
        }
        return destinationPath.toFile();
    }

    private void validatePost(Post post) {
        if (StringUtils.isEmpty(post.getTitle()) || post.getPublishingDate() == null || StringUtils.isEmpty(post.getContent())) {
            throw new IllegalArgumentException();
        }
    }

    private String getPostMarkdown(Post post) {
        String postMarkdown = template.replace(TITLE, post.getTitle());
        postMarkdown = postMarkdown.replace(DATE, getPostDate(post.getPublishingDate()));
        postMarkdown = postMarkdown.replace(TAGS, post.getTags().stream().map(Object::toString).collect(Collectors.joining(&amp;quot;,&amp;quot;)));
        postMarkdown = postMarkdown.replace(CONTENT, post.getContent());
        return postMarkdown;
    }

    private String getPostDate(Date publishingDate) {
        DateFormat formatter = new SimpleDateFormat(POST_DATE_FORMAT);
        return formatter.format(publishingDate);
    }

    private void createDestinationPath(Path destinationPath) {
        try {
            if (!Files.exists(destinationPath.getParent())) {
                Files.createDirectories(destinationPath.getParent());
            }
        } catch (IOException e) {
            throw new IllegalStateException(&amp;quot;Error creating destination path &amp;quot; + destinationPath + &amp;quot;: &amp;quot; + e.getMessage());
        }
    }

    private Path getDestinationPath(Post post) {
        Calendar publishedCalendar = getPublishedCalendar(post);
        Path destinationPath = Paths.get(destinationFolder, Integer.toString(publishedCalendar.get(Calendar.YEAR)),
                Integer.toString(publishedCalendar.get(Calendar.MONTH)), Integer.toString(publishedCalendar.get(Calendar.DAY_OF_MONTH)) +
                        DATE_TITLE_SEPARATOR + post.getTitle() + POST_EXTENSION);
        return destinationPath;
    }

    private Calendar getPublishedCalendar(Post post) {
        Calendar publishedCalendar = Calendar.getInstance();
        publishedCalendar.setTime(post.getPublishingDate());
        return publishedCalendar;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bueno, pues ya esta, ya solo faltarían las pruebas de &lt;em&gt;Wp2JBake&lt;/em&gt; como tales, es decir, la integración. Todavía no he tocado nada de etiquetas especiales, ni he considerado el hecho de que se exportan posts que se consideran borradores (aquellos que tienen de fecha de publicación el 1AC), pero eso me debe dar la cara en las pruebas de integración.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Spring Boot Developer Tools e Intellij IDEA</title>
      <link>http://www.aguasnegras.es/blog/2016/05/30-springdevtoolsintellij.html</link>
      <pubDate>lun., 30 may. 2016 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2016/05/30-springdevtoolsintellij.html</guid>
      	<description>
	&lt;p&gt;Una de las mejores incorporaciones que tuvo Spring Boot en la versión 1.3 fueron las &lt;a href=&quot;https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3&quot;&gt;Developer Tools&lt;/a&gt;.&lt;br /&gt;
De entre toda la funcionalidad, lo que me parece mas útil es sin lugar a dudas el automatic restart, que relanza la aplicación en cuanto detecta cambios en un&lt;br /&gt;
fichero que esta en el classpath y el LiveReload, que en conjunción con un plugin de Chrome detecta cuando ha habido cambios en la aplicación (como un reinicio)&lt;br /&gt;
y refresca automáticamente la página.&lt;/p&gt;
&lt;p&gt;Juntando estas dos cosas, y dejando de lado el consumo de recursos, codificar en Java se convierte prácticamente en lo mismo que trabajar con un lenguaje de scripting&lt;br /&gt;
como PHP.&lt;/p&gt;
&lt;p&gt;Sin embargo, el soporte de los developers tools no es automático del todo en Intellij IDEA, el IDE que más suelo utilizar en casa, para ello hay que &lt;a href=&quot;https://patrickgrimard.io/2016/01/18/spring-boot-devtools-first-look/&quot;&gt;habilitar&lt;br /&gt;
dos opciones&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;En Settings (ctrl-alt-s) &amp;gt; Build, Execution, Deployment &amp;gt; Compiler hay que marcar &amp;quot;Make project automatically&amp;quot;&lt;/li&gt;
&lt;li&gt;En el registro que se puede acceder mediante ctrl-shift-a y buscando &amp;quot;Registry&amp;quot; hay que habilitar la clave compiler.automake.allow.when.app.running para que el&lt;br /&gt;
automake funcione también mientras la aplicación esta arrancada.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Con ésto, y si tenemos un equipo suficientemente potente (aunque mi portátil tiene ya 5 años lo mueve bastante bien), cualquier cambio en nuestras clases se cargará&lt;br /&gt;
automáticamente al reiniciar la aplicación. Eso sí, dado que Intellij IDEA guarda automáticamente los archivos cuando detecta cambios, esto puede dar lugar a algunos&lt;br /&gt;
errores o reinicios en falso (por ejemplo, cuando estamos escribiendo un método y nos vamos a StackOverflow a resolver alguna duda). Para eso se pueden ajustar las&lt;br /&gt;
opciones de autosave tal y como se explica en la misma &lt;a href=&quot;https://www.jetbrains.com/help/idea/2016.1/saving-and-reverting-changes.html&quot;&gt;documentación del IDE&lt;/a&gt;.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Wordpress to JBake - Parseo</title>
      <link>http://www.aguasnegras.es/blog/2016/03/20-wp2jbake-parseo.html</link>
      <pubDate>dom., 20 mar. 2016 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2016/03/20-wp2jbake-parseo.html</guid>
      	<description>
	&lt;p&gt;Pues ahora que ya tengo el constructor y construyo un objeto siempre que, al menos es coherente, toca parsear el xml para extraer los datos.&lt;br /&gt;
En Java, esencialmente hay tres formas de parsear xml, todas dentro de lo que se denomina Java XML Processing API, &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/jaxp/index.html&quot;&gt;JAXP&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/jaxp/sax/index.html&quot;&gt;SAX&lt;/a&gt;: La API originaria, orientada a eventos. Muy rápida, muy eficiente y muy farragosa. Técnicamente es una API de streaming mediante push, es decir, nosotros arrancamos el procesamiento del documento y la API empieza a funcionar mandándonos eventos conforme va encontrando elementos.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/jaxp/dom/index.html&quot;&gt;DOM&lt;/a&gt;: La API orientada a objetos, representa el XML como un árbol en memoria. Muy fácil de acceder, muy tragón de recursos. Técnicamente, se representa el árbol del DOM en memoria y listo, se puede acceder libremente, por ejemplo usando XPath.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/jaxp/stax/index.html&quot;&gt;StAX&lt;/a&gt;: A partir del JDK 1.5 se encuentra disponible esta API que es un modelo mixto, se basa en un modelo de streaming (parecido a SAX) pero más sencillo de utilizar y además permite escribir. Técnicamente se define como una API de streming mediante pull, es decir, que somos nosotros los que vamos indicanto los elementos que queremos acceder. Eso sí, al ser de streaming solo permite avanzar en el documento, es decir, no podemos ignorar el elemento 1, tratar el 2 y en función de este retroceder a tratar el 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En mi caso en particular, y dado que el modelo de &amp;quot;ir hacia delante&amp;quot; se adapta perfectamente al caso de uso (ya que simplemente estoy emparejando), pero tampoco necesito tantísima eficiencia ni tengo ganas de fastidiarme la vida, voy a utilizar StAX.&lt;/p&gt;
&lt;p&gt;Pero lo primero, ahora que tengo que trabajar &amp;quot;en serio&amp;quot; es utilizar datos de verdad para las pruebas. Para eso hay dos opciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Guardo un XML de pruebas en forma de un String en un archivo .java y lo leo de ahí.&lt;/li&gt;
&lt;li&gt;Guardo un archivo XML como tal.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Pues como que la primera opción es una tontería, he optado por la segunda. He sacado la exportación de datos que proporciona Wordpress y he dejado unos cuantos posts que sean más o menos representativos y listo. Lo guardo en &lt;em&gt;src/resources/wp-source.xml&lt;/em&gt;. Antes de seguir, ya no tiene sentido que los tests sigan usando el &lt;em&gt;pom.xml&lt;/em&gt; para las pruebas, así que lo cambio y lo lanzo. Todo en verde, como cabía esperar.&lt;/p&gt;
&lt;p&gt;Ahora bien, ya tengo mi objeto de la clase Wp2JBake creado con el origen y el destino debidamente especificado, ¿como arranco el procesamiento? Hay que tener en cuenta que realmente el método de proceso no tiene por qué devolver nada, ya que el resultado efectivo de la salida es una estructura de archivos con el resultado de la conversión.&lt;br /&gt;
Sin embargo, creo que es &amp;quot;gratis&amp;quot; devolver los elementos que se han generado y así se posibilita poder comprobar el resultado de la generación.&lt;/p&gt;
&lt;p&gt;Así que primero el test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void processEmptyXML() {
    sut = new Wp2JBake(&amp;quot;src/test/resources/empty.xml&amp;quot;, &amp;quot;src/test/destination&amp;quot;);
    Set&amp;lt;File&amp;gt; markdowns = sut.generateJBakeMarkdown();
    assertThat(markdowns, is(empty()));
    File destination = new File(&amp;quot;destination&amp;quot;);
    destination.delete();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviamente, esta en rojo, allá va la implementación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
    return new HashSet&amp;lt;File&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y aquí, ya voy devolviendo un Set (porque todos los elementos serán distintos, cada archivo representa un post y cada post es único) y uso uno no ordenado, porque en realidad me dá igual el orden de iteración, ya que &lt;a href=&quot;../02/04-wp2jbake.html&quot;&gt;como decidí&lt;/a&gt; los archivos vendrán ordenados por su ruta, es decir, si existen, por definición estan ordenados.&lt;/p&gt;
&lt;p&gt;Vale, y ahora, test de verdad:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void processXML() {
    sut = new Wp2JBake(&amp;quot;src/test/resources/wp-source.xml&amp;quot;, &amp;quot;src/test/destination&amp;quot;);
    Set&amp;lt;File&amp;gt; markdowns = sut.generateJBakeMarkdown();
    assertThat(markdowns, is(not(empty())));
    for (File markdown: markdowns) {
        assertThat(markdown.exists(), is(true));
    }
    File destination = new File(&amp;quot;destination&amp;quot;);
    destination.delete();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora tengo que modificar el método &lt;em&gt;generateJBakeMarkdown&lt;/em&gt; para que genere los archivos Markdown. En un principio hay dos formas de hacer ésto:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parseo el XML, genero una estructura de datos en memoria (una representación de los posts, vaya) y después la recorro y la paso a los archivos markdown. Desventaja, que para eso para qué demonios uso StAX y el streaming, si voy a comer memoria uso DOM y listo.&lt;/li&gt;
&lt;li&gt;Parseo el XML y cada vez que se detecte un item (un post) lo voy escribiendo dinámicamente. Creo que esta opción es más complicada, pero más ligera.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vamos a por 2, para ello leeré el XML y lo volcaré... pero un momento, una cosa es saber leer el XML y otra escribir el Markdown, es decir, que mi clase lectora (&lt;em&gt;Wp2JBake&lt;/em&gt;) a su vez debe comunicarse (usar) otra para escribir (&lt;em&gt;MdWriter&lt;/em&gt;).&lt;br /&gt;
Pensando un poco más sobre esta clase &lt;em&gt;MdWriter&lt;/em&gt;... debería recibir como parámetro en su constructor el destino de las escrituras y eso me lleva a pensar, que realmente es a ella a la que le corresponde comprobar si es un destino legal, es decir, que el constructor de &lt;em&gt;Wp2JBake&lt;/em&gt; ahora quedaría así (también he aprovechado y &lt;em&gt;origin&lt;/em&gt; lo he guardado en un atributo de la clase):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Wp2JBake(String origin, String destination) {
    if (StringUtils.isEmpty(origin) || !existsOrigin(origin)) {
        throw new IllegalArgumentException(&amp;quot;Origin is not a valid file&amp;quot;);
    } else {
        this.origin = origin;
    }
    this.mdWriter = new MdWriter(destination);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mientras que &lt;em&gt;MdWriter&lt;/em&gt; sería así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MdWriter {

    private File destinationFolder;

    public MdWriter(String destination) {
        if (StringUtils.isEmpty(destination) || !isWritable(destination)) {
            throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
        } else {
            destinationFolder = new File(destination);
        }
    }

    private boolean isWritable(String destination) {
        File destinationFolder = new File(destination);
        if (destinationFolder.exists()) {
            return destinationFolder.canWrite();
        } else {
            return isWritableDestinationParent(destinationFolder);
        }
    }

    private boolean isWritableDestinationParent(File destinationFolder) {
        File destinationParent = getDestinationParent(destinationFolder);
        return destinationParent.canWrite();
    }

    private File getDestinationParent(File destinationFolder) {
        String parentPath = destinationFolder.getParent();
        if (parentPath == null) {
            parentPath = &amp;quot;&amp;quot;;
        }
        return new File(parentPath);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por cierto que la teoría TDDista dice que esto no debería hacerse, que primero hay que pasar el test y después ponerse a refactorizar y tal... Hombre, yo eso no lo comparto tanto, creo que esta bien ir pensando un poco las cosas. Además, como ya tengo hechos los tests, los puedo volver a ejecutar para ver que no me he cargado nada.&lt;br /&gt;
Que hablando de las pruebas, ahora tengo que crear las pruebas propias de esta nueva clase y llevarme todas las encargadas de testear la corrección del directorio destino a esa clase. Al separarlo además ya no tengo que diferenciar entre los tipos de excepción (era muy cantoso que estaba pasando del Single Responsability) y el código queda mucho más limpio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class Wp2JBakeTests {

    private Wp2JBake sut;

    @Test(expected = IllegalArgumentException.class)
    public void buildWithoutParameters() {
        sut = new Wp2JBake(null, null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void buildWithoutOrigin() {
        sut = new Wp2JBake(null, &amp;quot;foo&amp;quot;);

    }

    @Test(expected = IllegalArgumentException.class)
    public void buildWithEmptyOrigin() {
        sut = new Wp2JBake(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);
    }

    @Test(expected = IllegalArgumentException.class)
    public void buildWithInvalidOrigin() {
        sut = new Wp2JBake(&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;);
    }

    @Test
    public void buildWithValidParameters() {
        sut = new Wp2JBake(&amp;quot;src/test/resources/wp-source.xml&amp;quot;, &amp;quot;src/test/destination&amp;quot;);
    }

    @Test
    public void processEmptyXML() {
        sut = new Wp2JBake(&amp;quot;src/test/resources/empty.xml&amp;quot;, &amp;quot;src/test/destination&amp;quot;);
        Set&amp;lt;File&amp;gt; markdowns = sut.generateJBakeMarkdown();
        assertThat(markdowns, is(empty()));
    }

    @Test
    public void processXML() {
        sut = new Wp2JBake(&amp;quot;src/test/resources/wp-source.xml&amp;quot;, &amp;quot;src/test/destination&amp;quot;);
        Set&amp;lt;File&amp;gt; markdowns = sut.generateJBakeMarkdown();
        assertThat(markdowns, is(not(empty())));
        for (File markdown: markdowns) {
            assertThat(markdown.exists(), is(true));
        }
        File destination = new File(&amp;quot;destination&amp;quot;);
        destination.delete();
    }
}

public class MdWriterTest {

    private MdWriter sut;

    @Test(expected = IllegalArgumentException.class)
    public void writerWithoutDestination() {
        sut = new MdWriter(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithEmptyDestination() {
        sut = new MdWriter(&amp;quot;&amp;quot;);
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithNonWritableDestination() {
        File destination = new File(&amp;quot;destination&amp;quot;);
        destination.mkdir();
        destination.deleteOnExit();
        destination.setReadOnly();
        sut = new MdWriter(destination.getAbsolutePath());
    }

    @Test(expected = IllegalArgumentException.class)
    public void writerWithNonWritableDestinationParent() {
        File destinationParent = new File(&amp;quot;destinationParent&amp;quot;);
        destinationParent.mkdir();
        destinationParent.deleteOnExit();
        destinationParent.setReadOnly();
        sut = new MdWriter(destinationParent.getAbsolutePath() + File.separator + &amp;quot;destination&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bueno, pues ahora tengo que leer el XML e ir cargando los Strings que el escritor se encargará de volcar a disco... muy bien. Lo primer es crear la factoría de eventos. Por cierto, menuda bazofia el tutorial oficial de Oracle, menos mal que &lt;a href=&quot;http://www.vogella.com/tutorials/JavaXML/article.html&quot;&gt;Lars Vogel&lt;/a&gt;  tiene un grandísimo tutorial (danke schön Lars!):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
        XMLEventReader eventReader = getEventReader();
        return new HashSet&amp;lt;File&amp;gt;();
    }

    private XMLEventReader getEventReader() {
        XMLInputFactory inputFactory = XMLInputFactory.newInstance();
        InputStream in = null;
        XMLEventReader eventReader = null;
        try {
            in = new FileInputStream(origin);
            eventReader = inputFactory.createXMLEventReader(in);
        } catch (FileNotFoundException e) {
            throw new IllegalStateException(&amp;quot;Could not find origin file: &amp;quot; + e.getMessage());
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Could not read origin file: &amp;quot; + e.getMessage());
        }
        return eventReader;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;He optado por lanzar un IllegalStateException si ocurre alguna de las excepciones, ya que eso no debería ocurrir y a lo que lleva es exactamente a eso, un estado ilegal del programa :)&lt;br /&gt;
Hmmm... por otra parte, tengo la prueba con el XML vacío, pero ahora que lo pienso ¡¡¡no tengo ninguna con un XML inválido!!! Me creo un XML &lt;em&gt;invalid.xml&lt;/em&gt; que contiene solo la cabecera con un número de versión que no existe:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;&amp;lt;?xml version=&amp;quot;-1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y su test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test(expected = IllegalStateException.class)
public void processInvalidXML() {
    sut = new Wp2JBake(&amp;quot;src/test/resources/invalid.xml&amp;quot;, &amp;quot;src/test/destination&amp;quot;);
    Set&amp;lt;File&amp;gt; markdowns = sut.generateJBakeMarkdown();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Me esta empezando a parecer que la lectura también debería ir en otra clase y &lt;em&gt;Wp2JBake&lt;/em&gt; tan solo orquestrar la lectura con la escritura... pero bueno, ya iremos viendo de momento sigo, así. Toca tratar los eventos. El tutorial hace un típico bucle while con el eventReader que implementa &lt;em&gt;Iterator&lt;/em&gt;, pero claro, el tutorial es antiguo, al fin y al cabo y pensándolo bien... yo lo que quiero hacer es un filter y un collect, es decir, que puedo usar la API de Streams de Java 8. La única historia es convertir el &lt;em&gt;XMLEventReader&lt;/em&gt; a un &lt;em&gt;Stream&lt;XMLEvent&gt;&lt;/em&gt;, pero eso es relativamente fácil:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
    XMLEventReader eventReader = getEventReader();
    Iterable&amp;lt;XMLEvent&amp;gt; eventsIterable = () -&amp;gt; eventReader;
    Stream&amp;lt;XMLEvent&amp;gt; xmlEvents = StreamSupport.stream(eventsIterable.spliterator(), false);
    return new HashSet&amp;lt;File&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bueno, pues después de echar hora y pico probando con filter, map, flatmap etc, hay un problema, y es que StAX entiende todo el documento secuencialmente, con lo cual no puedo hacer un filter y quedarme solo con los elemntos de tipo &lt;em&gt;item&lt;/em&gt; y después acceder a los elementos que contienen estos, porque un elemento esta suelto, así que nada, toca iteradores y bucles for de toda la vida. Para que sea más entendible (y orientado a objetos), me voy a crear una clase &lt;em&gt;Post&lt;/em&gt; para ir guardando los resultados y después volcarlos al archivo pertinente.&lt;br /&gt;
Esta clase la monto con una API fluida para que la construcción me sea más sencilla y los correspondientes getters:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class Post {
    private String title;

    private LocalDate publishingDate;

    private Set&amp;lt;String&amp;gt; tags = new TreeSet&amp;lt;&amp;gt;();

    private String content;

    public Post () {

    }

    public Post withTitle(String title) {
        this.title = title;
        return this;
    }

    public Post withPublishingDate(LocalDate publishingDate) {
        this.publishingDate = publishingDate;
        return this;
    }

    public Post withTag(String tag) {
        this.tags.add(tag);
        return this;
    }

    public Post withContent(String content) {
        this.content = content;
        return this;
    }

    public String getTitle() {
        return title;
    }

    public LocalDate getPublishingDate() {
        return publishingDate;
    }

    public Set&amp;lt;String&amp;gt; getTags() {
        return tags;
    }

    public String getContent() {
        return content;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En fín, ya han pasado como tres horas y el test sigue sin funcionar... me deprimo...&lt;br /&gt;
Sigo con el for, la estrategia es muy sencilla, si detecto un elemento &lt;em&gt;item&lt;/em&gt;, creo un nuevo &lt;em&gt;Post&lt;/em&gt; y conforme vaya detectando los elementos &lt;em&gt;title&lt;/em&gt;, &lt;em&gt;pubDate&lt;/em&gt;, &lt;em&gt;category&lt;/em&gt; y &lt;em&gt;content&lt;/em&gt; voy invocando a los métodos &lt;em&gt;with*&lt;/em&gt; del &lt;em&gt;Post&lt;/em&gt;. En el momento que detecte el cierre del &lt;em&gt;item&lt;/em&gt;, escribo a disco:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
    XMLEventReader eventReader = getEventReader();
    Iterable&amp;lt;XMLEvent&amp;gt; eventsIterable = () -&amp;gt; eventReader;
    Stream&amp;lt;XMLEvent&amp;gt; xmlEvents = StreamSupport.stream(eventsIterable.spliterator(), false);
    return new HashSet&amp;lt;File&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desafortunadamente, el tema es más complejo de lo que parecía. Dado que StAX solo lee en un sentido (palante), de poco me sirve la API de streams de Java 8, ya que tengo que ir tomando decisiones en función del elemento que llegue, por ejemplo, un elemento &lt;em&gt;title&lt;/em&gt; se debe ignorar salvo que previamente se haya recibido un &lt;em&gt;item&lt;/em&gt;.&lt;br /&gt;
No digo que no sea posible hacerlo con streams, solo que después de muchos relíos es más sencillo hacerlo con dos while:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El primer while que itera sobre todos los elementos proporcionados por StAX.&lt;/li&gt;
&lt;li&gt;El segundo while empieza cuando se detecta un &lt;em&gt;item&lt;/em&gt; y termina cuando se cierra el &lt;em&gt;item&lt;/em&gt;, leyendo por tanto un post completo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Con esto en mente es bastante fácil:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
        HashSet&amp;lt;File&amp;gt; exportResult = new HashSet&amp;lt;&amp;gt;();
        XMLEventReader eventReader = getEventReader();
        try {
            exportPosts(exportResult, eventReader);
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Error reading XML &amp;quot; + origin + &amp;quot;: &amp;quot; + e.getMessage());
        }
        return exportResult;
    }

    private void exportPosts(HashSet&amp;lt;File&amp;gt; exportResult, XMLEventReader eventReader) throws XMLStreamException {
        Post post = null;
        while (eventReader.hasNext()) {
                XMLEvent event = eventReader.nextEvent();
                if (isPostStart(event)) {
                    post = exportPost(exportResult, eventReader, post);
                }
        }
    }

    private Post exportPost(HashSet&amp;lt;File&amp;gt; exportResult, XMLEventReader eventReader, Post post) throws XMLStreamException {
        if (post != null) {
            exportResult.add(mdWriter.write(post));
        }
        post = readPost(eventReader);
        return post;
    }

    private Post readPost(XMLEventReader eventReader) throws XMLStreamException {
        Post exportedPost = new Post();
        boolean postRead = false;
            while (!postRead &amp;amp;&amp;amp; eventReader.hasNext()) {
                XMLEvent event = eventReader.nextEvent();
                if (event.isStartElement()) {
                    exportedPost = loadPostFromEvent(event, eventReader, exportedPost);
                } else if (isPostEnd(event)) {
                    postRead = true;
                }
            }
        return exportedPost;
    }

    private boolean isPostEnd(XMLEvent event) {
        return event.isEndElement() &amp;amp;&amp;amp; &amp;quot;item&amp;quot;.equals(event.asEndElement().getName().getPrefix() + event.asEndElement().getName().getLocalPart());
    }

    private boolean isPostStart(XMLEvent event) {
        return event.isStartElement() &amp;amp;&amp;amp; &amp;quot;item&amp;quot;.equals(getEventFullName(event));
    }

    private Post loadPostFromEvent(XMLEvent event, XMLEventReader eventReader, Post post) {
        String name = getEventFullName(event);
        try {
            switch (name) {
                case &amp;quot;title&amp;quot;:
                    post = loadTitle(eventReader, post);
                    break;
                case &amp;quot;pubDate&amp;quot;:
                    post = loadPublishingDate(eventReader, post);
                    break;
                case &amp;quot;category&amp;quot;:
                    if (isTag(event)) {
                        post = loadCategory(eventReader, event, post);
                    }
                    break;
                case &amp;quot;contentencoded&amp;quot;:
                    post = loadContent(eventReader, post);
                    break;
                default:
                    break;
            }
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Error parsing &amp;quot; + name + &amp;quot;: &amp;quot; + e.getMessage());
        }
        return post;
    }

    private Post loadContent(XMLEventReader eventReader, Post post) throws XMLStreamException {
            return post.withContent(eventReader.nextEvent().asCharacters().getData());
    }

    private Post loadCategory(XMLEventReader eventReader, XMLEvent event, Post post) throws XMLStreamException {
            return post.withTag(eventReader.nextEvent().asCharacters().getData());
    }

    private Post loadPublishingDate(XMLEventReader eventReader, Post post) throws XMLStreamException {
            return post.withPublishingDate(parsePubDate(eventReader));
    }

    private Post loadTitle(XMLEventReader eventReader, Post post) throws XMLStreamException {
            return post.withTitle(eventReader.nextEvent().asCharacters().getData());
    }

    private String getEventFullName(XMLEvent event) {
        return event.asStartElement().getName().getPrefix() + event.asStartElement().getName().getLocalPart();
    }

    private boolean isTag(XMLEvent event) {
        return &amp;quot;post_tag&amp;quot;.equals(event.asStartElement().getAttributeByName(new QName(&amp;quot;domain&amp;quot;)).getValue());
    }


    private Date parsePubDate(XMLEventReader eventReader) throws XMLStreamException {
        Date publishingDate = null;
        try {
            String pubDate = eventReader.nextEvent().asCharacters().getData();
            pubDate = extractDate(pubDate);
            SimpleDateFormat format = new SimpleDateFormat(&amp;quot;dd MMM yyyy&amp;quot;);
            publishingDate = format.parse(pubDate);
        } catch (ParseException e) {
            throw new IllegalStateException(&amp;quot;Could not parse pubDate: &amp;quot; + e.getMessage());
        }
        return publishingDate;
    }

    private String extractDate(String pubDate) {
        //Date is supplied as this: Wed, 30 Nov -0001 00:00:00 +0000, we need to extract just the date
        pubDate = pubDate.substring(pubDate.indexOf(&amp;quot;,&amp;quot;)+2);
        int hourIndex = pubDate.indexOf(&amp;quot;:&amp;quot;)-3;
        pubDate = pubDate.substring(0, hourIndex);
        return pubDate;
    }

    private XMLEventReader getEventReader() {
        XMLInputFactory inputFactory = XMLInputFactory.newInstance();
        InputStream in = null;
        XMLEventReader eventReader = null;
        try {
            in = new FileInputStream(origin);
            eventReader = inputFactory.createXMLEventReader(in);
        } catch (FileNotFoundException e) {
            throw new IllegalStateException(&amp;quot;Could not find origin file: &amp;quot; + e.getMessage());
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Could not read origin file: &amp;quot; + e.getMessage());
        }
        return eventReader;
    }

    private boolean existsOrigin(String origin) {
        File originFile = new File(origin);
        String path = originFile.getAbsolutePath();
        return originFile.exists();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo del parseo de la fecha ha sido un espectáculo... no he sido capaz de sacarlo con el DateFormatter para convertirlo a un LocalDate.&lt;br /&gt;
Bueno, pues ahora que lo tengo... ¿no tendría más sentido que todo eso fuera a una clase propia? Digamos WpReader. Pues sí, porque ahora mismo mi clase principal se esta responsabilizando de saber como se leen los posts y qué hacer con los posts leidos, así que es mucho más claro hacerlo con una colaboradora.&lt;br /&gt;
Pero claro, si me llevo la lógica aparte, ¿cómo aviso de que se puede escribir un nuevo post sin romper el while que itera sobre todos los elementos del XML?&lt;br /&gt;
Bueno, pues finamente diría que voy a usar un patrón observador, para notificar de cuando hay un nuevo post. Técnicamente lo que voy a hacer es implementar un callback y así &lt;em&gt;Wp2JBake&lt;/em&gt; queda mucho más clara:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class Wp2JBake {

    private WpReader wpReader;

    private MdWriter mdWriter;

    private HashSet&amp;lt;File&amp;gt; exportResult;

    public Wp2JBake(String origin, String destination) {
        this.wpReader = new WpReader(origin);
        this.mdWriter = new MdWriter(destination);
    }

    public Set&amp;lt;File&amp;gt; generateJBakeMarkdown() {
        exportResult = new HashSet&amp;lt;&amp;gt;();
        wpReader.readPosts(this);
        return exportResult;
    }

    public void postRead(Post post) {
        exportResult.add(mdWriter.write(post));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y por otro lado tenemos &lt;em&gt;WpReader&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class WpReader {

    public static final String ITEM = &amp;quot;item&amp;quot;;
    public static final String TITLE = &amp;quot;title&amp;quot;;
    public static final String PUB_DATE = &amp;quot;pubDate&amp;quot;;
    public static final String CATEGORY = &amp;quot;category&amp;quot;;
    public static final String CONTENT = &amp;quot;contentencoded&amp;quot;;
    public static final String POST_TAG = &amp;quot;post_tag&amp;quot;;
    public static final String DOMAIN = &amp;quot;domain&amp;quot;;
    private String origin;

    public WpReader(String origin) {
        if (StringUtils.isEmpty(origin) || !existsOrigin(origin)) {
            throw new IllegalArgumentException(&amp;quot;Origin is not a valid file&amp;quot;);
        } else {
            this.origin = origin;
        }
    }

    private boolean existsOrigin(String origin) {
        File originFile = new File(origin);
        return originFile.exists();
    }

    public void readPosts(Wp2JBake wp2JBake) {
        XMLEventReader eventReader = getEventReader();
        try {
            readXML(wp2JBake, eventReader);
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Error reading XML &amp;quot; + origin + &amp;quot;: &amp;quot; + e.getMessage());
        }
    }

    private void readXML(Wp2JBake wp2JBake, XMLEventReader eventReader) throws XMLStreamException {
        while (eventReader.hasNext()) {
            readElement(wp2JBake, eventReader);
        }
    }

    private void readElement(Wp2JBake wp2JBake, XMLEventReader eventReader) throws XMLStreamException {
        XMLEvent event = eventReader.nextEvent();
        if (isPostStart(event)) {
            Post post = readPost(eventReader);
            wp2JBake.postRead(post);
        }
    }

    private Post readPost(XMLEventReader eventReader) throws XMLStreamException {
        Post exportedPost = new Post();
        boolean postRead = false;
        while (!postRead &amp;amp;&amp;amp; eventReader.hasNext()) {
            XMLEvent event = eventReader.nextEvent();
            if (event.isStartElement()) {
                exportedPost = loadAttribute(event, eventReader, exportedPost);
            } else if (isPostEnd(event)) {
                postRead = true;
            }
        }
        return exportedPost;
    }

    private boolean isPostEnd(XMLEvent event) {
        return event.isEndElement() &amp;amp;&amp;amp; ITEM.equals(event.asEndElement().getName().getPrefix() + event.asEndElement().getName().getLocalPart());
    }

    private Post loadAttribute(XMLEvent event, XMLEventReader eventReader, Post post) {
        String name = getEventFullName(event);
        try {
            post = loadAttribute(event, eventReader, post, name);
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Error parsing &amp;quot; + name + &amp;quot;: &amp;quot; + e.getMessage());
        }
        return post;
    }

    private Post loadAttribute(XMLEvent event, XMLEventReader eventReader, Post post, String name) throws XMLStreamException {
        switch (name) {
            case TITLE:
                post = loadTitle(eventReader, post);
                break;
            case PUB_DATE:
                post = loadPublishingDate(eventReader, post);
                break;
            case CATEGORY:
                if (isTag(event)) {
                    post = loadCategory(eventReader, post);
                }
                break;
            case CONTENT:
                post = loadContent(eventReader, post);
                break;
            default:
                break;
        }
        return post;
    }

    private Post loadContent(XMLEventReader eventReader, Post post) throws XMLStreamException {
        return post.withContent(eventReader.nextEvent().asCharacters().getData());
    }

    private Post loadCategory(XMLEventReader eventReader, Post post) throws XMLStreamException {
        return post.withTag(eventReader.nextEvent().asCharacters().getData());
    }

    private Post loadPublishingDate(XMLEventReader eventReader, Post post) throws XMLStreamException {
        return post.withPublishingDate(parsePubDate(eventReader));
    }

    private Post loadTitle(XMLEventReader eventReader, Post post) throws XMLStreamException {
        return post.withTitle(eventReader.nextEvent().asCharacters().getData());
    }

    private boolean isTag(XMLEvent event) {
        return POST_TAG.equals(event.asStartElement().getAttributeByName(new QName(DOMAIN)).getValue());
    }


    private Date parsePubDate(XMLEventReader eventReader) throws XMLStreamException {
        Date publishingDate = null;
        try {
            String pubDate = eventReader.nextEvent().asCharacters().getData();
            pubDate = extractDate(pubDate);
            SimpleDateFormat format = new SimpleDateFormat(&amp;quot;dd MMM yyyy&amp;quot;);
            publishingDate = format.parse(pubDate);
        } catch (ParseException e) {
            throw new IllegalStateException(&amp;quot;Could not parse pubDate: &amp;quot; + e.getMessage());
        }
        return publishingDate;
    }

    private String extractDate(String pubDate) {
        //Date is supplied as this: Wed, 30 Nov -0001 00:00:00 +0000 (RFC822 presumably), we need to extract just the date
        pubDate = pubDate.substring(pubDate.indexOf(&amp;quot;,&amp;quot;)+2);
        int hourIndex = pubDate.indexOf(&amp;quot;:&amp;quot;)-3;
        pubDate = pubDate.substring(0, hourIndex);
        return pubDate;
    }

    private boolean isPostStart(XMLEvent event) {
        return event.isStartElement() &amp;amp;&amp;amp; ITEM.equals(getEventFullName(event));
    }

    private String getEventFullName(XMLEvent event) {
        return event.asStartElement().getName().getPrefix() + event.asStartElement().getName().getLocalPart();
    }

    private XMLEventReader getEventReader() {
        XMLInputFactory inputFactory = XMLInputFactory.newInstance();
        InputStream in = null;
        XMLEventReader eventReader = null;
        try {
            in = new FileInputStream(origin);
            eventReader = inputFactory.createXMLEventReader(in);
        } catch (FileNotFoundException e) {
            throw new IllegalStateException(&amp;quot;Could not find origin file: &amp;quot; + e.getMessage());
        } catch (XMLStreamException e) {
            throw new IllegalStateException(&amp;quot;Could not read origin file: &amp;quot; + e.getMessage());
        }
        return eventReader;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pues para terminar con esta sección que se ha alargado más de lo que esperaba, me queda modificar los tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@RunWith(MockitoJUnitRunner.class)
public class WpReaderTest {

    private WpReader sut;

    @Mock
    private Wp2JBake observer;

    @Test(expected = IllegalArgumentException.class)
    public void readerWithoutOrigin() {
        sut = new WpReader(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void readerWithEmptyOrigin() {
        sut = new WpReader(&amp;quot;&amp;quot;);
    }

    @Test(expected = IllegalArgumentException.class)
    public void buildWithInvalidOrigin() {
        sut = new WpReader(&amp;quot;foo&amp;quot;);
    }

    @Test(expected = IllegalStateException.class)
    public void readEmptyXML() {
        sut = new WpReader(&amp;quot;src/test/resources/empty.xml&amp;quot;);
        sut.readPosts(observer);
    }

    @Test(expected = IllegalStateException.class)
    public void readInvalidXML() {
        sut = new WpReader(&amp;quot;src/test/resources/invalid.xml&amp;quot;);
        sut.readPosts(observer);
    }

    @Test
    public void readValidXML() {
        sut = new WpReader(&amp;quot;src/test/resources/wp-source.xml&amp;quot;);
        ArgumentCaptor&amp;lt;Post&amp;gt; postCapturer = ArgumentCaptor.forClass(Post.class);
        sut.readPosts(observer);
        verify(observer, times(7)).postRead(postCapturer.capture());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto ya ha quedado perfecto, si no tanto el software, si los tests. Cada clase tiene una responsabilidad bien definida y así se refleja en los tests. Eso sí, en esta última clase he tenido que meter Mockito para simular el &lt;em&gt;Wp2JBake&lt;/em&gt; que me hace falta para el callback. Lo bueno de esto es que con Mockito puedo verificar las llamadas a los métodos y por primera vez tengo todos los tests en verde.&lt;br /&gt;
Eso sí, los tests de &lt;em&gt;Wp2JBake&lt;/em&gt; se han quedado en realidad como pruebas de integración, así que no me preocupa que el test original siga en rojo porque realmente hasta que no este implementada la escritura no debería pasar a verde :).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Wordpress to JBake - Inicio</title>
      <link>http://www.aguasnegras.es/blog/2016/02/04-wp2jbake-inicio.html</link>
      <pubDate>jue., 4 feb. 2016 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2016/02/04-wp2jbake-inicio.html</guid>
      	<description>
	&lt;p&gt;En la migración del blog a GitHub Pages uno de los objetivos era no perder contenido, por lo que una vez puesta en pie toda la infraestructura, toca migrar los posts (mucho me temo que los comentarios si se van a perder...). Solución: Hacer un pequeño programa en Java (casi que diría script) que realice automáticamente esta conversión, además voy a seguir TDD para &amp;quot;mantenerme en forma&amp;quot;.&lt;br /&gt;
En un principio lo voy a plantear como una mera conversión de formatos, como formato inicial tengo el que devuelve Wordpress para la exportación: &lt;a href=&quot;http://devtidbits.com/2011/03/16/the-wordpress-extended-rss-wxr-exportimport-xml-document-format-decoded-and-explained/&quot;&gt;Wordpress Extended RSS&lt;/a&gt; y como formato final quiero un archivo en el formato específico de JBake, que no deja de ser &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown&lt;/a&gt; con unas cabeceras (metadata) particulares:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;title: El título del post&lt;/li&gt;
&lt;li&gt;date: La fecha del post&lt;/li&gt;
&lt;li&gt;type: Será siempre post&lt;/li&gt;
&lt;li&gt;tags: Las etiquetas del post&lt;/li&gt;
&lt;li&gt;status: Será siempre published&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El WXR es un solo archivo con una serie de elementos item que corresponde cada uno a un post, un elemento item tiene los siguientes campos interesantes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;title: casa con la cabecera title que quiero&lt;/li&gt;
&lt;li&gt;pubdate: casa con la cabecera date&lt;/li&gt;
&lt;li&gt;category: Las categorías se dividen en dominios que puede ser category (bien Wordpress, bien) o post_tag, en concreto me interesan solo aquellas de tipo post_tag y su contenido, es decir tendré que concatener el contenido de todas las categorías de tipo post_tag.&lt;/li&gt;
&lt;li&gt;content: Este es el contenido el post en sí, como se puede ver viene en HTML tal cual dentro de un CDATA, esto me permite aprovechar que con Markdown puedo utilizar el HTML inline así que en un principio lo voy a volcar tal cual, aunque preveo ciertos problemas con las etiquetas de código...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por último, por cada item quiero generar un archivo con el nombre dd-title.md (donde dd es el día de la fecha) dentro de una carpeta mm (mes) dentro de una carpeta aaaa (año...).&lt;/p&gt;
&lt;p&gt;Pues con esto, empezamos!! Primero: crear el projecto en Intellij y con Maven, creo el repositorio en &lt;a href=&quot;https://github.com/agustinventura/wp2jbake&quot;&gt;GitHub&lt;/a&gt; y lo añado.&lt;br /&gt;
A continuación, actualizo el .gitignore, hago el commit inicial y cambio a la rama development.&lt;/p&gt;
&lt;p&gt;El comienzo es un no brainer, necesito un main que arranque la aplicación como tal y que recibirá como parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El nombre del archivo WXR&lt;/li&gt;
&lt;li&gt;El directorio de salida&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eso quiere decir que la clase de entrada a la aplicación (Wp2JBake) tendrá un constructor con dos parámetros, así que siguiendo TDD, empiezo con los tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Construir con los parámetros a null.&lt;/li&gt;
&lt;li&gt;Construir con el archivo origen a null.&lt;/li&gt;
&lt;li&gt;Construir con el directorio destino a null.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En todos estos casos lanzaré una InvalidArgumentException, así que inicialmente tendría como pruebas algo así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private Wp2JBake sut;

@Test(expected = IllegalArgumentException.class)
public void buildWithoutParameters() {
    sut = new Wp2JBake(null, null);
}

@Test(expected = IllegalArgumentException.class)
public void buildWithoutOrigin() {
    sut = new Wp2JBake(null, &amp;quot;&amp;quot;);
}

@Test(expected = IllegalArgumentException.class)
public void buildWithoutDestination() {
    sut = new Wp2JBake(&amp;quot;&amp;quot;, null);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y como implementación lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Wp2JBake(String origin, String destination) {
    if (origin == null) {
        throw new IllegalArgumentException(&amp;quot;Origin is not a valid file&amp;quot;);
    }
    if (destination == null) {
        throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero... un segundo, ¿me dá igual la IllegalArgumentException que se lanza? No, en cada caso quiero verificar que se esta lanzando la que se debe, refactorizo las pruebas, ahora voy a utilizar un @Rule de JUnit para comprobar que se lanza la excepción y el mensaje de error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Rule
public ExpectedException thrown = ExpectedException.none();

private Wp2JBake sut;

@Test
public void buildWithoutParameters() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Origin&amp;quot;);
    sut = new Wp2JBake(null, null);
}

@Test
public void buildWithoutOrigin() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Origin&amp;quot;);
    sut = new Wp2JBake(null, &amp;quot;foo&amp;quot;);

}

@Test
public void buildWithoutDestination() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Destination&amp;quot;);
    sut = new Wp2JBake(&amp;quot;foo&amp;quot;, null);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vale, ya he controlado que no sea null, ahora toca comprobar que tampoco sea cadena vacía:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt; @Test
public void buildWithEmptyOrigin() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Origin&amp;quot;);
    sut = new Wp2JBake(&amp;quot;&amp;quot;, &amp;quot;&amp;quot;);
}

@Test
public void buildWithEmptyDestination() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Destination&amp;quot;);
    sut = new Wp2JBake(&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora toca cambiar la implementación, me voy a apoyar en las commons-lang:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Wp2JBake(String origin, String destination) {
    if (StringUtils.isEmpty(origin)) {
        throw new IllegalArgumentException(&amp;quot;Origin is not a valid file&amp;quot;);
    }
    if (StringUtils.isEmpty(destination)) {
        throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Siguiente restricción, el origen además debe existir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void buildWithInvalidOrigin() {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Origin&amp;quot;);
    sut = new Wp2JBake(&amp;quot;foo&amp;quot;, &amp;quot;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la implementación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Wp2JBake(String origin, String destination) {
    if (StringUtils.isEmpty(origin) || !existsOrigin(origin)) {
        throw new IllegalArgumentException(&amp;quot;Origin is not a valid file&amp;quot;);
    }
    if (StringUtils.isEmpty(destination)) {
        throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
    }
}

private boolean existsOrigin(String origin) {
    File originFile = new File(origin);
    return originFile.exists();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta implementación hace saltar las pruebas de origen inválido, claro como para &amp;quot;callar&amp;quot; los tests estoy pasando como primer parámetro una cadena cualquiera, ahora falla porque no existe el parámetro foo.&lt;br /&gt;
Aquí hay dos opciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pasar un archivo que si exista.&lt;/li&gt;
&lt;li&gt;Cambiar la implementación para que primero compruebe que la cadena es válida en los dos casos y después que compruebe si el archivo es válido.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El problema de 2 es que tendría que lanzar la misma excepción dos veces mientras que el de 1 es que se parecería más a un test de integración que a una prueba unitaria en sí. Para mi gusto esta es una de las zonas grises en TDD, porque, ¿ahora qué hago?¿Creo un mock del SUT? No lo veo claro,&lt;br /&gt;
así que trataré de tirar por el camino del medio y pasar una ruta de archivo que sepa que siempre existe, por ejemplo, el pom.xml.&lt;/p&gt;
&lt;p&gt;Ahora podría seguir comprobando que el destino no sea inválido, pero... ¿puede serlo? Al ser un directorio, si no existe, debería crearlo y si existe, no hacer nada. En todo caso la comprobación debería ser si se puede crear el directorio y si se puede escribir en él.&lt;/p&gt;
&lt;p&gt;De aquí saco estas dos pruebas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void buildWithNonWritableDestination() {
    File destination = new File(&amp;quot;destination&amp;quot;);
    destination.mkdir();
    destination.deleteOnExit();
    destination.setReadOnly();
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Destination&amp;quot;);
    sut = new Wp2JBake(&amp;quot;pom.xml&amp;quot;, destination.getAbsolutePath());
}

@Test
public void buildWithNonWritableDestinationParent() {
    File destinationParent = new File(&amp;quot;destinationParent&amp;quot;);
    destinationParent.mkdir();
    destinationParent.deleteOnExit();
    destinationParent.setReadOnly();
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(&amp;quot;Destination&amp;quot;);
    sut = new Wp2JBake(&amp;quot;pom.xml&amp;quot;, destinationParent.getAbsolutePath() + File.separator + &amp;quot;destination&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la implementación sigue creciento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public Wp2JBake(String origin, String destination) {
    if (StringUtils.isEmpty(origin) || !existsOrigin(origin)) {
        throw new IllegalArgumentException(&amp;quot;Origin is not a valid file&amp;quot;);
    }
    if (StringUtils.isEmpty(destination) || !isWritable(destination)) {
        throw new IllegalArgumentException(&amp;quot;Destination is not a valid folder&amp;quot;);
    }
}

private boolean isWritable(String destination) {
    File destinationFolder = new File(destination);
    if (destinationFolder.exists()) {
        return destinationFolder.canWrite();
    } else {
        return destinationFolder.getParentFile().canWrite();
    }
}

private boolean existsOrigin(String origin) {
    File originFile = new File(origin);
    String path = originFile.getAbsolutePath();
    return originFile.exists();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último me quedaría probar el caso en el que ambos parámetros son válidos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Test
public void buildWithValidParameters() {
    sut = new Wp2JBake(&amp;quot;pom.xml&amp;quot;, &amp;quot;destination&amp;quot;);
    File destination = new File(&amp;quot;destination&amp;quot;);
    destination.delete();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto puedo empezar a refactorizar y a remplatearme las cosas. La verdad que Wp2JBake empieza a tener un tamaño considerable teniendo en cuenta que tan sólo tiene como API un constructor. La verdad que las comprobaciones que estoy haciendo sobre los parámetros no me convencen, me dan la impresión de que estoy violando el Single Responsability, por otra parte sería un poco artificial crear una clase de validadores únicamente.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Migrando el blog</title>
      <link>http://www.aguasnegras.es/blog/2016/01/03-migracion.html</link>
      <pubDate>dom., 3 ene. 2016 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2016/01/03-migracion.html</guid>
      	<description>
	&lt;p&gt;Desde hace ya bastantes años llevo pagando religiosamente todos los años un dominio (aguasnegras.es) y un alojamiento para tener el blog.&lt;br /&gt;
El blog ha tenido mejores y peores momentos, pero en general me gusta tener un sitio donde poder escribir en un momento dado, y por supuesto compartir con la comunidad (sobre todo en español, es por lo que escribo en este idioma).&lt;/p&gt;
&lt;p&gt;El asunto es que si nos paramos a pensarlo, el blog tiene bastantes pocos comentarios y sobre todo entradas mías, es decir, es fundamentalmente un medio de solo lectura. Hace ya un tiempo que pienso que tener para ésto un Wordpress con su PHP y su MySQL es bastante asesino y hasta antieconómico (en sentido general, porque el hosting me cuesta cuatro duros al año, tampoco vamos a ser ruinas). Otra cosa que me molesta bastante es tener que andar actualizando Wordpress (cosa lógica y normal) y aunque ya las actualizaciones sean automáticas, pues me molesta.&lt;/p&gt;
&lt;p&gt;Total, que a esto le sumamos que GitHub ofrece desde hace tiempo &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; que consiste en alojamiento gratuito para HTML estático y más a huevo imposible... quedaría pendiente el tema de los comentarios, pero precisamente para esto, &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; permite incluirlos por Javascript con una configuración muy sencilla.&lt;/p&gt;
&lt;p&gt;Con esto ya va quedando claro el enfoque, ahora habría que ver como generar el HTML, ya que escribir HTML a pelo es posible, pero es más bien coñazo. GitHub Pages usa &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; que permite usar Markdown para escribir, pero como buen javero de pro he buscado una opción similar en Java, &lt;a href=&quot;http://jbake.org/&quot;&gt;JBake&lt;/a&gt;. Eso sí, el inconveniente es claro, con Jekyll lo único que hay que subir a GitHub son los archivos .md mientras que con JBake tendré que generar el HTML y subirlo.&lt;/p&gt;
&lt;p&gt;Por tanto, hay tres trabajos importantes que hacer para estudiar la viabilidad de usar GitHub Pages para alojar el blog:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Integrar Disqus en JBake.&lt;/li&gt;
&lt;li&gt;Personalizar el HTML generado por JBake.&lt;/li&gt;
&lt;li&gt;Ver como subir los fuentes y HTML a GitHub y estudiar el workflow de publicación.&lt;/li&gt;
&lt;/ol&gt;

	</description>
    </item>
    <item>
      <title>Logging en Java con SLF4J y Log4j2</title>
      <link>http://www.aguasnegras.es/blog/2013/09/02-Logging+en+Java+con+SLF4J+y+Log4j2.html</link>
      <pubDate>lun., 2 sept. 2013 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2013/09/02-Logging+en+Java+con+SLF4J+y+Log4j2.html</guid>
      	<description>
	&lt;p&gt;En este artículo se hace una breve introducción a la generación de logs en Java usando SLF4J y Log4j2, así como un breve repaso de las mejores prácticas relativas.&lt;/p&gt;
&lt;h5&gt;Introducción&lt;/h5&gt;
&lt;p&gt;En Java se da una circunstancia muy extraña, siendo el logging tan importante como es, no hay una buena solución integrada en el framework como tal. Es cierto que existe la &lt;a title=&quot;Java Logging Framework en Wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Java_logging_framework&quot; target=&quot;_blank&quot;&gt;Java Logging API o Java Logging Framework&lt;/a&gt;, pero fue una adición bastante a posteriori (en concreto, se añadió en el 2002, en la versión 1.4 del JDK). Para cuando esta API salió como parte del JDK ya teníamos un &amp;quot;estándar&amp;quot; de facto, &lt;a title=&quot;Log4j 1.2&quot; href=&quot;http://logging.apache.org/log4j/1.2/&quot; target=&quot;_blank&quot;&gt;Log4j&lt;/a&gt;, que fue creado en el 1999. Mientras tanto, y haciendo honor a aquella vieja &lt;a title=&quot;XKCD - Standards&quot; href=&quot;http://xkcd.com/927/&quot; target=&quot;_blank&quot;&gt;tira de XKCD&lt;/a&gt;, seguían saliendo frameworks de loggings: &lt;a title=&quot;Logback&quot; href=&quot;http://logback.qos.ch/&quot; target=&quot;_blank&quot;&gt;logback&lt;/a&gt;, &lt;a title=&quot;commons-logging&quot; href=&quot;http://commons.apache.org/proper/commons-logging/&quot; target=&quot;_blank&quot;&gt;commons-logging&lt;/a&gt;, &lt;a title=&quot;SLF4J&quot; href=&quot;http://www.slf4j.org/&quot; target=&quot;_blank&quot;&gt;slf4j&lt;/a&gt; y otros tipos de soluciones a cada cual más exótica. En &lt;a title=&quot;The Logging Mess&quot; href=&quot;http://techblog.bozho.net/?p=503&quot; target=&quot;_blank&quot;&gt;este artículo&lt;/a&gt; se hace un repaso bastante completo de la historia del desaguisado.&lt;br /&gt;
A verano de 2013, la  situación no ha mejorado, tal y como recoge una reciente &lt;a title=&quot;State of Logging in Java 2013&quot; href=&quot;http://zeroturnaround.com/rebellabs/the-state-of-logging-in-java-2013/&quot; target=&quot;_blank&quot;&gt;encuesta de ZeroTurnAround&lt;/a&gt;. Si acaso se clarifican dos tendencias:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;En general, se suele usar una fachada de abstracción sobre el sistema de logs como puede ser SLF4J o commons-logging. Entiendo que ésto es debido a que muchas organizaciones imponen el uso de un framework de logging en concreto y mediante esta indirección ganas flexibilidad.&lt;/li&gt;
	&lt;li&gt;Log4J sigue siendo 14 años después el framework de logging más usado. Si eso no es un estándar de facto...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por tanto, parece razonable aplicar la filosofía de fachada de logging + framework de logging para el desarrollo de un nuevo producto. En cuanto a fachada de logging se usará SLF4J y como framework de logging se explicará el uso de Log4j2. ¿Por qué el 2 y no el 1? Pues básicamente por velocidad. El logging es una actividad que realmente es accesoria, por tanto no debería consumir recursos del sistema apenas, la página de Log4j2 explica que esta es una de las motivaciones tras la versión 2 del framework, y &lt;a title=&quot;Log4j2 Performance close to insane&quot; href=&quot;http://www.grobmeier.de/log4j-2-performance-close-to-insane-20072013.html#.UiMaLt9wB2N&quot; target=&quot;_blank&quot;&gt;este artículo&lt;/a&gt; confirma su velocidad. Sin embargo hay que tener en cuenta que Log4j2 esta actualmente en beta 8, pero dado que vamos a usar SLF4J se puede sustituir por su versión 1 o por logback o como se desee.&lt;br /&gt;
Otro aspecto a considerar a la hora de usar la versión 2 de log4j es que cuando se usa Maven, el log4j 1.2.x incluye varias dependencias que lo más normal es que no se usen, como javax.mail, geronimo-jms, etc...&lt;/p&gt;
&lt;h5&gt;Configuración&lt;/h5&gt;
&lt;p&gt;La configuración en un proyecto con Maven es tan sencilla como añadir las siguientes dependencias al pom.xml:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;!-- slf4j --&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;slf4j-api&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;1.7.5&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- log4j2 --&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;log4j-api&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.0-beta8&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.0-beta8&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;log4j-slf4j-impl&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;2.0-beta8&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La primera dependencia es la api de SLF4J, que realmente es la que se utilizará en la aplicación para escribir los mensajes de log. A continuación esta la API y el Core de Log4j2 y por último el puente entre SLF4J y Log4j2. Ya que SLF4J es una fachada de logging, el proyecto incluye varios puentes para trabajar con los frameworks más comunes, sin embargo, como Log4j2 es un proyecto nuevo, es éste el que incluye el puente para SLF4J.&lt;/p&gt;
&lt;h5&gt;Uso&lt;/h5&gt;
&lt;p&gt;El uso de SLF4J es bastante sencillo, basta con instanciar el objeto de logging, el logger:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private static Logger logger = LoggerFactory.getLogger(Logging.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta variable es privada para evitar que otras clases puedan usarla, porque en ese caso parecería que el error se ha producido en nuestra clase Logging, además es static para que tan solo haya una instancia del logger sin importar las instancias que haya de la clase (es decir, es singleton). Se puede usar también una instancia normal, cada aproximación tiene sus pros y sus contras como se discute &lt;a title=&quot;Static vs. Instance loggers&quot; href=&quot;http://www.slf4j.org/faq.html#declared_static&quot;&gt;aquí&lt;/a&gt;.&lt;br /&gt;
En cuanto al uso del logger es muy sencillo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public static void main (String... args) {
	logger.info(&amp;quot;Starting application&amp;quot;);
	logger.debug(&amp;quot;Loading Lannister house&amp;quot;);
	House lannister = new House(&amp;quot;Lannister&amp;quot;);
	logger.debug(&amp;quot;Invoking Clegane bannerman&amp;quot;);
	lannister.invokeBannerMan(&amp;quot;Clegane&amp;quot;);
	logger.debug(&amp;quot;Invoking erroneous bannerman&amp;quot;);
	lannister.invokeBannerMan(null);
	logger.info(&amp;quot;Ended application&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo, se crea una Casa llamada Lannister y se invoca a dos banderizos, uno llamado Clegane y otroal que por error se pasa null como nombre.&lt;br /&gt;
El resultado de ejecutar este programa es el siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;14:21:23.629 [main] ERROR es.aguasnegras.logging.model.House - Error loading house Lannister bannerman: bannerman name can&apos;t be empty
Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalStateException: Cant invoke bannerman without name
	at es.aguasnegras.logging.model.House.invokeBannerMan(House.java:44)
	at es.aguasnegras.logging.Logging.main(Logging.java:20)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La ejecución de la aplicación falla al invocar el banderizo con null (normal)&lt;br /&gt;
Como se ve la invocación al logger es en todo caso la misma, variando solo según el nivel de importancia del mensaje de error. En total en SLF4J vienen definidos los siguientes niveles de log:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt; Error: Ocurrió un error en la aplicación.&lt;/li&gt;
	&lt;li&gt;Warn: Se ha dado una circunstancia de posible error.&lt;/li&gt;
	&lt;li&gt;Info: Información sobre la ejecución de la aplicación.&lt;/li&gt;
	&lt;li&gt;Debug: Información importante para debuggear la aplicación.&lt;/li&gt;
	&lt;li&gt;Trace: Información de traza sobre la ejecución de la aplicación.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En otros frameworks existe un nivel adicional de log: Fatal, pero SLF4J no lo recoge, he &lt;a title=&quot;SLF4J y nivel de log Fatal&quot; href=&quot;http://www.slf4j.org/faq.html#fatal&quot;&gt;aquí&lt;/a&gt; la explicación. Yo personalmente creo que puedo vivir sin ello.&lt;br /&gt;
El objeto de cualquier framework de logging es que podamos configurar fácilmente cuales de estos mensajes se mostrarán según el entorno. Lo más normal es que en desarrollo deseemos mostrar los mensajes de debug y superiores, mientras que en producción se establezca el nivel a info (o incluso a error). Ahora bien, si hay un error en producción, lo más interesante es ajustar directamente el nivel de log a trace y así dispondríamos de toda la información relevante.&lt;br /&gt;
Sin embargo, en el ejemplo pese a tener invocaciones a debug, a info y a trace, tan solo sale el mensaje relativo al error (que además se registra en la clase House). Esto es porque aún no hemos definido la configuración de los mensajes de log y por defecto log4j2 tan solo recoge los mensajes con nivel Error.&lt;/p&gt;
&lt;h5&gt;Configuración de Log4j2&lt;/h5&gt;
&lt;p&gt;En primer lugar, hay que decir que la configuración de log4j2 se realiza bien mediante un archivo xml, bien mediante un archivo json. En log4j 1.2 se podía configurar también mediante un archivo .properties, como a mí nunca me gustó esa opción (la veía confusa), agradezco que la hayan quitado.&lt;br /&gt;
Lo primero es crear en main/resources un fichero log4j2.xml (tal y como se explica &lt;a title=&quot;Configuración de Log4j2&quot; href=&quot;http://logging.apache.org/log4j/2.x/manual/configuration.html#AutomaticConfiguration&quot;&gt;aquí&lt;/a&gt;), una vez creado, se completa tal que así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;configuration status=&amp;quot;WARN&amp;quot;&amp;gt;
  &amp;lt;appenders&amp;gt;
    &amp;lt;Console name=&amp;quot;Console&amp;quot; target=&amp;quot;SYSTEM_OUT&amp;quot;&amp;gt;
      &amp;lt;PatternLayout pattern=&amp;quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&amp;quot;/&amp;gt;
    &amp;lt;/Console&amp;gt;
  &amp;lt;/appenders&amp;gt;
  &amp;lt;loggers&amp;gt;
    &amp;lt;root level=&amp;quot;trace&amp;quot;&amp;gt;
      &amp;lt;appender-ref ref=&amp;quot;Console&amp;quot;/&amp;gt;
    &amp;lt;/root&amp;gt;
  &amp;lt;/loggers&amp;gt;
&amp;lt;/configuration&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El archivo empieza con el elemento &lt;em&gt;configuration&lt;/em&gt; que tiene un atributo &lt;em&gt;status&lt;/em&gt;, ese atributo significa el nivel de log de error que quiero aplicar al mismo log4j, a warn esta bien.&lt;br /&gt;
A continuación defino un &lt;em&gt;appender&lt;/em&gt;. Se puede pensar un appender es un destino de los mensajes de log, se puede tener un appender para presentar por consola, otro para guardar en archivo, otro para enviar por email o combinación de todos los anteriores. &lt;a title=&quot;Appenders de Log4j2&quot; href=&quot;http://logging.apache.org/log4j/2.x/manual/layouts.html&quot;&gt;Aquí&lt;/a&gt; se pueden consultar todos los appenders que hay.&lt;br /&gt;
A su vez un appender tiene un &lt;em&gt;layout&lt;/em&gt; que no es más que la forma de darle formato al mensaje de log: bien siguiendo un patrón, bien en html, etc... de nuevo hay una extensa &lt;a title=&quot;Appenders de Log4j2&quot; href=&quot;http://logging.apache.org/log4j/2.x/manual/layouts.html&quot;&gt;lista&lt;/a&gt;.&lt;br /&gt;
Y por último estan los &lt;em&gt;logger&lt;/em&gt; como tal. Los loggers tienen una particularidad, y es que existe un logger &amp;quot;padre&amp;quot; del que heredan todos los existentes: root, después de él se podrán crear los que sean oportunos, pero al menos siempre existirá root. Un logger tiene un nivel (que es el nivel mínimo de log cuyos mensajes se mostrarán) y una lista de appenders que se utilizarán para mostrar los mensajes.&lt;br /&gt;
De momento solo tengo configurado root y con nivel &lt;em&gt;trace&lt;/em&gt; con lo que se mostrarán todos los mensajes que se generen. Tal que así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
17:02:03.721 [main] INFO  es.aguasnegras.logging.Logging - Starting application
17:02:03.723 [main] DEBUG es.aguasnegras.logging.Logging - Loading Lannister house
17:02:03.742 [main] TRACE es.aguasnegras.logging.model.House - Loaded house Lannister without bannermen
17:02:03.742 [main] DEBUG es.aguasnegras.logging.Logging - Invoking Clegane bannerman
17:02:03.763 [main] TRACE es.aguasnegras.logging.model.BannerMan - Loaded bannerman Clegane with house Lannister
17:02:03.763 [main] TRACE es.aguasnegras.logging.model.House - Adding bannerman Clegane to house Lannister
17:02:03.763 [main] DEBUG es.aguasnegras.logging.Logging - Invoking erroneous bannerman
17:02:03.763 [main] ERROR es.aguasnegras.logging.model.House - Error loading house Lannister bannerman: bannerman name can&apos;t be empty
Exception in thread &amp;quot;main&amp;quot; java.lang.IllegalStateException: Cant invoke bannerman without name
	at es.aguasnegras.logging.model.House.invokeBannerMan(House.java:44)
	at es.aguasnegras.logging.Logging.main(Logging.java:20)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahora se puede empezar a modificar la configuración. Por ejemplo, si quiero que aparezcan todos los mensajes de error para Logging pero para las demás clases que solo aparezcan de info para arriba, puedo añadir este logger a la configuración:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;loggers&amp;gt;
	&amp;lt;root level=&amp;quot;trace&amp;quot;&amp;gt;
		&amp;lt;appender-ref ref=&amp;quot;Console&amp;quot; /&amp;gt;
	&amp;lt;/root&amp;gt;
	&amp;lt;logger name=&amp;quot;es.aguasnegras.logging.model&amp;quot; level=&amp;quot;info&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
		&amp;lt;appender-ref ref=&amp;quot;Console&amp;quot; /&amp;gt;
	&amp;lt;/logger&amp;gt;
&amp;lt;/loggers&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estoy creando un logger nuevo para el paquete &lt;em&gt;es.aguasnegras.logging.model&lt;/em&gt; que recogerá todos los mensajes de información y los mostrará por el appender &lt;em&gt;Console&lt;/em&gt;. El atributo &lt;em&gt;additivity&lt;/em&gt; a false indica que los mensajes que se muestren por este logger no se deberán mostrar por root (si no, saldrían duplicados).&lt;br /&gt;
Es importante tener en cuenta que el nivel de log de root es el mínimo para todo el sistema. Es decir, si yo arriba cambio el nivel de root por &lt;em&gt;error&lt;/em&gt; y el de model por &lt;em&gt;trace&lt;/em&gt; tan solo se mostrarán los mensajes de error, ya que el resto no se evaluarán.&lt;br /&gt;
Si por ejemplo ahora quisiera que si se mostraran todos los mensajes de log de la clase BannerMan, podría hacer así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;root level=&amp;quot;trace&amp;quot;&amp;gt;
	&amp;lt;appender-ref ref=&amp;quot;Console&amp;quot; /&amp;gt;
&amp;lt;/root&amp;gt;
&amp;lt;logger name=&amp;quot;es.aguasnegras.logging.model&amp;quot; level=&amp;quot;info&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
	&amp;lt;appender-ref ref=&amp;quot;Console&amp;quot; /&amp;gt;
&amp;lt;/logger&amp;gt;
&amp;lt;logger name=&amp;quot;es.aguasnegras.logging.model.BannerMan&amp;quot; level=&amp;quot;trace&amp;quot; additivity=&amp;quot;false&amp;quot;&amp;gt;
	&amp;lt;appender-ref ref=&amp;quot;Console&amp;quot; /&amp;gt;
&amp;lt;/logger&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y así, sucesivamente. Aquí, por mantener el ejemplo sencillo, solo he utilizado un appender, pero cada logger podría usar un appender distinto, por ejemplo, root podría utilizar la consola, pero model podría usar un archivo.&lt;/p&gt;
&lt;h5&gt;Uso Eficiente de la API&lt;/h5&gt;
&lt;p&gt;Arriba comentaba que un framework de logging, sobre todo ha de ser rápido y no consumir ciclos de CPU, ni memoria, etc... En general, para evitar el consumo &amp;quot;tonto&amp;quot; de recursos en muchos sitios recomiendan hacer lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
if (logger.isTraceEnabled()) {
	logger.trace(&amp;quot;Adding bannerman &amp;quot; + bannerManName + &amp;quot; to house &amp;quot; + name);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este código, desde mi punto de vista tiene varios inconvenientes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;En el caso mejor (trace no esta habilitado), se ejecuta una instrucción&lt;/li&gt;
&lt;li&gt;En el caso peor (trace esta habilitado), se ejecutan dos instrucciones y además se construye la cadena con el mensaje&lt;/li&gt;
&lt;li&gt;Además, para cumplir con DRY, nos veremos tentados de crear una fachada de logging sobre la fachada de logging (WTF!)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Para evitar todo esto, en SLF4J &lt;a title=&quot;Forma más rápida de logar&quot; href=&quot;http://www.slf4j.org/faq.html#logging_performance&quot;&gt;recomiendan esta forma de logar&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
logger.trace(&amp;quot;Adding bannerman {} to house {}&amp;quot;, bannerManName, name);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Así de sencillo y de fácil. Por supuesto el método acepta múltiples parámetros y si se pasa un objeto se invoca el toString.&lt;/p&gt;
&lt;h5&gt;Código&lt;/h5&gt;
&lt;p&gt;Pues con esto se acaba este pequeño repaso de lo fundamental sobre SLF4J y Log4j2, el código, en github (para variar).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/agustinventura/logging&quot;&gt;&lt;img title=&quot;Ejemplos de Logging en GitHub&quot; src=&quot;/images/github_icon.png&quot; alt=&quot;JustPlay en GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Emulador de Android en Ubuntu (Initializing hardware OpenGLES emulation support)</title>
      <link>http://www.aguasnegras.es/blog/2013/03/09-Emulador+de+Android+en+Ubuntu+%28Initializing+hardware+OpenGLES+emulation+support%29.html</link>
      <pubDate>sáb., 9 mar. 2013 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2013/03/09-Emulador+de+Android+en+Ubuntu+%28Initializing+hardware+OpenGLES+emulation+support%29.html</guid>
      	<description>
	&lt;p&gt;A veces (normalmente en una instalación nueva), los emuladores de Android no arrancan en Ubuntu de 64 bits debido a un error con OpenGLES.&lt;/p&gt;
&lt;p&gt;Para comprobar si la solución es aplicable, hay que ejecutar este comando desde la consola:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;$ ./emulator -avd GalaxyS -verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Donde GalaxyS será el nombre del avd que se desee arrancar, al final del log deberemos ver algo así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;emulator: Initializing hardware OpenGLES emulation support
Violación de segmento (`core&apos; generado)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El problema y su solución se encuentra reportado &lt;a title=&quot;Android Issue 34233&quot; href=&quot;http://code.google.com/p/android/issues/detail?id=34233&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Básicamente la solución consiste en lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;$ cd $ANDROID_SDK/tools/lib
$ mv libOpenglRender.so libOpenglRender.so.bak
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>JustPlay, lógica propia</title>
      <link>http://www.aguasnegras.es/blog/2012/08/14-JustPlay%2C+l%C3%B3gica+propia.html</link>
      <pubDate>mar., 14 ago. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/08/14-JustPlay%2C+l%C3%B3gica+propia.html</guid>
      	<description>
	&lt;p&gt;Vale, una vez terminado el guarreo con el ciclo de vida, toca implementar la lógica de negocio propia de la aplicación.&lt;br /&gt;
Al ser JustPlay un reproductor de mp3 y ogg, vamos a ver que lógica tenemos que implementar:&lt;/p&gt;
&lt;h6&gt;Funcionalidad Detallada&lt;/h6&gt;
&lt;ol&gt;
	&lt;li&gt;Gestión de la lista de reproducción, añadir directorios y canciones sueltas, borrar la lista de reproducción, eliminar canciones en particular y reordenarla mediante drag&amp;amp;drop.&lt;/li&gt;
	&lt;li&gt;Reproducir: Reproducir toda la playlist desde el principio hasta el final dándole al botón de play.&lt;/li&gt;
	&lt;li&gt;Reproducir una canción: Empezar a reproducir toda la playlist desde la canción seleccionada.&lt;/li&gt;
	&lt;li&gt;Parar: Parar la reproducción, al darle a play se volverá a reproducir la lista desde el principio.&lt;/li&gt;
	&lt;li&gt;Pausar: Parar la reproducción, al darle a play se continuará con la reproducción donde estaba.&lt;/li&gt;
	&lt;li&gt;Canción anterior: Reproducir la canción anterior, en caso de ser la primera se reproducirá desde el principio.&lt;/li&gt;
	&lt;li&gt;Canción siguiente: Reproducir la canción siguiente, en caso de ser la última no se hará nada.&lt;/li&gt;
	&lt;li&gt;Avance rápido: Avanzar 15 sgs en la canción. Si la posición actual de la canción + 15 sgs &amp;gt; longitud de la canción, se pasa a la siguiente canción.&lt;/li&gt;
	&lt;li&gt;Retroceso: Retroceder 15 sgs en la canción. Si la posición actual de la canción - 15 sgs &amp;lt; 0, se comienza desde el principio.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;Definición de Responsabilidades&lt;/h6&gt;
&lt;p&gt;Entre los artefactos existentes voy a dividir la responsabilidad de la siguiente manera:&lt;/p&gt;
&lt;h6&gt;MediaPlayer:&lt;/h6&gt;
&lt;ul&gt;
	&lt;li&gt;Gestión de la interfaz del usuario.&lt;/li&gt;
	&lt;li&gt;Mostrar la playlist y los controles.&lt;/li&gt;
	&lt;li&gt;Toda la lógica de negocio la delega en MediaService y MediaThread&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;FileExplorer&lt;/h6&gt;
&lt;ul&gt;
	&lt;li&gt;Mostrar los contenidos de la memoria del teléfono, recordando el último directorio visitado.&lt;/li&gt;
	&lt;li&gt;Enviar a MediaPlayer una canción en concreto o las contenidas en un directorio y sus subdirectorios.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;MediaServiceBinder&lt;/h6&gt;
&lt;ul&gt;
	&lt;li&gt;Devuelve una instancia de MediaService al objeto que lo solicite (MediaPlayer en este caso).&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;MediaService&lt;/h6&gt;
&lt;ul&gt;
	&lt;li&gt;Mantiene vivo MediaThread aunque se cierre MediaPlayer.&lt;/li&gt;
	&lt;li&gt;Presenta las notificaciones al usuario en la barra de estado.&lt;/li&gt;
	&lt;li&gt;Gestiona el CallManager que permite parar la reproducción cuando hay una llamada y volverla a iniciar cuando esta termina.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;MediaThread&lt;/h6&gt;
&lt;ul&gt;
	&lt;li&gt;Gestiona la reproducción de la playlist implementando toda la funcionalidad detallada arriba.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;

	</description>
    </item>
    <item>
      <title>JustPlay, binding al servicio</title>
      <link>http://www.aguasnegras.es/blog/2012/05/18-JustPlay%2C+binding+al+servicio.html</link>
      <pubDate>vie., 18 may. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/05/18-JustPlay%2C+binding+al+servicio.html</guid>
      	<description>
	&lt;p&gt;El siguiente paso en el desarrollo de JustPlay resulta bastante obvio, ligar el MediaPlayer con el MediaService, o lo que es lo mismo, hacer un bind. Para no perderme, he hecho un pequeño diagrama de interacción entre &lt;a title=&quot;Diagrama de Interacción entre CrankPlayer y MediaService&quot; href=&quot;https://docs.google.com/drawings/d/1onAU0Ucfi0twATpAlizEuqY9OBoZo_0T9MjD195un4w/edit&quot; target=&quot;_blank&quot;&gt;MediaPlayer y MediaService&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En él se aprecia que aparte de los métodos de negocio necesarios (denotados por una línea discontínua), todavía me faltan por implementar dos métodos del ciclo de vida: el bind y el unbind, que son precisamente los que me permiten establecer una comunicación bidireccional con el MediaService para indicar acciones y realizar y obtener resultados.&lt;/p&gt;
&lt;h6&gt;Bind y Unbind de MediaService&lt;/h6&gt;
&lt;p&gt;La definición más pura de Service dice que este es un componente aislado que ejecuta una computación. Esto esta muy bien pero en realidad, si no te puedes comunicar con él, su uso es bastante limitado, para eso existen los &lt;a title=&quot;Bound Services - Android Developers&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals/bound-services.html&quot; target=&quot;_blank&quot;&gt;bound services&lt;/a&gt;. Un bound service se puede combinar con un servicio &amp;quot;normal&amp;quot; (y de hecho es lo que hago) y además ofrece dos métodos adicionales, el bind y el unbind. Lo importante es que en el bind devuelve una interfaz que permite interactuar con él.&lt;/p&gt;
&lt;p&gt;Primero entonces creo la clase que hará de fachada del servicio que extiende de &lt;a title=&quot;Binder - Android Developers&quot; href=&quot;http://developer.android.com/reference/android/os/Binder.html&quot; target=&quot;_blank&quot;&gt;Binder&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class MediaServiceBinder extends Binder {

  private final MediaService mediaService;

  public MediaServiceBinder(MediaService mediaService) {
    this.mediaService = mediaService;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación, declaro una variable de esta clase en el servicio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private final IBinder mediaServiceBinder = new MediaServiceBinder(this);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la devuelve en el método onBind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
public IBinder onBind(Intent bindingIntent) {
  return this.mediaServiceBinder;
}

@Override
public boolean onUnbind(Intent intent) {
  // Nothing to do here
  return super.onUnbind(intent);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El onUnbind, de momento he considerado que no requiere ninguna acción en especial.&lt;/p&gt;
&lt;p&gt;Vale, con esto el servicio ya devuelve su fachada.&lt;/p&gt;
&lt;p&gt;Ahora viene la parte de MediaPlayer, siguiendo el diagrama de interacción, voy a hacer el bind en el onStart:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
public void onStart() {
  super.onStart();
  Intent intent = new Intent(this, MediaService.class);
  bindService(intent, mediaServiceConnection, Context.BIND_AUTO_CREATE);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero bindService no devuelve el MediaServiceBinder inmediatamente, sino que es devuelto asincronamente, para eso se pasa el objeto mediaServiceConnection, que es una implementación de &lt;a title=&quot;Service Connection - Android Developers&quot; href=&quot;http://developer.android.com/reference/android/content/ServiceConnection.html&quot; target=&quot;_blank&quot;&gt;ServiceConnection&lt;/a&gt;, además creo una instancia propia de MediaServiceBinder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private MediaServiceBinder mediaServiceBinder = null;

private ServiceConnection mediaServiceConnection = new ServiceConnection() {
  public void onServiceConnected(ComponentName className,
    IBinder service) {
    mediaServiceBinder = (MediaServiceBinder) service;
  }

  public void onServiceDisconnected(ComponentName arg0) {
    mediaServiceBinder = null;
  }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para acabar con esta parte, en el onPause de MediaPlayer, hago el unBind:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
public void onPause() {
  unbindService(mediaServiceConnection);
  super.onPause();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con ésto ya estan implementados los servicios del ciclo de vida, y ahora ya solo me queda por implementar la lógica de negocio.&lt;/p&gt;
&lt;h6&gt;TODO&lt;/h6&gt;
&lt;ol&gt;
	&lt;li&gt;Añadir el MediaPlayer al MediaThread&lt;/li&gt;
	&lt;li&gt;Definir fachada de MediaService (o lógica de negocio) en MediaServiceBinder.&lt;/li&gt;
	&lt;li&gt;Implementar la lógica en MediaService y MediaThread.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;Código&lt;/h6&gt;
&lt;p&gt;En GitHub (para variar):&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/agustinventura/JustPlay&quot;&gt;&lt;img class=&quot;size-full wp-image-255&quot; title=&quot;CrankPlayer en GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;CrankPlayer en GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt; Repositorio de JustPlay en GitHub&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>JustPlay, explorador de archivos</title>
      <link>http://www.aguasnegras.es/blog/2012/05/17-JustPlay%2C+explorador+de+archivos.html</link>
      <pubDate>jue., 17 may. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/05/17-JustPlay%2C+explorador+de+archivos.html</guid>
      	<description>
	&lt;p&gt;Uno de mis requisitos en JustPlay (de hecho, el fundamental), es poder reproducir a partir de archivos sueltos o directorios.&lt;/p&gt;
&lt;p&gt;Por tanto, necesitaré un explorador de archivos, aunque sea muy básico, que permita ver los archivos en la memoria del dispositivo y añadirlos a una lista de reproducción. Gráficamente, la interacción entre las actividades sería &lt;a title=&quot;Interacción Actividades JustPlay&quot; href=&quot;https://docs.google.com/drawings/d/1GCzJBHeAYgXh5ZlZmsyjQJic8RM3ECh6oD-AYEWRTAo/edit&quot; target=&quot;_blank&quot;&gt;así&lt;/a&gt;. En general la devolución del parámetro no tendrá mayor problema, ya que se puede hacer a través del intent de vuelta.&lt;/p&gt;
&lt;p&gt;Para crear el explorador de archivos voy a seguir &lt;a title=&quot;Simple File Explorer - Android-er&quot; href=&quot;http://android-er.blogspot.com.es/2010/01/implement-simple-file-explorer-in.html&quot; target=&quot;_blank&quot;&gt;este tutorial&lt;/a&gt;, por supuesto añadiendo cosas de mi cosecha según me vaya pareciendo.&lt;/p&gt;
&lt;h6&gt;Creación de CrankExplorer&lt;/h6&gt;
&lt;p&gt;En primer lugar creo la activity tal cual heredando de CrankActivity y le añado la implementación por defecto de todos los métodos del ciclo de vida.&lt;/p&gt;
&lt;p&gt;Ahora la declaro en el AndroidManifest:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;activity android:name=&amp;quot;.FileExplorer&amp;quot; android:label=&amp;quot;@string/explorer_name&amp;quot;/&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para arrancarla, creo un botón en MediaPlayer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;Button
android:id=&amp;quot;@+id/buttonOpenExplorer&amp;quot;
android:layout_width=&amp;quot;wrap_content&amp;quot;
android:layout_height=&amp;quot;wrap_content&amp;quot;
android:text=&amp;quot;@string/open_explorer&amp;quot;
android:onClick=&amp;quot;openCrankExplorer&amp;quot; /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el listener:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public void openCrankExplorer(View v) {
  Intent openCrankExplorer = new Intent(this, CrankExplorer.class);
  startActivityForResult(openCrankExplorer, REQUEST_CODE);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto ya puedo llamar a FileExplorer desde MediaPlayer.&lt;/p&gt;
&lt;p&gt;Ahora toca implementar FileExplorer, en general la implementación seguirá estas líneas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Se mostrarán todos los archivos y directorios que se puedan leer.&lt;/li&gt;
	&lt;li&gt;Si se hace click en un directorio se abrirá.&lt;/li&gt;
	&lt;li&gt;Si se hace click en un archivo, se abrirá un diálogo de confirmación para añadirlo a la lista de reproducción.&lt;/li&gt;
	&lt;li&gt;Si se deja presionado un directorio se abrirá un menú contextual para añadir todo su contenido a la lista de reproducción.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Al lío, siguiendo lo que comentan, hago un layout para los archivos, le voy a llamar file_row.xml y a continuación creo el layout de FileExplorer, crankexplorer.xml. No tiene mucha historia ya que es una lista y punto.&lt;/p&gt;
&lt;p&gt;En cuanto a la actividad, lo primero que hago es filtrar los archivos mediante un FilenameFilter, para que solo muestre aquellos directorios y archivos que sean legibles y si es un archivo, que además termine en mp3 u ogg.&lt;/p&gt;
&lt;p&gt;Añado un onListItemClick y si es un directorio se invocará a getDir sobre él, mientras que si es un archivo, se mostrará un diálogo que permitirá dos acciones:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Añadir el archivo a la lista de reproducción.&lt;/li&gt;
	&lt;li&gt;Cancelar&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por último, para devolver la canción a MediaPlayer, creo un método finish().&lt;/p&gt;
&lt;p&gt;Para ir acabando, falta el menú contextual que me permita seleccionar un directorio para añadir (junto con todos los archivos contenidos en él y sus subdirectorios).&lt;br /&gt;
Primero creo el &lt;a title=&quot;Defining a Menu in XML - Android Developers&quot; href=&quot;http://developer.android.com/guide/topics/ui/menus.html#xml&quot; target=&quot;_blank&quot;&gt;layout del menu&lt;/a&gt; y lo llamo crankexplorer_context.xml a continuación en el onCreate, registro la lista para el menú contextual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
registerForContextMenu(getListView());

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Después tengo que crear dos métodos del ciclo de vida, el primero, la creación del menú:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
@Override
public void onCreateContextMenu(ContextMenu menu, View v,
  ContextMenuInfo menuInfo) {
  super.onCreateContextMenu(menu, v, menuInfo);
  menu.setHeaderTitle(R.string.directory_contextual_title);
  MenuInflater inflater = getMenuInflater();
  inflater.inflate(R.menu.crankexplorer_context, menu);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el segundo, la acción a ejecutar cuando se selecciona:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
@Override
public boolean onContextItemSelected(MenuItem item) {
  switch (item.getItemId()) {
    case R.id.addDirectoryItem:
      AdapterContextMenuInfo info = (AdapterContextMenuInfo) item
      .getMenuInfo();
      this.selected = new File(this.path.get((int) info.id));
      if (this.selected.isDirectory()) {
        finish();
      }
      return true;
   default:
     return super.onContextItemSelected(item);
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para acabar, implemento el método finish() para devolver bien la canción seleccionada, bien todas las canciones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
@Override
public void finish() {
  Intent data = new Intent();
  if (this.selected != null) {
    if (this.selected.isFile()) {
      data.putExtra(&amp;quot;selectedFile&amp;quot;, this.selected);
    } else if (this.selected.isDirectory()) {
      List&amp;lt;File&amp;gt; filesInDirectory = this.explodeDir(this.selected);
      data.putExtra(&amp;quot;selectedFiles&amp;quot;,
        (ArrayList&amp;lt;File&amp;gt;) filesInDirectory);
    }
  }
  setResult(RESULT_OK, data);
  super.finish();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en MediaPlayer creo un onActivityResult que procese la vuelta desde FileExplorer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
  if (data.hasExtra(&amp;quot;selectedFile&amp;quot;)) {
    this.playlist.add((File) data.getExtras().get(&amp;quot;selectedFile&amp;quot;));
    this.renderPlaylist();
  } else if (data.hasExtra(&amp;quot;selectedFiles&amp;quot;)) {
    List&amp;lt;File&amp;gt; fileList = (List&amp;lt;File&amp;gt;) data.getExtras().get(
      &amp;quot;selectedFiles&amp;quot;);
    this.playlist.addAll(fileList);
    this.renderPlaylist();
  }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h6&gt;TODO&lt;/h6&gt;
&lt;p&gt;Pues ya solo queda:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Hacer el bind del service en MediaPlayer&lt;/li&gt;
	&lt;li&gt;Reproducir con un MediaPlayer en el thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;Código&lt;/h6&gt;
&lt;p&gt;Sigue en GitHub&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/agustinventura/JustPlay&quot;&gt;&lt;img class=&quot;size-full wp-image-255&quot; title=&quot;JustPlay en GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;JustPlay en GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>JustPlay, arquitectura</title>
      <link>http://www.aguasnegras.es/blog/2012/05/14-JustPlay%2C+arquitectura.html</link>
      <pubDate>lun., 14 may. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/05/14-JustPlay%2C+arquitectura.html</guid>
      	<description>
	&lt;p&gt;Bueno, ya va siendo hora de empezar el trabajo en JustPlay.&lt;/p&gt;
&lt;p&gt;Después de mucho documentarme sobre &lt;a title=&quot;Activity - Android Developers&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html&quot; target=&quot;_blank&quot;&gt;Activities&lt;/a&gt;, &lt;a title=&quot;Services - Android Developers&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals/services.html&quot; target=&quot;_blank&quot;&gt;Services&lt;/a&gt; y &lt;a title=&quot;Processes and Threads - Android Developers&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals/processes-and-threads.html&quot; target=&quot;_blank&quot;&gt;Threads&lt;/a&gt;, creo que tengo una aproximación bastante buena a la arquitectura que voy a intentar implementar.&lt;/p&gt;
&lt;h6&gt;&lt;strong&gt;Introducción&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;Un requisito fundamental es que la aplicación consuma los mínimos recursos posibles, con lo cual cabría pensar que se puede implementar mediante una Activity normal y corriente. Esto es un error, una Activity tiene un ciclo de vida determinado y cabe suponer (aunque no he hecho la prueba) que en cuanto pasara al estado &lt;em&gt;&amp;quot;Paused&amp;quot;&lt;/em&gt;, se terminaría la reproducción de música.&lt;/p&gt;
&lt;p&gt;Por tanto hay que buscar otro componente que escape del ciclo de vida de la Activity y con el cual se pueda comunicar la Activity es decir, un Service. El &lt;a title=&quot;Service Lifecycle - Android Developers&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals/services.html#Lifecycle&quot; target=&quot;_blank&quot;&gt;ciclo de vida del Service&lt;/a&gt; hace que este permanezca vivo aún cuando la Activity pase a cualquier estado que no sea &lt;em&gt;&amp;quot;Resumed&amp;quot;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;En el tutorial de CrankPlay ya se ha visto &lt;a title=&quot;CrankPlay, Service para reproducir sonido.&quot; href=&quot;http://aguasnegras.es/?p=422&quot; target=&quot;_blank&quot;&gt;un ejemplo&lt;/a&gt; de esto, sin embargo este ejemplo estaba claramente desfasado y se le pueden criticar varios puntos desde el punto de vista de mis requisitos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;La comunicación entre procesos (IPC) no me es necesaria, tan solo necesito que una única actividad acceda al servicio.&lt;/li&gt;
	&lt;li&gt;La definición de la interfaz con AIDL tan solo es necesaria si se desea IPC, por tanto, basta con heredar de Service.&lt;/li&gt;
	&lt;li&gt;Además, en cuanto a este Service, hay que considerar que no es algo que yo lance y me pueda olvidar de él, sino que tendré que comunicarme periódicamente con él (modificación de la playlist, start/stop, etc...), es decir, necesito un &lt;a title=&quot;Bound Service - Android Developers&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals/bound-services.html&quot; target=&quot;_blank&quot;&gt;BoundService&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Por último, tal y como dice la documentación en numerosos sitios, un Service se ejecuta en el mismo thread que el UI Thread, con lo cual... necesitaré un thread propio que se encargue de la reproducción (actividad pesada por definición).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Gráficamente, esta propuesta quedaría &lt;a title=&quot;Arquitectura JustPlay&quot; href=&quot;https://docs.google.com/drawings/d/1aBKs0rDh2qzGWODF9TKh1FXBoFJdIpBsJ9o1rtsJAvY/edit&quot; target=&quot;_blank&quot;&gt;así&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ahora voy a montar la infraestructura básica.&lt;/p&gt;
&lt;h6&gt;Implementación&lt;/h6&gt;
&lt;p&gt;La actividad de momento no tiene mayor historia, basta con dejarla tal cual.&lt;/p&gt;
&lt;p&gt;Para implementar el Service, creo una nueva clase (MediaService) y hago que herede de Service. Para que sea realmente funcional, lo declaro en el AndroidManifest.xml:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;service android:name=&amp;quot;com.crankcode.services.MediaService&amp;quot; android:exported=&amp;quot;false&amp;quot;/&amp;gt;;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El atributo &lt;em&gt;&amp;quot;android:exported=false&amp;quot;&lt;/em&gt;, lo que indica es que el servicio no estará disponible para otras actividades del sistema, un poco de programación defensiva.&lt;/p&gt;
&lt;p&gt;Para el thread, simplemente creo la clase MediaThread y hago que implemente Runnable.&lt;/p&gt;
&lt;p&gt;Para arrancar el MediaService, en el onCreate de MediaPlayer escribo lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
@Override
public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  startService(new Intent(getBaseContext(), MediaService.class));
  setContentView(R.layout.main);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el MediaService, defino su onStart así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
@Override
public void onStart(Intent intent, int startId) {
  Log.d(&amp;quot;CrankPlayer&amp;quot;, &amp;quot;MediaService.onStart()&amp;quot;);
  this.mediaThread = new Thread(new MediaThread());
  this.mediaThread.start();
  super.onStart(intent, startId);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, en el run de MediaService meto un chivato:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public void run() {
  Log.d(&amp;quot;CrankPlayer&amp;quot;, &amp;quot;MediaThread.run&amp;quot;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, a arrancar y ver si todo ha ido bien.&lt;/p&gt;
&lt;p&gt;Y todo correcto, funcionando a la primera.&lt;/p&gt;
&lt;h6&gt;TODO&lt;/h6&gt;
&lt;ol&gt;
	&lt;li&gt;Añadir la instancia de MediaPlayer al Thread&lt;/li&gt;
	&lt;li&gt;Hacer el bind del service en la activity.&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;Código&lt;/h6&gt;
&lt;p&gt;Como de costumbre, el código esta en GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/agustinventura/JustPlay&quot;&gt;&lt;img class=&quot;size-full wp-image-255&quot; title=&quot;JustPlay en GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;JustPlay en GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>CrankPlay, controles de reproducción</title>
      <link>http://www.aguasnegras.es/blog/2012/04/16-CrankPlay%2C+controles+de+reproducci%C3%B3n.html</link>
      <pubDate>lun., 16 abr. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/04/16-CrankPlay%2C+controles+de+reproducci%C3%B3n.html</guid>
      	<description>
	&lt;p&gt;Última parte del tutorial que sigo para el CrankPlay, &lt;a title=&quot;MusicDroid - Part III&quot; href=&quot;http://www.helloandroid.com/tutorials/musicdroid-audio-player-part-iii&quot; target=&quot;_blank&quot;&gt;MusicDroid&lt;/a&gt;, ahora voy a añadir los controles básicos de reproducción. Esta parte se me antoja que no me será de mucha utilidad, ya que es bastante dependiente del diseño de la aplicación, pero que demonios...&lt;/p&gt;
&lt;h6&gt;Controles de Reproducción&lt;/h6&gt;
&lt;p&gt;El objetivo de esta parte es añadir los controles de reproducción a la aplicación. Estos se mostrarán como una capa semitransparente sobre la lista de canciones.&lt;/p&gt;
&lt;p&gt;Me cojo el xml que viene en la página y lo pego. Como ya me ha pasado antes, justo delante del &lt;em&gt;&amp;quot;id&amp;quot;&lt;/em&gt; hay que añadir el namespace: &lt;em&gt;&amp;quot;android:&amp;quot;&lt;/em&gt;. Además quito unos puntos y comas y listo. Ahora a ver si explico un poco como es el layout.&lt;/p&gt;
&lt;p&gt;En primer lugar, si se mira el songlist.xml, lo primero que se aprecia es que usa un LinearLayout. Un LinearLayout posiciona los elementos hijos en forma de columna (o fila). Y punto. En songlist.xml posiciona los elementos en columna porque el atributo &lt;em&gt;&amp;quot;android:orientation&amp;quot;&lt;/em&gt; esta establecido al valor &lt;em&gt;&amp;quot;vertical&amp;quot;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Esto tiene sentido porque se quiere representar una lista de valores en columna, pero sin embargo, los controles de reproducción se quieren situar los unos en función de los otros... Y esto es lo que hace un RelativeLayout, permite posicionar sus hijos relativamente entre ellos.&lt;/p&gt;
&lt;p&gt;Lo que se hace en controls.xml es utilizar un RelativeLayout para que ocupe toda la pantalla y en su interior otro en el centro (controlado por &lt;em&gt;&amp;quot;android:layout_centerVertical&amp;quot;&lt;/em&gt; y &lt;em&gt;&amp;quot;android:layout_centerHorizontal&amp;quot;&lt;/em&gt;) que tendrá un área total de 170dip x 170dip. ¿&lt;a title=&quot;dip en la documentación de android&quot; href=&quot;http://developer.android.com/guide/topics/resources/more-resources.html#Dimension&quot; target=&quot;_blank&quot;&gt;Qué es un dip&lt;/a&gt;? Pues es un &amp;quot;Density Independent Pixel&amp;quot;, para hacer una idea, 1 dip = 1 pixel en una pantalla de 160 dpi. Si la pantalla tiene mayor resolución, se escala automáticamente. Vamos, que es una medida independiente del tamaño de la pantalla.&lt;/p&gt;
&lt;p&gt;Por último, para situar los ImageView se utiliza &lt;em&gt;&amp;quot;android:layout_alignParentTop, android:layout_centerHorizontal&amp;quot;&lt;/em&gt;, etc...&lt;/p&gt;
&lt;h6&gt;Añadiendo una Animación&lt;/h6&gt;
&lt;p&gt;Cosa que yo no sabía, en android se pueden declarar animaciones con xml. El tutorial propone añadir una que haga que un botón pulsado se haga más grande y otra vez más pequeño. La verdad que el xml es bastante entendible, escala por 1.5 la imagen, alcanzando este tamaño en 600 msg.&lt;/p&gt;
&lt;p&gt;Para invocar la animación, pues por ejemplo en el OnKeyUp de los controles se invoca al método startAnimation de la vista correspondiente pasándole como parámetro la animación definida... ningún misterio.&lt;/p&gt;
&lt;h6&gt;Creando un Tema&lt;/h6&gt;
&lt;p&gt;Además de la animación, en el tutorial la actividad con los controles de reproducción es transparente y se superpone a la actividad con la lista de mp3, haciendo por tanto posible ver la canción que se esta reproducción. Para conseguir este efecto hay que diseñar un tema (una apariencia visual) para esta actividad.&lt;/p&gt;
&lt;p&gt;Lo más sencillo, y lo que hacen en el tutorial es crear un tema que herede del tema por defecto de android y decirle que el color de fondo de la actividad sea transparente y que no tenga título. Todo esto en un archivo llamado styles.xml en &lt;em&gt;&amp;quot;res/values&amp;quot;&lt;/em&gt;. Para crear el archivo, he tenido que modificar el atributo parent y establecerlo como &lt;em&gt;&amp;quot;parent=&amp;quot;android:Theme&amp;quot;&amp;quot;&lt;/em&gt;, ya que si no, no lo reconoce.&lt;/p&gt;
&lt;p&gt;Una vez hecho esto avisa del epígrafe de &lt;em&gt;&amp;quot;@drawable/transparent_background&amp;quot;&lt;/em&gt;. Esto es debido... a que no existe, jeje.  Para crearlo, en &lt;em&gt;&amp;quot;res/values&amp;quot;&lt;/em&gt; hay que crear un archivo llamado colors.xml y pegarle la definición de este transparent background.&lt;/p&gt;
&lt;p&gt;Por último, se define la actividad en el AndroidManifest.xml aplicándole el tema.&lt;/p&gt;
&lt;h6&gt;Creando la Actividad&lt;/h6&gt;
&lt;p&gt;Pues una vez declarada, toca crearla. El código que viene en la página es bastante sencillo, se limita a gestionar la conexión con el servicio y a ejecutar la animación sobre el botón pulsado.&lt;/p&gt;
&lt;p&gt;Como en el artículo anterior, tengo que tocar el método bind y eliminar el parámetro null que se le pasa ya que esa signatura esta deprecada y en el OnKeyUp tengo que capturar también una RemoteException. Con ésto ya compila.&lt;/p&gt;
&lt;p&gt;Pero antes, hay que cambiar la actividad CrankPlay para que cuando se pulse en un elemento, invoque la nueva actividad y entonces empiece a reproducir. Lo único que el tutorial esta tan pasao de rosca que el método startSubActivity ya no existe, así que haré una llamada a startActivityForResult.&lt;/p&gt;
&lt;p&gt;Y con ésto ya lanzo y andando, todo perfecto :)&lt;/p&gt;
&lt;h6&gt;Conclusiones&lt;/h6&gt;
&lt;p&gt;Bueno, en primer lugar, el autor prometía una cuarta parte del tutorial... pero va a ser que nunca se llevó a cabo xD De entrada tal y como esta a día de hoy hay 4 grandes problemas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Los controles no son táctiles!! Eso es, se utiliza OnKeyUp, asi que uno se puede hartar de pulsar encima que nada...&lt;/li&gt;
	&lt;li&gt;Una vez parada una canción... no hay forma de reanudarla!&lt;/li&gt;
	&lt;li&gt;De la misma manera, tampoco hay forma de salir de la actividad de control y volver a la lista de canciones.&lt;/li&gt;
	&lt;li&gt;Por último, falta una barra de indicación de por donde va la canción o un minutero u algo, ah, y leer el id3 tag.&lt;/li&gt;
&lt;/ol&gt;
&lt;div&gt;Pues nada, creo que con eso ya tengo deberes para un rato bueno. Además hay otro tema que es hacer una actividad que me haga de explorador de archivos para seleccionar que carpeta (con sus subcarpetas) quiero leer.&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;

	</description>
    </item>
    <item>
      <title>CrankPlay, Service para reproducir sonido.</title>
      <link>http://www.aguasnegras.es/blog/2012/04/06-CrankPlay%2C+Service+para+reproducir+sonido.html</link>
      <pubDate>vie., 6 abr. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/04/06-CrankPlay%2C+Service+para+reproducir+sonido.html</guid>
      	<description>
	&lt;p&gt;Siguiendo la &lt;a title=&quot;MusicDroid part II&quot; href=&quot;http://www.helloandroid.com/tutorials/musicdroid-audio-player-part-ii&quot; target=&quot;_blank&quot;&gt;segunda parte de MusicDroid&lt;/a&gt;, voy a hacer un Service (servicio) para reproducir la música. Para lo cual necesito primero definir claramente que es un Service.&lt;/p&gt;
&lt;p&gt;Según la documentación &lt;a title=&quot;Service en Application Fundamentals&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals.html#Components&quot; target=&quot;_blank&quot;&gt;oficial de Android&lt;/a&gt;, un Service es... bueno, es una chapa, vaya que un Service es un proceso en segundo plano sin interfaz de usuario y con el cual puede comunicarse cualquier otro componente o artefacto que viva en el ecosistema. La parte interesante es que esta comunicación es asíncrona y se hace por paso de mensajes (como todo en Android), así que cuidado con esta parte.&lt;/p&gt;
&lt;h6&gt;Desarrollo del Service&lt;/h6&gt;
&lt;p&gt;Ahora, en el tutorial, viene una parte que tengo que terminar de entender más a fondo. El tema es que para comunicarse con un Service hay que definir una interfaz en un lenguaje llamado &lt;a title=&quot;AIDL en StackOverflow&quot; href=&quot;http://stackoverflow.com/questions/6326903/aidl-android-interface-definition-language&quot; target=&quot;_blank&quot;&gt;AIDL&lt;/a&gt;, de momento voy a seguir al pie de la letra el tutorial y me creo mi CPSInterface.aidl y copio y pego tal cual, ya más adelante veré de mejorar esta parte (o entender mejor).&lt;/p&gt;
&lt;p&gt;Efectivamente, al salvarlo, en el directorio gen, me ha creado un paquete com.crankcode.crankplay.services en el que ha creado el correspondiente .java. Maravilloso.&lt;/p&gt;
&lt;p&gt;Ahora toca crear el Service en sí, CPService en este caso concreto. Este servicio se une con la clase generada anteriormente (CPSInterface.java) proveyendo una implementación de una clase abstracta interna de esa interfaz, CPSInterface.Stub, y este Stub es el que ejecuta la lógica para utilizar el MediaPlayer. Para mi gusto hay un abuso de clases anónimas (como en casi todo lo de Android), pero de momento esta bien así, a seguir adelante.&lt;/p&gt;
&lt;p&gt;El siguiente paso es obvio, el Stub hace uso de una serie de funciones, playSong, prevSong, etc... que hay que definir en el CPService, en el tutorial viene un ejemplo de una. En general la lógica era la que ya hacía la Activity, pero además metiéndole la gestión de mensajes necesaria para comunicarse con el invocador.&lt;/p&gt;
&lt;p&gt;Esta parte es la siguiente en ser analizada. Lo primero de lo que se queja es de que no existe playbackstart.png, así que me cojo tanto ese icono como playbackpause.png y los copio al res/drawable... Joe, si que esta desfasao el tutorial, yo tengo cuatro subdirectorios: drawable-hdpi, etc... Bueno, de momento lo copio a todos y ya lo veré en más detalle.&lt;/p&gt;
&lt;p&gt;Una vez añadidos, se queja de que no existe el constructor de Notification. Claro, de entrada lo primero que veo en el tutorial es que hay que crear un NotificationManager para gestionar las notificaciones, así que añado el onCreate y el onDestroy... pero esto no cambia nada, vaya plan. Claro, tiene toda la pinta de que el constructor que se utiliza de Notification esta absoluta y totalmente deprecated. Un vistazo rápido a la &lt;a title=&quot;Documentación de Notification&quot; href=&quot;http://developer.android.com/reference/android/app/Notification.html&quot; target=&quot;_blank&quot;&gt;documentación&lt;/a&gt;  me confirma que ese constructor ya no existe, así que usaré el siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;Notification notification = new Notification(
					R.drawable.playbackstart, file, System.currentTimeMillis());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto se ha terminado el servicio, ahora toca usar el servicio desde la actividad.&lt;/p&gt;
&lt;h6&gt;Uso del Service&lt;/h6&gt;
&lt;p&gt;Lo primero es declarar el servicio en el applicationManifest.xml y aquí me vuelvo a encontrar que el atributo class que usa el tutorial ya no existe, pues nada, lo declaro así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;&amp;lt;service android:name=&amp;quot;.services.CPService&amp;quot; android:process=&amp;quot;:remote&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y cruzo los dedos... Una vez en la actividad, la lógica es bastante sencilla, se crea una instancia de la interfaz del servicio (CPSInterface) y se hace un bind en el OnCreate a ese servicio. Este bind lo he tenido que cambiar también a lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;this.bindService(new Intent(CrankPlay.this, CPService.class),
				mConnection, Context.BIND_AUTO_CREATE);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para hacer el bind es necesario tener una instancia de un ServiceConnection que es una clase que se encarga de gestionar la conexión y desconexión del servicio.&lt;/p&gt;
&lt;p&gt;Y por último, se cambia el updateSongs y el OnListItemClick para hacer llamadas al servicio en vez de ejecutar la lógica de reproducción.&lt;/p&gt;
&lt;p&gt;Pues con esto listo... vamos a ver si funciona. Pues no, no funciona, cuando hago click en una canción termina saliéndome una excepcion que dice &amp;quot;contentView required&amp;quot;. Después de bichear un rato por Google, parece que el error esta relacionado con la gestión de notificaciones (que lógicamente ha evolucionado bastante en estos años). Para hacer una prueba rápida, voy a tratar de quitar las notificaciones, asi que comento todo el código relativo al NotificationManager y las notificaciones.&lt;/p&gt;
&lt;p&gt;Y ahora sí que arranca y reproduce. Bueno, pues parte dos de la misión, arreglar el tema de las notificaciones.&lt;/p&gt;
&lt;p&gt;Y efectivamente, el tema de las notificaciones estaba más que deprecated, quedaría así&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;//Create the notification
Notification notification = new Notification(
	R.drawable.playbackstart, file, System.currentTimeMillis());
Context context = getApplicationContext();
//Create the intent that will be fired when user clicks on the notification
Intent notificationIntent = new Intent(this, CrankPlay.class);
//The PendingIntent represents the firing of above intent
PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
	notificationIntent, 0);
//Notification general information
notification.setLatestEventInfo(context, &amp;quot;Playing &amp;quot;, file,
	contentIntent);
//Display
nm.notify(NOTIFY_ID, notification);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los pasos a dar son bastante sencillos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Crear la notificación, incluyendo el icono a presentar, el texto descriptivo (en este caso es el nombre de la canción) y el momento de la notificación.&lt;/li&gt;
	&lt;li&gt;Crear el Intent que se lanzará cuando se haga click en la notificación&lt;/li&gt;
	&lt;li&gt;Crear el PendingIntent, que no es más que el disparador del Intent anterior, los parámetros son la actividad que lo lanza, un request code que no se usa, el intent que se lanzará y una serie de flags.&lt;/li&gt;
	&lt;li&gt;Se añaden unos datos adicionales a la notificación y el PendingIntent.&lt;/li&gt;
	&lt;li&gt;Se lanza la notificación.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Con estos cambios pruebo a arrancar... et voilà, todo perfectamente funcional. Es más, gracias al servicio, puedo ejecutar otras aplicaciones, que sencillamente haciendo click en la notificación, vuelvo a CrankPlay. ¡Bien!&lt;/p&gt;
&lt;h6&gt;Notas&lt;/h6&gt;
&lt;p&gt;Quizás en esta parte es donde el tutorial ha envejecido de peor manera. Por ejemplo, la declaración del Service o el uso de notificaciones. No solo eso sino que si se consulta cualquier fuente más moderna (por ejemplo, &lt;a title=&quot;Android Service Tutorial, por Lars Vogel (inglés)&quot; href=&quot;http://www.vogella.de/articles/AndroidServices/article.html&quot; target=&quot;_blank&quot;&gt;esta&lt;/a&gt; de Lars Vogel ) veremos que hoy en día hay otras opciones de Service no descritas en el tutorial, como por ejemplo crear un Service que se ejecute dentro del mismo hilo de la aplicación, con lo cual nos ahorramos crear el AIDL. No obstante si se quiere que el Service se ejecute en su propio hilo, sigue siendo absolutamente necesario el AIDL.&lt;/p&gt;
&lt;p&gt;Esto abre una serie de consideraciones a la hora de diseñar la aplicación que tendré que considerar (por ejemplo, si el servicio es local... ¿muere si el sistema acaba con la actividad principal? En ese caso quizás no sea lo que necesito...).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>WordPress SEO, aspectos avanzados y conclusiones.</title>
      <link>http://www.aguasnegras.es/blog/2012/04/05-WordPress+SEO%2C+aspectos+avanzados+y+conclusiones.html</link>
      <pubDate>jue., 5 abr. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/04/05-WordPress+SEO%2C+aspectos+avanzados+y+conclusiones.html</guid>
      	<description>
	&lt;p&gt;Sigo con &lt;a title=&quot;WordPress SEO Tutorial&quot; href=&quot;http://yoast.com/articles/wordpress-seo/&quot; target=&quot;_blank&quot;&gt;el artículo de Yoast&lt;/a&gt; sobre WordPress SEO.&lt;/p&gt;
&lt;h6&gt;Optimizar las Descripciones&lt;/h6&gt;
&lt;p&gt;El siguiente punto en el que incide el artículo es en el de optimización de las etiquetas &lt;em&gt;&amp;quot;&amp;lt;meta name=&amp;quot;description&amp;quot;&amp;gt;&amp;quot;&lt;/em&gt;, estas etiquetas son utilizadas por el buscador para devolver la página cuando su contenido es coincidente con una búsqueda.&lt;/p&gt;
&lt;p&gt;Por defecto, el buscador utiliza la primera frase de la página, pero con el plugin podemos establecer una a mano. Si tomo el post anterior como ejemplo, ahora mismo me sale lo siguiente: &amp;quot;Bueno, pues para darme un poco de visibilidad en Google, he instalado el plugin WordPress SEO y tiene un estupendo artículo de acciones a ...&amp;quot; Esta descripción es obviamente mala y se puede mejorar bastante.&lt;/p&gt;
&lt;p&gt;Para ello, debajo de cada post una sección propia del plugin y un apartado &amp;quot;Meta Description&amp;quot;, en él introduzco: &amp;quot; Introducción a WordPress SEO y Google Web Master Tools.&amp;quot; Obviamente, podía haber utilizado la etiqueta para poner todo un chorro de palabras simplemente para optimizar a tope la visibilidad de la página, pero no me interesa. Creo que una cosa es mejorar la visibilidad de la página y otra tratar de manipular a los motores de búsqueda. Lo dicho, lo mismo es que soy tonto xD&lt;/p&gt;
&lt;p&gt;En esta sección del plugin también puedo ver que el template que he puesto para los títulos hace que sea demasiado largo para los motores de búsqueda, así que en la sección &amp;quot;SEO Title&amp;quot; le quito la parte del dominio. Es decir, el SEO Title coincidirá con el título de la página.&lt;/p&gt;
&lt;h6&gt;Optimización de Imágenes&lt;/h6&gt;
&lt;p&gt;Para la optimización de imágenes, aparte de recomendar un plugin, la recomendación básica que se dá es que todas las imágenes tengan un &amp;quot;title&amp;quot; y un &amp;quot;alt&amp;quot;. Dá la casualidad de que eso en particular es una neura mía y todas las imágenes lo tienen, así que mission accomplished.&lt;/p&gt;
&lt;h6&gt;XML Sitemap&lt;/h6&gt;
&lt;p&gt;El último apartado en esta sección, es la generación de un &lt;a title=&quot;XML Sitemap en Wikipedia (inglés)&quot; href=&quot;http://en.wikipedia.org/wiki/Site_map#XML_Sitemaps&quot; target=&quot;_blank&quot;&gt;XML Sitemap&lt;/a&gt;. La idea del XML Sitemap es indexar fácilmente las páginas para los buscadores, vaya, facilitarles la vida. Se puede activar a través del plugin en la sección &amp;quot;SEO &amp;gt; XML Sitemaps&amp;quot;, marco el &amp;quot;Check this box to enable XML sitemap functionality.&amp;quot; y lo dejo tal y como esta por defecto.&lt;/p&gt;
&lt;p&gt;Sin embargo, cuando le doy &amp;quot;XML Sitemap&amp;quot; para ver lo que ha generado, me devuelve un 404, no encuentra nada en &lt;em&gt;&amp;quot;&lt;a href=&quot;http://aguasnegras.es/sitemap_index.xml&quot;&gt;&lt;a href=&quot;http://aguasnegras.es/sitemap_index.xml&quot;&gt;http://aguasnegras.es/sitemap_index.xml&lt;/a&gt;&lt;/a&gt;&amp;quot;&lt;/em&gt;... vaya rollo.&lt;/p&gt;
&lt;h6&gt;Plantillas&lt;/h6&gt;
&lt;p&gt;A continuación, viene una sección con consejos para las plantillas.&lt;/p&gt;
&lt;p&gt;El primero es utilizar Breadcrumbs o rastro de migas, para indicarle al usuario donde esta y patatín y patatán. Vale, ODIO, los rastros de migas, por lo cual, obviaré esta sección.&lt;/p&gt;
&lt;p&gt;El siguiente, paradójicamente, más que sobre SEO es sobre buena escritura en general. Viene a hablar sobre los encabezados, se recomienda que si es la página principal  &lt;em&gt;&amp;quot;&amp;lt;h1&amp;gt;&amp;quot;&lt;/em&gt; sea tan solo el nombre del sitio, que los &lt;em&gt;&amp;quot;&amp;lt;h2&amp;gt;&amp;quot; &lt;/em&gt;sean los títulos de los posts, etc...&lt;/p&gt;
&lt;p&gt;Esto es algo bastante relacionado con el tema que se esté usando, y he de decir que Yoko lo cumple muy bien, así que nada que tocar por aquí.&lt;/p&gt;
&lt;p&gt;El siguiente apartado, también muy relacionado con el tema que se este usando, es no incrustar css ni javascript en las plantillas de las páginas. Así se favorece que sea cacheado en el usuario y que los motores de búsqueda no los accedan, así como la velocidad de ejecución de la página. De nuevo aqui Yoko cumple bastante bien, en la página principal hay una mínima cantidad de css introducido en un etiqueta &lt;em&gt;&amp;quot;&amp;lt;style&amp;gt;&amp;quot;&lt;/em&gt;, pero es más que aceptable y todo lo demás en lo que toca a css y javascript se encuentra en archivos separados.&lt;/p&gt;
&lt;p&gt;El siguiente apartado es sobre velocidad. Dejando de lado técnicas más complejas o intrusivas como puede ser minimizar el número de llamadas a la base de datos o darse de alta en un CDN, la opción recomendada es instalar algún plugin de caché, en concreto recomienda &amp;quot;W3 Total Cache&amp;quot;. Hace tiempo que quiero probar uno, así que más adelante lo instalaré y lo probaré.&lt;/p&gt;
&lt;p&gt;A continuación se habla sobre la barra lateral. Es cierto que el menú lateral es demasiado genérico. Por ejemplo, en AguasNegras aparecen mis enlaces a redes sociales en cualquier página que visites, cuando realmente solo tendría sentido en la página principal y en &amp;quot;Acerca De&amp;quot;. El problema es que hoy por hoy, según dice el artículo no hay forma sencilla de corregir ésto, más que programación. Así que se queda tal y como esta.&lt;/p&gt;
&lt;p&gt;También se recomienda hacer un Sitemap en HTML, pero claro, siendo un blog esto no tiene mucho sentido.&lt;/p&gt;
&lt;p&gt;Finalmente se dan unos consejos sobre &amp;quot;Author Highlighting&amp;quot;, pero me parece ya demasiado complicado, de nuevo hay que tocar código, etc... Así que  nada por aquí.&lt;/p&gt;
&lt;h6&gt; Contenido Duplicado&lt;/h6&gt;
&lt;p&gt;A la hora de navegar por el blog existen distintas maneras, quizás demasiadas. Por ejemplo, si se tienen varios autores, se puede acceder a cada autor mediante /author/nombredelautor. En mi caso esta desactivado, pero es cierto que para un blog unipersonal, este tipo de taxonomía no tiene sentido. En la sección &amp;quot;SEO &amp;gt; Indexation&amp;quot; se pueden controlar todo este tipo de aspectos, por ejemplo, no indexar los archivos por fecha, o por categorías o tags.&lt;/p&gt;
&lt;p&gt;A continuación viene una sección, que la verdad, parece un poco publicitaria, ya que muchas cosas te las explica por encima y te dice que WordPress SEO las gestiona automáticamente. También recomienda un plugin para la paginación, ya que si tienes un post muy popular en una categoría con muchos posts... digamos que se pierde un poco el grano entre la paja.&lt;/p&gt;
&lt;h6&gt;Estructura del Sitio&lt;/h6&gt;
&lt;p&gt;La primera recomendación que encuentro interesante en esta sección es que si tienes un post particularmente popular o interesante... lo conviertas en una página para maximizar su exposición. Realmente tiene sentido.&lt;/p&gt;
&lt;p&gt;Además, se recomienda utilizar un plugin de posts relacionados, para maximizar las sinergias entre los propios posts, en concreto se recomienda &lt;a title=&quot;Yet Another Related Posts plugin&quot; href=&quot;http://mitcho.com/yarpp/&quot; target=&quot;_blank&quot;&gt;Yet Another Related Posts plugin&lt;/a&gt;, así que nada, otro más a la lista. Creo que puede ser bastante interesante ya que en realidad yo trato de hacer esta funcionalidad a mano mediante las categorías y las etiquetas, pero claro, no es lo mismo.&lt;/p&gt;
&lt;h6&gt;Otros Aspectos&lt;/h6&gt;
&lt;p&gt;Finalizando este artículo, Yoast comenta otra serie de aspectos adicionales, por ejemplo, la importancia de fidelizar a los lectores, mediante RSS y suscripción por email, el motivar la discusión y la participación de los comentaristas, así como el hacerles un &amp;quot;follow back&amp;quot;, comentar en sus blogs, seguirles en Twitter, etc... En general en este sentido creo que se habla más de la construcción de una comunidad, cosa que por supuesto, influye en el SEO.&lt;/p&gt;
&lt;p&gt;Por último se recomienda el uso de distintas herramientas para medir el impacto de las optimizaciones, como pueden ser el mismo Google Webmaster Tools y Google Analytics.&lt;/p&gt;
&lt;h6&gt;Conclusiones&lt;/h6&gt;
&lt;p&gt;El plugin WordPress SEO tiene muchísimas funcionalidades sin lugar a dudas. Es más, creo que tiene más de las que yo voy a poder utilizar eficientemente.&lt;/p&gt;
&lt;p&gt;Sin embargo a lo largo de todo el artículo hay varios aspectos que me han ido &amp;quot;sorprendiendo&amp;quot;. En general la base del SEO esta en ofrecer buenos contenidos y que sean relevantes. Es decir, el SEO es GENERAR CONTENIDO.&lt;/p&gt;
&lt;p&gt;Después esta generación tiene una gran parte que podríamos decir que es &amp;quot;maquetación&amp;quot;. De la misma forma que para un libro se escoge una encuadernación, una portada, una tipografía, etc... En la generación de contenidos hay que tener en cuenta detalles como los títulos, las etiquetas header, las keywords, etc...&lt;/p&gt;
&lt;p&gt;Es decir, a la hora de redactar un post, o una página, una vez terminado, hay que cuidar los aspectos SEO.&lt;/p&gt;
&lt;p&gt;Una vez hecho esto, hay disponibles una serie de herramientas para el análisis del rendimiento de la página, como pueden ser las citadas arriba.&lt;/p&gt;
&lt;p&gt;Y como conclusión final, hay que tener en cuenta que si escribes es para ser leido, es decir, escribes para la comunidad, y es la comunidad la que te posiciona mejor o peor, en función del valor de tus contenidos.&lt;/p&gt;
&lt;div&gt;&lt;span style=&quot;color: #333333; font-family: sans-serif; font-size: 12px; line-height: 12px; background-color: #f5f5f5;&quot;&gt;
&lt;/span&gt;&lt;/div&gt;

	</description>
    </item>
    <item>
      <title>WordPress SEO, Google Webmaster Tools y optimización de títulos.</title>
      <link>http://www.aguasnegras.es/blog/2012/04/04-WordPress+SEO%2C+Google+Webmaster+Tools+y+optimizaci%C3%B3n+de+t%C3%ADtulos.html</link>
      <pubDate>mié., 4 abr. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/04/04-WordPress+SEO%2C+Google+Webmaster+Tools+y+optimizaci%C3%B3n+de+t%C3%ADtulos.html</guid>
      	<description>
	&lt;p&gt;Bueno, pues para darme un poco de visibilidad en Google, he instalado el &lt;a title=&quot;WordPress SEO plugin&quot; href=&quot;http://wordpress.org/extend/plugins/wordpress-seo/&quot; target=&quot;_blank&quot;&gt;plugin WordPress SEO&lt;/a&gt; y tiene un &lt;a title=&quot;WordPress SEO Tutorial&quot; href=&quot;http://yoast.com/articles/wordpress-seo/&quot; target=&quot;_blank&quot;&gt;estupendo artículo&lt;/a&gt; de acciones a realizar para utilizarlo, así que lo voy a seguir y voy a ir comentando.&lt;/p&gt;
&lt;h6&gt;Entorno&lt;/h6&gt;
&lt;p&gt;A día de hoy lo que tengo es un WordPress 3.3.1 con WordPress SEO 1.1.5&lt;/p&gt;
&lt;h6&gt;SEO&lt;/h6&gt;
&lt;p&gt;A continuación voy a ir siguiendo lo más fielmente posible las instrucciones que se dan en el artículo punto por punto.&lt;/p&gt;
&lt;h6&gt;Permalinks&lt;/h6&gt;
&lt;p&gt;Dice con toda razón que los permalinks han de ser legibles. Por ejemplo, ahora mismo los permalinks de aguasnegras.es son del tipo &lt;em&gt;&amp;quot;&lt;a href=&quot;http://www.aguasnegras.es/blog/?p=410&quot;&gt;&lt;a href=&quot;http://www.aguasnegras.es/blog/?p=410&quot;&gt;http://www.aguasnegras.es/blog/?p=410&lt;/a&gt;&lt;/a&gt;&amp;quot;&lt;/em&gt;. Claramente es un error, debería incluir al menos el título del post, así que me voy a &amp;quot;Ajustes &amp;gt; Enlaces Permanentes&amp;quot; y lo cambio, por probar solo a título del post.&lt;/p&gt;
&lt;p&gt;Vaya, me dice que no puede modificar el .htaccess y que tengo que añadir un código a mano... Bueno, pues nada, lo añado. Pero sin embargo ahora al mostrar la página principal me dice que no encuentra nada... ufff... Esto tiene más bien pinta de estar relacionado con algo más, así que mejor dejo de tocar. Siguiente apartado.&lt;/p&gt;
&lt;h6&gt;WWW o no WWW&lt;/h6&gt;
&lt;p&gt;Este punto es interesante, ya me obliga a pensar en el branding del sitio. Personalmente siempre que pienso en el sitio, pienso en &amp;quot;aguasnegras&amp;quot;, así que creo que el branding sería más adecuado como &amp;quot;aguasnegras.es&amp;quot; a secas. Esto implica dos cambios, ambos en &amp;quot;Ajustes &amp;gt; Generales&amp;quot;. En &amp;quot;Dirección de WordPress (URL)&amp;quot; y &amp;quot;Dirección del Sitio (URL)&amp;quot;, elimino las www y acepto.&lt;/p&gt;
&lt;p&gt;El siguiente paso que comenta Yoast es hacer esto también en &lt;a title=&quot;Google Webmaster Tools&quot; href=&quot;https://www.google.com/webmasters/tools/&quot; target=&quot;_blank&quot;&gt;Google Webmaster Tools&lt;/a&gt;... lo cual estaría muy bien si supiera lo que es :D Según la página principal, sirve para mejorar la visibilidad de mi sitio en Google, pues nada, inicio sesión y le doy a añadir un sitio. En la URL introduzco &lt;em&gt;&amp;quot;aguasnegras.es&amp;quot;&lt;/em&gt;. A continuación me dice que descargue un archivo html de verificación y lo suba a mi sitio, nada más fácil. Subido, verifico y le doy a continuar.&lt;/p&gt;
&lt;p&gt;Y ya estoy en el panel de control de Google Webmaster Tools para aguasnegras.es. Hago click en &amp;quot;Información del Sitio &amp;gt; Configuración&amp;quot; y como URL establezco &amp;quot;aguasnegras.es&amp;quot;. Sin embargo al darle a &amp;quot;Guardar&amp;quot; me informa que tengo que confirmar que soy el propietario del dominio y patatín y patatán... después de cacharrear un rato, decido añadir a mis sitios &amp;quot;&lt;a href=&quot;http://www.aguasnegras.es&quot;&gt;www.aguasnegras.es&lt;/a&gt;&amp;quot; y de repente empiezan a funcionar todas las analíticas y todo va bien... pues vaya, nada, ya hago el cambio y listo.&lt;/p&gt;
&lt;p&gt;La verdad que el Google Webmaster Tools promete... habrá que echarle un vistazo más detenidamente otro día.&lt;/p&gt;
&lt;h6&gt;Títulos de los Posts&lt;/h6&gt;
&lt;p&gt;El tutorial sigue hablando del título de los posts, el título no solo es el texto que se muestra en la pantalla, si no que será lo primero que se muestre en los resultados de búsqueda.&lt;/p&gt;
&lt;p&gt;Se recomienda que las primeras palabras del título sean las más significativas, ya que los motores de búsqueda hacen más hincapié sobre ellas... así como la gente cuando lee. Vaya, es de cajón, pero nunca me había dado por pensarlo, a partir de ahora tendré más cuidado.&lt;/p&gt;
&lt;p&gt;Con la opción &amp;quot;SEO &amp;gt; Titles&amp;quot; puedo controlar como se muestran los títulos de las páginas de mi sitio, no solo de los posts. Como no estoy seguro de como esta el header.php de mi tema, marco la casilla de &amp;quot;Force rewrite titles&amp;quot;. Para probar, en el &amp;quot;Title Template&amp;quot; de &amp;quot;Homepage&amp;quot; pongo el ejemplo que viene en el artículo en sí: &amp;quot;%%sitename%% &amp;amp;#8226; %%sitedesc%%&amp;quot;, pulso &amp;quot;Save Settings&amp;quot; y recargo... Perfecto, me muestra &amp;quot;AguasNegras &amp;amp;#8226; This was not supposed to be like this&amp;quot;, para darle un toque personal, dejo el título del sitio como &amp;quot;AguasNegras || This was not supposed to be like this&amp;quot;, jeje.&lt;/p&gt;
&lt;p&gt;Así en plan rápido, establezco las siguientes plantillas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Posts y Pages: %%title%% @ %%sitename%%&lt;/li&gt;
	&lt;li&gt;Category: %%category%% @ %%sitename%%&lt;/li&gt;
	&lt;li&gt;Post_Tag: %%tag%% @ %%sitename%%&lt;/li&gt;
	&lt;li&gt;Author Archive: %%name%% @ %%sitename%%&lt;/li&gt;
	&lt;li&gt;Date Archives: %%date%% @ %%sitename%%&lt;/li&gt;
	&lt;li&gt;Search Pages: %%searchphrase%% @ %%sitename%%&lt;/li&gt;
	&lt;li&gt;404 Pages: Uops! @ %%sitename%%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Lo pruebo todo y perfecto, funcionan todos los títulos&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>CrankPlay, mi primer proyecto Android. Parte 1</title>
      <link>http://www.aguasnegras.es/blog/2012/04/01-CrankPlay%2C+mi+primer+proyecto+Android.+Parte+1.html</link>
      <pubDate>dom., 1 abr. 2012 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2012/04/01-CrankPlay%2C+mi+primer+proyecto+Android.+Parte+1.html</guid>
      	<description>
	&lt;p&gt;Bueno, pues después de un tiempo dedicado a un proyecto que tengo por ahí y que anda un poco empantanado, voy a empezar a hacer algo que llevo tiempo queriendo hacer. Un reproductor de mp3 para mi móvil.&lt;/p&gt;
&lt;p&gt;Voy a empezar haciendo una pequeña elicitación de requisitos &amp;quot;grosso modo&amp;quot; para tenerlo como guía de aquí en adelante.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requisitos&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El reproductor tendrá las siguientes funcionalidades:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Contará con una lista de reproducción en la que se almacenarán las canciones a reproducir en orden.&lt;/li&gt;
	&lt;li&gt;Leerá las canciones de directorios en el almacenamiento del móvil, pudiendo en todo caso seleccionar una carpeta con lo cual se incluirían todos los mp3 en ella y sus subcarpetas en la lista de reproducción.&lt;/li&gt;
	&lt;li&gt;Contará con los controles básicos en un reproductor musical: Play, Stop, Pause, Next, Back, Volumen.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Como requisitos no funcionales:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Deberá consumir los recursos mínimos posibles.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Enfoque del Desarrollo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pues para desarrollar, voy a empezar basándome en el &lt;a title=&quot;MusicDroid Audio Player, HelloAndroid&quot; href=&quot;http://www.helloandroid.com/tutorials/musicdroid-audio-player-part-i&quot; target=&quot;_blank&quot;&gt;tutorial MusicDroid de HelloAndroid&lt;/a&gt;. Este tutorial tiene ya bastantes años, así que iré haciendo un repaso de las APIs involucradas, actualizándolas según sea necesario.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 1 - Crear el Proyecto&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El primer paso es sencillo, creo el proyecto, inicializo git, creo repositorio en GitHub y lo subo, para más detalles, &lt;a title=&quot;Git, EGit y GitHub.&quot; href=&quot;http://www.aguasnegras.es/?p=201&quot; target=&quot;_blank&quot;&gt;Tutorial de Git y GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Resultado, ya esta el proyecto en GitHub:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/agustinventura/CrankPlay&quot;&gt;&lt;img class=&quot;size-full wp-image-255&quot; title=&quot;CrankPlay en GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;CrankPlay en GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora toca empezar con el tutorial de MusicDroid.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 2 - Lista de canciones&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El primer paso del tutorial es simplemente mostrar una lista de todos los archivos .mp3 que hay en la tarjeta sd.&lt;/p&gt;
&lt;p&gt;Lo primero es el layout, el songlist.xml. Lo he modificado un poco de la siguiente manera:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;He sacado la cadena de texto &quot;No songs found&quot; al strings.xml.&lt;/li&gt;
	&lt;li&gt;He cambiado el layout_weight, lo he quitado porque daba un warning en combinación con el layout_width.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ahora, se hace el layout correspondiente a cada canción, song_item.xml. Es copiar y pegar y solo modifico el id, lo cambio por &lt;em&gt;@+id/song_title&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3 - Actividad CrankPlay&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lo primero que hago en la Activity es hacer que extienda de ListActivity para poder gestionar nativamente el layout ListView. A continuación copio y pego las variables locales:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;MEDIA_PATH: directorio en el que estan los mp3 (la tarjeta SD por defecto).&lt;/li&gt;
	&lt;li&gt;songs: lista de canciones en MEDIA_PATH.&lt;/li&gt;
	&lt;li&gt;mp: instancia de MediaPlayer que reproducirá las canciones.&lt;/li&gt;
	&lt;li&gt;currentPosition: posición de la canción que se esta reproduciendo.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En cuanto al OnCreate, sin misterios, se encarga de arrancar la aplicación y actualizar la lista de canciones.&lt;/p&gt;
&lt;p&gt;En cuanto el updateSongList se encarga de cargar el directorio especificado en MEDIA_PATH y buscar en él todos los archivos terminados en .mp3 con la ayuda de la clase Mp3Filter.&lt;/p&gt;
&lt;p&gt;Siguiente paso del tutorial, reproducir una canción cuando se hace click en ella. Para ello se usa un OnListItemClick que únicamente se encarga de llamar al método playSong, pasándole el nombre del archivo de la canción.&lt;/p&gt;
&lt;p&gt;PlaySong se limita a usar el objeto mp para reproducir la canción. Primero se hace un reset con lo cual se pausa cualquier canción que se este reproduciendo y se carga la canción nueva. Se crea una clase interna anónima para implementar OnCompletionListener, que se limita a invocar al método nextSong para reproducir la siguiente canción (de haberla).&lt;/p&gt;
&lt;p&gt;Y por último nextSong, sencillamente comprueba que no sea la última canción y si no lo es, incrementa currentPosition y llama a playSong.&lt;/p&gt;
&lt;p&gt;Listo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 4 - Probar la Aplicación&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Si ejecuto la aplicación directamente (Click con el botón derecho en el proyecto Run as &amp;gt; Android Application), se muestra el mensaje definido para el caso de que no haya canciones &lt;em&gt;&amp;quot;No songs found&amp;quot;&lt;/em&gt;, y es correcto, hay que subir mp3s a la tarjeta SD.&lt;/p&gt;
&lt;p&gt;Este apartado del tutorial ya esta un poco desfasado, los emuladores ya se pueden crear con el AVD Manager de Eclipse con la tarjeta SD ya creada, con lo cual basta con enviar el mp3 al dispositivo usando el adb en la línea de comandos. El primer paso es tener arrancado el emulador.&lt;/p&gt;
&lt;p&gt;El segundo enviar el mp3 de prueba:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
~/Android/android-sdks/platform-tools$ ./adb push ~/Música/Noel\ Gallagher\&apos;s\ High\ Flying\ Birds\ -\ Noel\ Gallagher\&apos;s\ High\ Flying\ Birds\ \(Deluxe\ Version\)\ \[theLEAK\]/01.\ Everybody\&apos;s\ On\ The\ Run.mp3 /sdcard/Prueba.mp3

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, ya sale andando y tengo Prueba.mp3 en la lista de canciones.&lt;/p&gt;
&lt;p&gt;Ahora bien, si le doy a reproducir no se escucha nada, y en el LogCat se puede ver un Warning: &amp;quot;obtainBuffer timed out (is the CPU pegged?)&amp;quot;. Por lo visto este fallo lo produce el tener habilitados los snapshots en el emulador, así que nada, lo deshabilito y reinicio.&lt;/p&gt;
&lt;p&gt;Listo, ya reproduce el mp3, así que ahí lo dejo, mañana más y mejor.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Cambiar orientación del emulador de Android</title>
      <link>http://www.aguasnegras.es/blog/2012/02/23-Cambiar+orientaci%C3%B3n+del+emulador+de+Android.html</link>
      <pubDate>jue., 23 feb. 2012 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2012/02/23-Cambiar+orientaci%C3%B3n+del+emulador+de+Android.html</guid>
      	<description>
	&lt;p&gt;Para cambiar la orientación del emulador de android de horizontal a vertical y viceversa, basta con pulsar &lt;strong&gt;ctrl+F11.&lt;/strong&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Amazon Elastic Beanstalk</title>
      <link>http://www.aguasnegras.es/blog/2012/01/19-Amazon+Elastic+Beanstalk.html</link>
      <pubDate>jue., 19 ene. 2012 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2012/01/19-Amazon+Elastic+Beanstalk.html</guid>
      	<description>
	&lt;p&gt;Visto que con Heroku se me esta atragantando el tema del despliegue de JSF 2, me he decidido a seguir los cantos de sirena y probar Amazon Elastic Beanstalk. La publicidad dice que Amazon me dá gratuitamente un Tomcat 6 o Tomcat 7 en la nube, así que merecía darle una ojeada. Lo primero de lo que me doy cuenta es que &lt;a title=&quot;Amazon Elastic Beanstalk&quot; href=&quot;http://aws.amazon.com/es/elasticbeanstalk/&quot; target=&quot;_blank&quot;&gt;Amazon Elastic Beanstalk&lt;/a&gt; en realidad no es solo un Tomcat, sino que mas bien podríamos definirlo como un agrupamiento de tecnologías que Amazon ya tenía que se ofrecen simplificadamente y bajo un mismo paragüas, como EC2, S3, EBS, CloudWatch, etc... La página de Beanstalk promete que se despliegan WARs normales y corrientes y que se puede usar cualquier librería Java con normalidad, a esto le sumamos Amazon SimpleDB como base de datos relacional y Amazon DynamoDB como NoSQL y tenemos un stack potentísimo a nuestra disposición. Esta la parte buena, ahora la mala.&lt;/p&gt;
&lt;p&gt;La mala para empezar es que solo dan un año de &lt;a title=&quot;AWS Free Usage Tier&quot; href=&quot;http://aws.amazon.com/es/free/&quot; target=&quot;_blank&quot;&gt;uso gratuito&lt;/a&gt;. Pero no un año de tiempo de computación ni nada así, no. Un año de uso desde el momento del registro. Punto. Un poco rácano a mi parecer, preferiría que me limitasen más en recursos disponibles y no tener límite de tiempo, pero bueno.&lt;/p&gt;
&lt;p&gt;Para continuar la muy mala. La muy mala es que, por lo que te piden en el registro, parece que vivo en Libia o en Cuba o qué sé yo. Durante el proceso de registro hay que crear una cuenta, proporcionar una tarjeta de crédito (¿no es gratuito? Entiendo que la pidan por si me paso de recursos, pero quizás en ese caso sería preferible echar abajo el servicio oportuno hasta el mes siguiente) y te hacen una llamada telefónica para que confirme con un pin que aparece en la pantalla tu identidad. Lo dicho, un poco paranoide.&lt;/p&gt;
&lt;p&gt;Una vez habiendo pasado por todo este calvario, me decido a seguir el primer &lt;a title=&quot;Tutorial AWS&quot; href=&quot;http://aws.amazon.com/articles/4412341514662386&quot; target=&quot;_blank&quot;&gt;tutorial de ejemplo&lt;/a&gt; en Amazon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Resumen&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Instalar Eclipse 3.7 JEE y el plugin &lt;a title=&quot;AWS Toolkit&quot; href=&quot;http://aws.amazon.com/es/eclipse/&quot;&gt;AWS Toolkit&lt;/a&gt; para Eclipse.&lt;/li&gt;
	&lt;li&gt;Crear un proyecto y configurar la cuenta de AWS.&lt;/li&gt;
	&lt;li&gt;Análisis del proyecto.&lt;/li&gt;
	&lt;li&gt;Crear un servidor en Elastic Beanstalk y desplegar el proyecto.&lt;/li&gt;
	&lt;li&gt;Modificar el proyecto y redesplegar.&lt;/li&gt;
	&lt;li&gt;Parar el servidor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Paso 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Descargar el Eclipse for Java EE Developers en la versión oportuna (en mi caso, Linux 64 bits) de &lt;a title=&quot;Descarga de Eclipse&quot; href=&quot;http://www.eclipse.org/downloads/&quot;&gt;aquí&lt;/a&gt;. Cuando haya bajado basta con descomprimirlo y ejecutarlo.&lt;/p&gt;
&lt;p&gt;Para instalar el AWS Toolkit, una vez abierto el Eclipse, pulso Help &amp;gt; Install New Software ... &amp;gt; Add y en el diálogo Add Repository, en Name pongo &amp;quot;AWS&amp;quot; y en Location &amp;quot;&lt;a href=&quot;http://aws.amazon.com/eclipse&quot;&gt;http://aws.amazon.com/eclipse&lt;/a&gt;&amp;quot;, Ok. Selecciono el nuevo repositorio en el desplegable y ya abajo sale &amp;quot;AWS Toolkit for Eclipse&amp;quot;. Lo selecciono y Next, Next, acepto las licencias, acepto que se instale software sin firmar (sigh) y reinicio Eclipse una vez instalado.&lt;/p&gt;
&lt;p&gt;Entorno instalado, guay, sin mayor problema.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para crear un proyecto para desplegar en AWS, hago click en File &amp;gt; New &amp;gt; Other &amp;gt; AWS &amp;gt; AWS Java Web Project.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/1-Nuevo-Proyecto-AWS.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-384&quot; title=&quot;Nuevo Proyecto AWS&quot; src=&quot;/images/2012/01/1-Nuevo-Proyecto-AWS-300x244.png&quot; alt=&quot;Nuevo Proyecto AWS&quot; width=&quot;300&quot; height=&quot;244&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pulso Next. Para que un proyecto AWS sea desplegable necesita una información acerca de la cuenta del desarrollador, eso, junto con el nombre del proyecto es lo que tengo que configurar en esta pantalla. Como es la primera vez que entro, tengo que crear la cuenta, así que hago click en &amp;quot;Configure AWS Accounts&amp;quot; y veo la siguiente pantalla.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/2-AWS-Accounts.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-385&quot; title=&quot;Configurar cuenta de AWS&quot; src=&quot;/images/2012/01/2-AWS-Accounts-300x248.png&quot; alt=&quot;Configurar cuenta de AWS&quot; width=&quot;300&quot; height=&quot;248&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y ahí estan los datos de la cuenta, hay que ponerle un nombre de cuenta (meramente identificativo para el Eclipse), una clave de acceso y una clave secreta. Como no tengo ni idea de que es eso, hago click encima de &amp;quot;find your existing AWS security credentials&amp;quot; y una vez logado en la página de AWS veo una pantalla que haciendo scroll tiene esta pinta:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/3-Security-Credentials.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-386&quot; title=&quot;Credenciales de Seguridad&quot; src=&quot;/images/2012/01/3-Security-Credentials-300x163.png&quot; alt=&quot;Credenciales de Seguridad&quot; width=&quot;300&quot; height=&quot;163&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahí (en el borrón) esta la clave de acceso y si hago click en &amp;quot;mostrar&amp;quot; veo la clave secreta. Pues nada, copiar y pegar a la ventana del Eclipse. Hago click en Ok y en la pantalla de configuración del proyecto dejo seleccionado &amp;quot;Basic Java Web Application&amp;quot;. Finish.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El proyecto recién creado es un proyecto web dinámico normal de Eclipse.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/4-Proyecto-recién-creado.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-387&quot; title=&quot;Proyecto Java Web AWS&quot; src=&quot;/images/2012/01/4-Proyecto-recién-creado-300x163.png&quot; alt=&quot;Proyecto Java Web AWS&quot; width=&quot;300&quot; height=&quot;163&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tiene una carpeta src/ en la que se encuentran los fuentes de Java, de momento vacía, una carpeta webcontent en la que va el contenido web de la aplicación (jsp, html, css, js, png, gif, etc...) y dentro de ella, como es habitual, una carpeta WEB-INF con el web.xml dentro y un directorio lib (también vacío).&lt;/p&gt;
&lt;p&gt;El web.xml es absolutamente normal, y lo único destacable es que dentro de src/ se encuentra un archivo llamado &amp;quot;AWSCredentials.properties&amp;quot; que contiene... las credenciales en texto plano. Bueno, yo no es por ser destroyer, al fín y al cabo esa información solo es accesible para el desarrollador (es decir, yo mismo), pero tampoco cuesta trabajo cifrarlo con algún hash, por aquello de mejorar algo la seguridad. Sus motivos tendrán.&lt;/p&gt;
&lt;p&gt;De momento, el proyecto cumple lo prometido, Java Web normal y corriente. Ahora toca ver qué tal la ejecución.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para ejecutar el proyecto, hago click encima de él con el botón derecho y selecciono Run As &amp;gt; Run on Server... En esta pantalla dejo seleccionado &amp;quot;Manually define a new server&amp;quot; y selecciono un AWS Elastic Beanstalk for Tomcat 6. En &amp;quot;Server host name&amp;quot; escribo Tomcat6AWS y pulso Next.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/5-Run-on-Server.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-388&quot; title=&quot;Nuevo Tomcat 6 AWS&quot; src=&quot;/images/2012/01/5-Run-on-Server-253x300.png&quot; alt=&quot;Nuevo Tomcat 6 AWS&quot; width=&quot;253&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En la siguiente pantalla tengo que seleccionar para empezar una región en la que desplegar el proyecto. No sé si será un bug del plugin o que solo esta permitido ahí, pero solo me deja seleccionar US-East(Northern Virginia). Me hubiera gustado más seleccionar Europe(Ireland) por aquello del tiempo de latencia, pero bueno.&lt;/p&gt;
&lt;p&gt;Lo siguiente son conceptos ya propios de Amazon Elastic Beanstalk. Una aplicación (application) es un producto software (un WAR, vaya) con una configuración y una versión determinada, mientras que un entorno (environment) es una instancia determinada de esa aplicación.&lt;/p&gt;
&lt;p&gt;Pues vale, dejo marcado &amp;quot;Create a new application&amp;quot; y en Name pongo AWSJavaWeb. Para el Environment uso de nombre AWSJavaWeb igualmente.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/6-Application-y-Environment.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-390&quot; title=&quot;Application y Environment&quot; src=&quot;/images/2012/01/6-Application-y-Environment-247x300.png&quot; alt=&quot;Application y Environment&quot; width=&quot;247&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En la siguiente pantalla, Advanced Configuration, la verdad que no entiendo nada, parece que es algún sistema de autenticación (¿otro?), pero sigo el tutorial y selecciono &amp;quot;Deploy with a key pair&amp;quot; y le doy a Add (la cruz verde). Me sale un diálogo para introducir un nombre y un directorio, de nombre uso AWSJavaWeb y el directorio lo dejo tal y como esta. Pulso Ok y pulso Finish.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/7-Advanced-Configuration.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-392&quot; title=&quot;Advanced Configuration&quot; src=&quot;/images/2012/01/7-Advanced-Configuration-247x300.png&quot; alt=&quot;Advanced Configuration&quot; width=&quot;247&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pero todavía sale un cuadro de diálogo más... pidiéndome la versión de la aplicación, claro. Escribo v20120118.01 (primera versión, 18 de Enero de 2012).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/8-Environment-Version.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-394&quot; title=&quot;Versión de la Aplicación&quot; src=&quot;/images/2012/01/8-Environment-Version-300x115.png&quot; alt=&quot;Versión de la Aplicación&quot; width=&quot;300&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pulso OK y espero mientras el cuadro de diálogo me va informando. Entiendo que el proceso es generar un WAR, subirlo a Amazon S3, crear una instancia de Amazon EC2 con el Tomcat 6 y desplegarlo... nada más... Cuando acaba:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/9-Resultado.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-396&quot; title=&quot;Aplicación desplegada en Elastic Beanstalk&quot; src=&quot;/images/2012/01/9-Resultado-300x163.png&quot; alt=&quot;Aplicación desplegada en Elastic Beanstalk&quot; width=&quot;300&quot; height=&quot;163&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para ver como lleva esto los cambios, abro index.jsp y cambio el contenido de la etiqueta &amp;quot;title&amp;quot; a lo siguiente: Hello agustinventura AWS Java Web Application.&lt;/p&gt;
&lt;p&gt;Guardo los cambios, click con el botón derecho en el proyecto, Run As &amp;gt; Run on Server... Selecciono el servidor que ya he creado y hago click en Finish. Me vuelve a salir el cuadro de dialogo para la versión, esta vez escribo v20120118.02 y OK.&lt;/p&gt;
&lt;p&gt;Vuelvo a esperar (aunque menos) y...&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/10-Cambios.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-399&quot; title=&quot;Cambios Desplegados&quot; src=&quot;/images/2012/01/10-Cambios-300x163.png&quot; alt=&quot;Cambios Desplegados&quot; width=&quot;300&quot; height=&quot;163&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahí esta, cambios desplegados en producción.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para evitar que el servidor siga funcionando (y por tanto, me facturen), lo tengo qué parar. ¿Cómo? Pues en la pestaña Servers, lo selecciono y hago click en Stop (el botón rojo, o bien click con el botón derecho encima del servidor y Stop).&lt;/p&gt;
&lt;p&gt;Y aquí me llevo la primera decepción, aunque tampoco es muy importante, tras 10 minutos esperando, decido entrar en la &lt;a title=&quot;Consola de AWS&quot; href=&quot;https://console.aws.amazon.com/s3/home&quot; target=&quot;_blank&quot;&gt;consola de aws&lt;/a&gt; ya que me parece extraño. Entro, selecciono AWS Elastic Bean Stalk, la aplicación y al hacer click en Events, veo que ya se ha parado... hace 10 minutos. Vaya, que el plugin se ha quedado colgado, habrá que reportarlo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2012/01/11-Consola-AWS.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-400&quot; title=&quot;Consola AWS&quot; src=&quot;/images/2012/01/11-Consola-AWS-300x149.png&quot; alt=&quot;Consola AWS&quot; width=&quot;300&quot; height=&quot;149&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusiones&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Básicamente, y a falta de hacer algo más complejo, puedo dividir las conclusiones en pros y contras:&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Parece que el desarrollo es Java Web &quot;estándar&quot;.&lt;/li&gt;
	&lt;li&gt;El servidor de despliegue es un Tomcat (con todas sus cosas buenas y malas).&lt;/li&gt;
	&lt;li&gt;El plugin para Eclipse, todo un detalle.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Contras:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;El proceso de alta... creo que fue más fácil darme de alta en Paypal...&lt;/li&gt;
	&lt;li&gt;¿Solo un año de prueba?¿De verdad?&lt;/li&gt;
	&lt;li&gt;Los dos puntos anteriores me hacen concluir que el entorno es digamos... poco amistoso para desarrolladores aficionados, o porqué no, startups. En este sentido lleva ventaja Heroku.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El próximo paso que me gustaría dar es la prueba de fuego, a ver como se comporta para desplegar JSF 2 (que tengo atragantado en Heroku).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Sun Java y OpenJDK en Linux</title>
      <link>http://www.aguasnegras.es/blog/2011/11/11-Sun+Java+y+OpenJDK+en+Linux.html</link>
      <pubDate>vie., 11 nov. 2011 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2011/11/11-Sun+Java+y+OpenJDK+en+Linux.html</guid>
      	<description>
	&lt;p&gt;Para trabajar con Heroku, recomiendan usar OpenJDK, sin embargo, hasta el momento vengo usando el Sun JDK, así que voy a instalar el OpenJDK:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;$ sudo apt-get install openjdk-6-jdk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto se instala el OpenJDK 6, pero con un desafortunado efecto secundario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;$ java -version
java version &amp;quot;1.6.0_22&amp;quot;
OpenJDK Runtime Environment (IcedTea6 1.10.2) (6b22-1.10.2-0ubuntu1~11.04.1)
OpenJDK 64-Bit Server VM (build 20.0-b11, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Efectivamente, se ha establecido el OpenJDK como máquina virtual de Java por defecto, pero esto no es lo que quiero (al menos, yo no), me gustaría seguir usando el Sun JDK. Afortunadamente, qué JDK usar esta regido por el &lt;a title=&quot;Linux Alternatives System&quot; href=&quot;http://alternatives.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;Linux Alternatives System&lt;/a&gt;, que básicamente es un sistema para poder cambiar entre varias implementaciones de un mismo programa, y Ubuntu trae un programa que se llama update-java-alternatives que te sirve para cambiar, en mi caso ha sido:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ sudo update-java-alternatives -s java-6-sun

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listo, ahora ya:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ java -version
java version &amp;quot;1.6.0_26&amp;quot;
Java(TM) SE Runtime Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)

&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>Despliegue de Spring Roo en Heroku</title>
      <link>http://www.aguasnegras.es/blog/2011/10/13-Despliegue+de+Spring+Roo+en+Heroku.html</link>
      <pubDate>jue., 13 oct. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/10/13-Despliegue+de+Spring+Roo+en+Heroku.html</guid>
      	<description>
	&lt;p&gt;Hasta ahora, las aplicaciones que he desplegado eran muy básicas, hechas con jsp y acceso a base de datos a base de jdbc plano.&lt;/p&gt;
&lt;p&gt;Estas tecnologías no estan mal (y de hecho son la base de todo lo posterior), pero lo más normal es utilizar frameworks para el desarrollo de aplicaciones Java.&lt;/p&gt;
&lt;p&gt;La quinta práctica del libro de Java para Heroku es un despliegue de aplicaciones hechas con &lt;a title=&quot;Spring Roo&quot; href=&quot;http://www.springsource.org/roo&quot; target=&quot;_blank&quot;&gt;Spring Roo&lt;/a&gt; en Heroku. Spring Roo es un framework que viene a ser como Rails para Ruby. Simplifica el desarrollo con funciones tan básicas como crear el toString o el equals automáticamente o tan avanzadas como generar el CRUD de una base de datos directamente.&lt;/p&gt;
&lt;p&gt;Así que con esta práctica voy a matar dos pájaros de un tiro, voy a probar Spring Roo y voy a desplegar un artefacto más complejo en Heroku. A ello.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instalación de Spring Roo&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lo primero es descargar el framework de &lt;a title=&quot;Descarga de Spring Roo en SpringSource&quot; href=&quot;http://www.springsource.com/download/community&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;. Después sigo las &lt;a title=&quot;Instalación de Spring Roo&quot; href=&quot;http://static.springsource.org/spring-roo/reference/html/intro.html#intro-installation&quot; target=&quot;_blank&quot;&gt;instrucciones de instalación&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Descomprimir el archivo, en mi caso en $HOME/Java/spring-roo-1.1.5.RELEASE&lt;/li&gt;
	&lt;li&gt;Crear enlace simbólico: sudo ln -s /home/case/Java/spring-roo-1.1.5.RELEASE/bin/roo.sh /usr/bin/roo&lt;/li&gt;
	&lt;li&gt;Probar que funciona:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;cd Java/spring-roo-1.1.5.RELEASE/
mkdir roo-test
roo quit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si todo ha ido bien, debe haber salido Roo así en &lt;a title=&quot;ASCII Art en la Wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/ASCII_art&quot; target=&quot;_blank&quot;&gt;ASCII art&lt;/a&gt; monísimo. Ya esta instalado Spring Roo y puedo borrar roo-test, hala a retomar el tema.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quinta Práctica&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El objetivo de esta práctica es más bien sencillo, se va a usar Spring Roo para crear un ejemplo clásico, el Pet Clinic y se va a preparar esta aplicación creada con Roo para desplegar en Heroku.&lt;/p&gt;
&lt;p&gt;Pasos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Crear la aplicación con Roo.&lt;/li&gt;
	&lt;li&gt;Preparar el pom.xml añadiendo las dependencias adecuadas y la configuración correcta para su despliegue en Heroku.&lt;/li&gt;
	&lt;li&gt;Crear una clase que arranque Jetty (el servidor integrado).&lt;/li&gt;
	&lt;li&gt;Configurar la base de datos PostgreSQL en la aplicación.&lt;/li&gt;
	&lt;li&gt;Probar la aplicación en local.&lt;/li&gt;
	&lt;li&gt;Desplegar en Heroku.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Paso 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Crear la aplicación es más bien sencillo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;cd Heroku
mkdir petclinic
cd petclinic
roo script --file clinic.roo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Me escupe un montón de logs por la consola y en teoría, listo. Examinando un poco la aplicación, pues nada, es una aplicación Java que sigue la estructura de Maven, con su pom.xml y nada, todo perfecto, sus entidades, sus controladores... su páginas web, tiene pinta de estar hecho con Spring MVC... vale, al lío.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En este paso, lo primero es añadir Jetty y PostgreSQL al pom.xml:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;org.eclipse.jetty&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;jetty-webapp&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;7.4.4.v20110707&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;org.mortbay.jetty&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;jsp-2.1-glassfish&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;2.1.v20100127&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;
	&amp;lt;dependency&amp;gt;
		&amp;lt;groupId&amp;gt;postgresql&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;9.0-801.jdbc4&amp;lt;/version&amp;gt;
	&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora cambio el scope de servlet-api de provided a compile. Si se usa Tomcat, Tomcat incluye la librería servlet.jar (la API de Servlet), pero Jetty no, así que hay que descargarla. Hay que cambiar igual el scope de org.springframework.roo.annotations, si la ejecuto en local con Roo, estará la librería de anotaciones de Roo, pero claro, en Heroku no esta.&lt;/p&gt;
&lt;p&gt;Siguiente paso, añadir el plugin appassembler para que genere el script con el que arrancar la aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;

&amp;lt;plugin&amp;gt;
			&amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;appassembler-maven-plugin&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt;
			&amp;lt;executions&amp;gt;
				&amp;lt;execution&amp;gt;

&amp;lt;phase&amp;gt;package&amp;lt;/phase&amp;gt;
					&amp;lt;goals&amp;gt;&amp;lt;goal&amp;gt;assemble&amp;lt;/goal&amp;gt;&amp;lt;/goals&amp;gt;
					&amp;lt;configuration&amp;gt;
						&amp;lt;assembleDirectory&amp;gt;target&amp;lt;/assembleDirectory&amp;gt;
						&amp;lt;extraJvmArguments&amp;gt;-Xmx512m&amp;lt;/extraJvmArguments&amp;gt;

&amp;lt;programs&amp;gt;

&amp;lt;program&amp;gt;
								&amp;lt;mainClass&amp;gt;com.springsource.petclinic.PetclinicMain&amp;lt;/mainClass&amp;gt;
								&amp;lt;name&amp;gt;webapp&amp;lt;/name&amp;gt;
							&amp;lt;/program&amp;gt;
						&amp;lt;/programs&amp;gt;
					&amp;lt;/configuration&amp;gt;
				&amp;lt;/execution&amp;gt;
			&amp;lt;/executions&amp;gt;
		&amp;lt;/plugin&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y por último, hay que quitar la línea de packaging para que genere un jar en vez de un war, listo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ahora hay que crear la clase Main.java en src/main/java, exactamente igual que la que puse en la primera práctica, tampoco tiene más historia.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para configurar la aplicación para que use PostgreSQL hay que tocar el applicationContext.xml, que es el archivo de configuración de Spring. Se encuentra en src/main/resources/META-INF/spring. Aquí, hay que cambiar las propiedades username, password y url por tan solo url de la siguiente manera:&lt;/p&gt;
&lt;p&gt;Que es el parseo para la cadena de conexión a PostgreSQL que ya ví. En el applicationContext.xml veo que el driver de conexión a la base de datos está parametrizado, así que tengo que cambiarlo, en el mismo directorio esta un archivo database.properties en el que esta la propiedad que me interesa, database.driverClassName, lo dejo así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;database.driverClassName=org.postgresql.Driver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, en el persistence.xml (que esta en src/main/resources/META-INF), hay que cambiar el valor del hibernate.dialect, a org.hibernate.dialect.PostgreSQLDialect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Todo listo, ahora toca probar en local:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;export REPO=~/.m2/repository/
export DATABASE_URL=postgres://helloheroku:helloheroku@localhost/helloheroku
mvn install
sh target/bin/webapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listo, entro en &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt; y ahí esta el PetClinic con Spring Roo y contra PostgreSQL. Genial&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para el despliegue de la aplicación en Heroku, primero hay que crear el Procfile con la definición de la actividad web:&lt;/p&gt;
&lt;p&gt;gedit Procfile&lt;/p&gt;
&lt;p&gt;Y añado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
web:sh target/bin/webapp

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo añado todo a un repositorio de git, creo el entorno de Heroku, lo subo todo a Heroku y GitHub y abro la aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git init

git add pom.xml Procfile src/

heroku create --stack cedar

git push github master

git push heroku master

heroku open


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, funcionando!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Código en GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/agustinventura/Petclinic-con-Spring-Roo-en-Heroku&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-255&quot; title=&quot;GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusiones&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Este ejemplo es, de lejos, el más interesante, ya que demuestra tres cosas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Que Heroku parece ser capaz de trabajar sin problemas con los frameworks mayoritarios de Java.&lt;/li&gt;
	&lt;li&gt;Que realmente, los frameworks de Java son tremendamente potentes si se sabe como usarlos, aportando una gran flexibilidad.&lt;/li&gt;
	&lt;li&gt;Y por último, creo que mi primera impresión estaba justificada. Tenemos un entorno capaz de acercar el mundo Java EE a la mayoría de desarrolladores... con todo lo que ello implica. Ahora es cosa nuestra aprovecharlo o no.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y con esto, he terminado con Heroku de momento, me sigue quedando pendiente clarificar el tema de dynos, bds, etc... A ver si me pongo...&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Add-ons para Heroku</title>
      <link>http://www.aguasnegras.es/blog/2011/09/22-Add-ons+para+Heroku.html</link>
      <pubDate>jue., 22 sept. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/09/22-Add-ons+para+Heroku.html</guid>
      	<description>
	&lt;p&gt;La arquitectura de Heroku es modular, es decir, se pueden añadir funcionalidades al Stack mediante piezas de software llamadas add-ons. Un ejemplo de eso lo vi &lt;a title=&quot;Java en Heroku&quot; href=&quot;http://www.aguasnegras.es/blog/?p=263&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt; cuando añadí el soporte para gestión de releases a través de un add-on.&lt;/p&gt;
&lt;p&gt;Hay &lt;a title=&quot;Add-ons de Heroku&quot; href=&quot;http://addons.heroku.com/&quot; target=&quot;_blank&quot;&gt;bastantes más add-ons&lt;/a&gt; disponibles en la página, para enviar sms, para conectar como amazon rds, etc... Los hay gratuitos, de pago, en beta... en fín, de todo tipo.&lt;/p&gt;
&lt;p&gt;En esta práctica voy a añadir el add-on de &lt;a title=&quot;Redis en la Wikipedia (inglés)&quot; href=&quot;http://en.wikipedia.org/wiki/Redis_(data_store)&quot; target=&quot;_blank&quot;&gt;Redis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instalación de Redis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pues por fín una instalación de un solo paso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sudo apt-get install redis-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez instalado, para verificar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;redis-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y debe responder una bonita consola de la que salgo con Ctrl-C.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cuarta Práctica&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dado que Redis es un almacén del tipo clave - valor (key-value), se da bastante bien para hacer cachés, lo que haré será configurar Redis como un almacenamiento que expire cada 30 segundos, es decir que solo se leerá de la base de datos realmente cada 30 segundos, el resto de las veces se impactará contra Redis. Esto es muy burdo, claro, pero sirve para hacer una demo.&lt;/p&gt;
&lt;p&gt;Pasos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Configurar la aplicación para usar Redis.&lt;/li&gt;
	&lt;li&gt;Actualizar TickDAO para que use Redis.&lt;/li&gt;
	&lt;li&gt;Probar la aplicación en local.&lt;/li&gt;
	&lt;li&gt;Desplegar en Heroku.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Paso 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Esta parte es tan sencilla como añadir al pom.xml esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;dependency&amp;gt;
         &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;
         &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;
         &amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Paso 2&lt;/strong&gt;&lt;br /&gt;
En este paso se modifica TickDAO para primero intente leer los ticks de Redis y si no vaya a la base de datos.&lt;br /&gt;
En primer lugar añado como variables estáticas un pool de conexiones a Redis (jedisPool) y la clave de los ticks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
private static JedisPool jedisPool;
private static final String TICKCOUNT_KEY = &amp;quot;tickcount&amp;quot;;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación, en el bloque de código static en el que inicializo PostgreSQL, aprovecho y cargo también el pool de Redis, solo resalto que la URL de Redis se lee de una variable de entorno llamada REDISTOGO_URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
//Inicialización de Redis
Pattern REDIS_URL_PATTERN = Pattern.compile(&amp;quot;^redis://([^:]*):([^@]*)@([^:]*):([^/]*)(/)?&amp;quot;);
Matcher matcher = REDIS_URL_PATTERN.matcher(System.getenv(&amp;quot;REDISTOGO_URL&amp;quot;));
matcher.matches();
Config config = new Config();
config.testOnBorrow = true;
jedisPool = new JedisPool(config, matcher.group(3),
Integer.parseInt(matcher.group(4)), Protocol.DEFAULT_TIMEOUT, matcher.group(2));

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, el getTickCount() queda así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public int getTickCount() throws SQLException {
		Jedis jedis = jedisPool.getResource();
		int tickcount = 0;
		String tickcountValue = jedis.get(TICKCOUNT_KEY);
		if (tickcountValue != null) {
			System.out.println(&amp;quot;read from redis cache&amp;quot;);
			tickcount = Integer.parseInt(tickcountValue);
		} else {
			tickcount = getTickcountFromDb();
			jedis.setex(TICKCOUNT_KEY, 30, String.valueOf(tickcount));
		}
		jedisPool.returnResource(jedis);
		return tickcount;
	}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es decir, cuando se va a hacer una lectura, primero se hace desde Redis, si el valor no existe (es null) se lee de base de datos y se inserta en Redis.&lt;br /&gt;
A probar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3&lt;/strong&gt;&lt;br /&gt;
Aquí vendría todo el mvn install, etc, pero antes, como  ya estoy harto de andar exportando las variables de entorno cada vez que voy a hacer algo en local, voy a hacer dos cosas.&lt;br /&gt;
Primero, voy a crear un exportarVariables.sh que exportar tanto REPO, como POSTGRESQL_URL como REDISTOGO_URL.&lt;br /&gt;
Así que:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
gedit exportarVariables.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y pongo lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
export REPO=~/.m2/repository
export DATABASE_URL=postgres://helloheroku:helloheroku@localhost/helloheroku
export REDISTOGO_URL=redis://:@localhost:6379/

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora hago el script ejecutable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
chmod 777 exportarVariables.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y como segundo paso, ya que este archivo solo es aplicable en local, lo añado al .gitignore. Hala, listo, ahora sí que sigo de la manera habitual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
mvn install
. ./exportarVariables.sh
sh target/bin/webapp

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahí esta, si entro en localhost:8080/ticks.jsp, veré que siempre muestra los mismos ticks... hasta que pasan 30 segundos, que actualiza la cuenta con el número de veces que haya recargado la página. Es decir, se esta escribiendo en base de datos, pero no se esta leyendo. Hasta pasados 30 segundos, claro.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 4&lt;/strong&gt;&lt;br /&gt;
Vale, pues para desplegar, primero tengo que añadir el add-on de Redis al Stack de esta aplicación en Heroku:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
heroku addons:add redistogo:nano
-----&amp;gt; Adding redistogo:nano to fierce-autumn-4530... done, v11 (free)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Correcto, ahora basta con dar los pasos habituales:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git add .
git commit -m &amp;quot;añadido Redis para caché de lectura&amp;quot;
git push github master
git push heroku  master

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listo, con esto ya hago un heroku open y abro ticks.jsp, puedo ver que el comportamiento es exactamente igual que cuando ejecuto en local.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Código en GitHub&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/agustinventura/helloheroku/tree/b8c1b4a76276beae93be5d2f56ae28d78d94c78c&quot;&gt;&lt;img src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;GitHub&quot; title=&quot;GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; class=&quot;aligncenter size-full wp-image-255&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusiones&lt;/strong&gt;&lt;br /&gt;
Añadir add-ons a Heroku es trivial, en general consiste en bajar la librería que proporciona la api y listo (teniendo instalado el servicio en local, claro).&lt;br /&gt;
También es interesante que si escalo el proceso tick a un par de dynos, siguen impactando contra Redis, es decir, no levantan su propia instancia de Redis, realmente esta funcionando como una caché en RAM.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Procesos Java en Heroku</title>
      <link>http://www.aguasnegras.es/blog/2011/09/22-Procesos+Java+en+Heroku.html</link>
      <pubDate>jue., 22 sept. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/09/22-Procesos+Java+en+Heroku.html</guid>
      	<description>
	&lt;p&gt;Heroku no solo sirve para ejecutar aplicaciones web Java, sino que en realidad sirve para ejecutar cualquier tipo de aplicación Java. Observando el proyecto podemos ver que hay dos aplicaciones bien diferenciadas, la aplicación web (que se lanza a través del script webapp generado por Maven) y la aplicación SchemaGenerator, ejecutada a través del script schemaGenerator. Mientras que la primera es una aplicación web normal y corriente, SchemaGenerator es simplemente un proceso Java puro, se lanza se ejecuta y termina sin ningún tipo de interfaz gráfica involucrada.&lt;/p&gt;
&lt;p&gt;A este tipo de proceso en Heroku le llaman &amp;quot;worker process&amp;quot;, podría traducirlo de cualquier manera, pero paso, así que se queda como proceso worker, hala.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tercer Práctica&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El objetivo de esta práctica es desarrollar una aplicación que inserte un tick en la base de datos cada segundo. Se podrá visualizar refrescando la misma página ticks.jsp y posteriormente la escalaré a dos dynos.&lt;/p&gt;
&lt;p&gt;Pasos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Crear la clase Ticker.java que insertará un tick en la base de datos cada segundo.&lt;/li&gt;
	&lt;li&gt;Probar la aplicación en local.&lt;/li&gt;
	&lt;li&gt;Desplegar la aplicación en Heroku, escalarla a dos dynos y detenerla.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Paso 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creo la clase Ticker.java, el código es trivial, con un while(true) y un sleep(1000), de todas formas queda en GitHub.&lt;/p&gt;
&lt;p&gt;Se declara el programa en el pom.xml para generar el script que lo lanza:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
	es.aguasnegras.helloheroku.Ticker
	ticker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Paso 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se instala en local y se ejecuta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;mvn install
export REPO=~/.m2/repository
export DATABASE_URL=postgres://helloheroku:helloheroku@localhost/helloheroku
sh target/bin/ticker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en otra consola:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;export REPO=~/.m2/repository
export DATABASE_URL=postgres://helloheroku:helloheroku@localhost/helloheroku
sh target/bin/ticker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora puedo comprobar en localhost:8080/ticks.jsp que efectivamente, se van actualizando los ticks independientemente de la aplicación.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3&lt;/strong&gt;&lt;br /&gt;
Vale, ahora a desplegarla en Heroku. Para poder ejecutar el proceso en Heroku en su propio dyno, hay que declararla en el Procfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;tick: sh target/bin/ticker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listo, añado a git y subo a GitHub y Heroku:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;git add .
git commit -m &amp;quot;añadido proceso worker&amp;quot;
git push github master
git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si abro &lt;a href=&quot;http://fierce-autumn-4530.herokuapp.com/ticks.jsp&quot;&gt;http://fierce-autumn-4530.herokuapp.com/ticks.jsp&lt;/a&gt; puedo ver que todo sigue igual, cada vez que recargo la página se añade un tick a la base de datos. Voy a arrancar el worker:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku scale tick=2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si hago un heroku ps me confirma que se han arrancado dos procesos, y es más, un heroku logs -t va refrescando la salida con dos ticks cada segundo, uno tick.1 y otro tick.2.&lt;br /&gt;
Además el jsp me confirma que se han ido insertando en la base de datos.&lt;br /&gt;
Bueno, pues ya esta. A poner el código en GitHub&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Código en GitHub&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/agustinventura/helloheroku/tree/1429c05b2a83745dfda1d1f08145f7954d9922d0&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-255&quot; title=&quot;GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusiones&lt;/strong&gt;&lt;br /&gt;
Bueno, pues ya he visto como se ejecuta un proceso demonio y he trasteado un poco el Procfile, que es otro fleco que convendría investigar un poco, a ver que más cosas se pueden hacer.&lt;br /&gt;
Es curioso que el proceso se lanza mediante un scale y no un heroku run, supongo que podría igualmente con el heroku run... a ver. Efectivamente, se puede ejecutar igualmente con un heroku run, la diferencia es que no se puede escalar, claro.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Java, PostgreSQL y Heroku</title>
      <link>http://www.aguasnegras.es/blog/2011/09/18-Java%2C+PostgreSQL+y+Heroku.html</link>
      <pubDate>dom., 18 sept. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/09/18-Java%2C+PostgreSQL+y+Heroku.html</guid>
      	<description>
	&lt;p&gt;Ya he visto como desplegar en Heroku, pero lo que he desplegado no llega ni al nivel de aplicación web, en realidad es una página web estática y punto. Para poder considerarla aplicación web ha de tener algún tipo de contenido dinámico, normalmente este contenido se genera de algún almacén persistente, usualmente una base de datos.&lt;br /&gt;
Por tanto voy a ver como me las apaño para poner una base de datos en Heroku y atacarla desde mi aplicación. En realidad en la primera práctica, el comentado &amp;quot;heroku config&amp;quot; me daba alguna pista, supongo que usaré una base de datos &lt;a title=&quot;PostgreSQL en Wikipedia&quot; href=&quot;http://es.wikipedia.org/wiki/PostgreSQL&quot; target=&quot;_blank&quot;&gt;PostgreSQL&lt;/a&gt; alojada en &lt;a title=&quot;Amazon Web Services&quot; href=&quot;http://aws.amazon.com/es/&quot; target=&quot;_blank&quot;&gt;AmazonWeb Services&lt;/a&gt;, vamos a ver si es así, pero antes...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instalación de PostgreSQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para poder desarrollar y desplegar en local hará falta una instancia de PostgreSQL. Afortunadamente la instalación en debian/ubuntu/mint es tan sencilla como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sudo apt-get install postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PostgreSQL es un metapaquete que contiene varias utilidades, el servidor (versión 8.4), el cliente (versión 8.4) y sus dependencias.&lt;/p&gt;
&lt;p&gt;Para no liarme voy a seguir el &lt;a title=&quot;Heroku for Java Workbook&quot; href=&quot;https://github.com/heroku/java-workbook&quot; target=&quot;_blank&quot;&gt;Heroku for Java Workbook&lt;/a&gt; a la hora de configurar el PostgreSQL.&lt;/p&gt;
&lt;p&gt;Lo primero es crear un usuario de PostgreSQL con privilegios de superusuario. En el libro lo llaman foo, pero como a mí no me gusta un nombre tan genérico lo voy a llamar helloheroku... mucho mejor, no veas... :P&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sudo -u postgres createuser -P helloheroku
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como viene siendo habitual, ahora hay que contestar una serie de preguntas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Contraseña: helloheroku&lt;/li&gt;
	&lt;li&gt;Repetir la contraseña: pues eso&lt;/li&gt;
	&lt;li&gt;¿Es superusuario?: s&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Creo la base de datos como tal. Será una base de datos en localhost, se llamará helloheroku y la creará el usuario helloheroku:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;createdb -U helloheroku -W -h localhost helloheroku
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De contraseña, helloheroku. Y pruebo la conexión:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;psql -U helloheroku -W -h localhost helloheroku
Contraseña para usuario helloheroku:
psql (8.4.8)
conexión SSL (cifrado: DHE-RSA-AES256-SHA, bits: 256)
Digite «help» para obtener ayuda.

helloheroku=# \q
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De propina, como trabajar con una base de datos en modo CLI es un poco... árido, voy a instalar &lt;a title=&quot;pgAdmin&quot; href=&quot;http://www.pgadmin.org/&quot; target=&quot;_blank&quot;&gt;pgAdmin&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sudo apt-get install pgadmin3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, ahora sí, práctica dos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Segunda Práctica&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El objetivo de esta práctica es crear una página web que guarde el número de veces que es cargada. Así de fácil.&lt;/p&gt;
&lt;p&gt;Para ello se usará una tabla de base de datos que guardará un timestamp. Se creará también una página en JSP que cada vez que se cargue, almacenará un nuevo timestamp (llamado tick), en la base de datos y mostrará el número de ticks que hay en total.&lt;/p&gt;
&lt;p&gt;Esta solución se puede hacer tan fácil o compleja como se quiera. Pero en un alarde de sentido común, el cuaderno de trabajo propone hacerlo en JSP y JDBC plano, sin más historias. Es muy interesante el comentario de que Heroku es compatible con Hibernate o JPA.&lt;/p&gt;
&lt;p&gt;En resumen, estos son los pasos que se darán:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Configurar la aplicación web del tutorial anterior para usar PostgreSQL.&lt;/li&gt;
	&lt;li&gt;Crear el DAO en Java (la clase que se encargará de acceder a la base de datos).&lt;/li&gt;
	&lt;li&gt;Crear la página JSP que al cargarse inserte un tick en la base de datos y muestre los que hay.&lt;/li&gt;
	&lt;li&gt;Crear una clase que se ejecutará al ser desplegada la aplicación y que creará el esquema de base de datos.&lt;/li&gt;
	&lt;li&gt;Probar en local.&lt;/li&gt;
	&lt;li&gt;Desplegar en Heroku.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hay que reconocer que el paso cuatro es un poco raro, lo más normal sería ejecutar previamente las operaciones que sean sobre la base de datos por separado, pero vamos a ello.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para añadir el soporte de PostgreSQL basta con añadir la dependencia al pom.xml:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;!-- PostgreSQL --&amp;gt;
&amp;lt;dependency&amp;gt;
	&amp;lt;groupId&amp;gt;postgresql&amp;lt;/groupId&amp;gt;
	&amp;lt;artifactId&amp;gt;postgresql&amp;lt;/artifactId&amp;gt;
	&amp;lt;version&amp;gt;9.0-801.jdbc4&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, ahora se puede crear el DAO.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No voy a copiar la clase DAO ya que es bastante convencional, basta con copiarla y pegarla en un archivo llamado TickDAO.java en el mismo directorio que el Main.java (no debiera ser así pero tampoco me voy a poner exquisito para una prueba de concepto). Sin embargo si que voy a comentar las cosas que me vayan llamando la atención.&lt;/p&gt;
&lt;p&gt;Lo primero es que no se crea ningún tipo de pool de conexiones ni nada, lo único que hay es un bloque de código estático que lee la url de la base de datos de la variable de entorno del dyno &amp;quot;DATABASE_URL&amp;quot; y la parsea para adaptarla a lo que espera jdbc, guardándola después en una variable estática.&lt;/p&gt;
&lt;p&gt;La conexión se abre y se cierra en cada uno de los tres métodos que acceden a la base de datos, que son para insertar un tick nuevo, para leer cuantos ticks hay y para crear la base de datos (supongo que este método se llamará desde la clase que se ejecuta para crear el esquema de la base de datos).&lt;/p&gt;
&lt;p&gt;También es interesante ver que no se hace ningún tipo de tratamiento de errores, aparte de un finally para cerrar la conexión. Las excepciones simplemente se relanzan para arriba.&lt;/p&gt;
&lt;p&gt;Asímismo no hay ningún framework de gestión de logs, se usa System.out. Ya en la práctica anterior, en la sección de logs decía que el comando &amp;quot;heroku logs&amp;quot; funcionaba sobre System.out y System.err, aún así molaría tener algún tipo de framework para poder gestionar más fácilmente los logs y activar y desactivar declarativamente los de debug, por ejemplo. Supongo que no será muy complicado de integrar (en realidad espero que sea inmediato).&lt;/p&gt;
&lt;p&gt;Nada más que comentar, la clase no es ninguna maravilla, pero funcionará y es para lo que es.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El jsp lo pongo directamente en src/main/webapp, y se llama ticks.jsp. No tiene nada de particular, son dos scriptlets JSP.&lt;/p&gt;
&lt;p&gt;El primero instancia un TickDAO y llama a la función insertTick.&lt;/p&gt;
&lt;p&gt;El segundo llama a la función getTickCount y listo.&lt;/p&gt;
&lt;p&gt;Me hace gracia que comentan que es importante saber que el acceso a base de datos no esta transaccionado y por tanto dos usuarios concurrentes podrían tener problemas de lecturas no consistentes. En fín, nunca es tarde para inculcar buenas prácticas, supongo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;En este paso en general se añadirán los mecanismos para hacer que la base de datos exista al ejecutar la aplicación.&lt;/p&gt;
&lt;p&gt;En primer lugar, creo una clase SchemaCreator.java en src/es/aguasnegras/helloheroku que simplemente instancia un TickDAO y llama a su función createTable().&lt;/p&gt;
&lt;p&gt;Después añado al pom.xml lo siguiente en la sección programs del plugin appassembler-maven-plugin como primer elemento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;

&amp;lt;program&amp;gt;
	&amp;lt;mainClass&amp;gt;es.aguasnegras.helloheroku.SchemaCreator&amp;lt;/mainClass&amp;gt;
	&amp;lt;name&amp;gt;schemaCreator&amp;lt;/name&amp;gt;
&amp;lt;/program&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta manera consigo que cuando se ejecuta Maven sobre el proyecto, se generan scripts (tanto de shell como .bat) que me permiten lanzar tanto la clase SchemaCreator como Main.&lt;/p&gt;
&lt;p&gt;Me surge una duda... efectivamente, el createTable() hace un &amp;quot;drop table if exists&amp;quot;, así que cada vez que se ejecute el script, se creará la base de datos desde cero. Tampoco es que me importe, vaya.&lt;/p&gt;
&lt;p&gt;Bueno, pues ya esta, ahora habrá que probarlo en local, digo yo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para probar la aplicación, hay que exportar la variable de entorno DATABASE_URL:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;export DATABASE_URL=postgres://helloheroku:helloheroku@localhost/helloheroku
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No hay que olvidar exportar también la variable REPO:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;export REPO=~/.m2/repository
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora hay que ejecutar el script que crea la base de datos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sh target/bin/schemaCreator
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y por último, se lanza la aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;sh target/bin/webapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si todo ha ido bien, al abrir en el navegador, &lt;a href=&quot;http://localhost:8080/ticks.jsp&quot;&gt;http://localhost:8080/ticks.jsp&lt;/a&gt;, debería ver 1 Ticks... efectivamente, conforme le voy dando a recargar me va aumentando secuencialmente. Hala, pos yasta, ahora a subir a Heroku.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Los pasos, son los de siempre, añadir a git y enviar a heroku (en mi caso, también a GitHub):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;git add .
git commit -m &amp;quot;Añadida interacción con base de datos PostgreSQL como ejemplo&amp;quot;
git push github master
git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta última línea lanza Maven sobre el proyecto como ya se vió y lo compila correctamente.&lt;/p&gt;
&lt;p&gt;Para lanzar el proceso schemaCreator, heroku me permite lanzar comandos remotos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku run &amp;quot;sh target/bin/schemaCreator&amp;quot;
Running sh target/bin/schemaCreator attached to terminal... up, run.1
the jdbc connection string is: jdbc:postgresql://ec2-107-20-227-173.compute-1.amazonaws.com/...?user=...&amp;amp;amp;password=...
Creating ticks table.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Abro &lt;a href=&quot;http://fierce-autumn-4530.herokuapp.com/ticks.jsp&quot;&gt;http://fierce-autumn-4530.herokuapp.com/ticks.jsp&lt;/a&gt; en el navegador... et voilà, andando.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Código en GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/agustinventura/helloheroku/tree/8e64800881682f1d848a37f9f625f8f0bae21beb&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-255&quot; title=&quot;GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;Conclusiones&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heroku soporta una base de datos plenamente madura, como es PostgreSQL y con un esfuerzo mínimo, de hecho, hay que invertir más tiempo en configurarla en local que en remoto.&lt;/p&gt;
&lt;p&gt;De nuevo las dudas que me surgen son administrativas, ¿cuánto espacio tengo de tablespace? ¿Y de conexiones concurrentes? etc...&lt;/p&gt;
&lt;p&gt;Quedaría también pendiente usar alguna tecnología más sofísticada para conectar a base de datos, usando algún tipo de pooling de conexiones, pero no me parece complicado para nada.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Java en Heroku</title>
      <link>http://www.aguasnegras.es/blog/2011/09/16-Java+en+Heroku.html</link>
      <pubDate>vie., 16 sept. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/09/16-Java+en+Heroku.html</guid>
      	<description>
	&lt;p&gt;Una de las cosas que más me impresionó de Ruby on Rails, más que el framework en sí o el lenguaje, fue el excelente soporte que había creado la comunidad. Hablo específicamente de como se enlazaba tu proyecto local con GitHub y GitHub con Heroku, con lo cual podías tener el proyecto en producción en cuestión de minutos.&lt;/p&gt;
&lt;p&gt;Esto es algo que lamentablemente no he visto en Java en los cinco años que llevo dedicado a estos menesteres, y menos con un alojamiento de la categoría de Heroku (otro día hablaré sobre ello y el PaaS, etc...). Pues bien, el pasado 25 de Agosto, &lt;a title=&quot;Soporte de Java en Heroku&quot; href=&quot;http://blog.heroku.com/archives/2011/08/25/java/&quot; target=&quot;_blank&quot;&gt;Heroku añadió soporte para Java&lt;/a&gt;. Este paso me parece crucial. Desde mi punto de vista, la gran fortaleza de PHP, RoR, etc... viene de la comunidad, es un lenguaje &amp;quot;accesible&amp;quot; a cualquiera, basta con comparar los hostings existentes para PHP y los existentes para Java. Hay otras plataformas para Java, por ejemplo, &lt;a title=&quot;Google App Engine&quot; href=&quot;http://code.google.com/intl/es-ES/appengine/&quot; target=&quot;_blank&quot;&gt;Google App Engine&lt;/a&gt;, pero desde mi punto de vista son mucho más restrictivas que Heroku. Como de todas formas esto es solo una impresión, he decidido seguir el &lt;a title=&quot;Heroku For Java Workbook&quot; href=&quot;https://github.com/heroku/java-workbook&quot; target=&quot;_blank&quot;&gt;Heroku For Java Workbook&lt;/a&gt; a ver qué tal resulta :)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requisitos&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Cuenta en GitHub.&lt;/li&gt;
	&lt;li&gt;Cuenta en Heroku.&lt;/li&gt;
	&lt;li&gt;Tener instalado &lt;a title=&quot;Git, EGit y GitHub.&quot; href=&quot;http://www.aguasnegras.es/?p=201&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Instalación de las herramientas de línea de comando de Heroku (heroku)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lo primero es instalar las herramientas de linea de comando de Heroku, llamadas heroku (sin mayúscula), estas a su vez tienen otros requisitos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Instalar Ruby (apt-get install ruby).&lt;/li&gt;
	&lt;li&gt;Instalar RubyGems (se descarga de &lt;a title=&quot;RubyGems&quot; href=&quot;http://rubygems.org/pages/download&quot; target=&quot;_blank&quot;&gt;RubyGems.org&lt;/a&gt; y se ejecuta sudo ruby setup.rb)&lt;/li&gt;
	&lt;li&gt;Se instala el cliente en sí: sudo gem install heroku.&lt;/li&gt;
	&lt;li&gt;Para verificar si todo ha ido bien, el comando &lt;em&gt;heroku version&lt;/em&gt; debe devolver algo como &lt;em&gt;heroku-gem/2.6.1&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El siguiente paso es añadir nuestra clave SSH pública a Heroku, primero se hace login: heroku auth:login, e introducimos nuestro email y contraseña.&lt;/p&gt;
&lt;p&gt;A continuación basta con hacer heroku keys:add y listo, añadida nuestra clave SSH.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instalación de Maven&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;La instalación de Maven viene descrita en su misma página de descarga de manera bastante sucinta. En cualquier caso estos son los pasos a dar:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Descomprimir el archivo (en mi caso en $HOME/Herramientas).&lt;/li&gt;
	&lt;li&gt;Añadir la variable de entorno M2_HOME, que es el directorio de Maven (en este caso sería export M2_HOME=$HOME/Herramientas/apache-maven-3.0.3)&lt;/li&gt;
	&lt;li&gt;Añadir la variable de entorno M2 que son los binarios de Maven (export M2=$M2_HOME/bin)&lt;/li&gt;
	&lt;li&gt;Añadir la variable MAVEN_OPTS al entorno. Esta variable son comandos que se pasan a la JVM que ejecuta Maven, en nuestro caso será para aumentar la memoria disponible para la ejecución de Maven (por defecto son 64 Mb, pero la vamos a aumentar a 256): export MAVEN_OPTS=&quot;-Xms256m -Xmx512m&quot;.&lt;/li&gt;
	&lt;li&gt;Añadir la variable M2 al Path: export PATH=$M2:$PATH&lt;/li&gt;
	&lt;li&gt;Si ejecutamos mvn --version debería salir la versión actual de Maven (3.0.3), la version de la JVM, etc...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Primera Práctica&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;El objetivo de esta primera práctica es construir una aplicación web, es decir un simple html con su web-inf, etc. Los pasos son cuatro:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Crear la aplicación web a partir de un arquetipo de Maven.&lt;/li&gt;
	&lt;li&gt;Probar la aplicación web en local.&lt;/li&gt;
	&lt;li&gt;Desplegar la aplicación web en Heroku.&lt;/li&gt;
	&lt;li&gt;Escalar la aplicación web en Heroku.&lt;/li&gt;
	&lt;li&gt;Ver los logs de la aplicación en Heroku.&lt;/li&gt;
	&lt;li&gt;Deshacer una publicación en Heroku.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Paso 1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Entro en mi directorio de trabajo (Heroku) y una vez dentro genero el proyecto con la siguiente línea:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;mvn archetype:generate -DarchetypeCatalog=http://maven.publicstaticvoidmain.net/archetype-catalog.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora Maven irá preguntando por una configuración básica del proyecto, estas son las respuestas que he ido dando:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Pregunta el arquetipo que se desea usar, realmente solo hay uno, así que pulso 1.&lt;/li&gt;
	&lt;li&gt;GroupId es el identificador del equipo de desarrollo, en este caso y por nomenclatura Java (es también el prefijo de toda la paquetería): es.aguasnegras&lt;/li&gt;
	&lt;li&gt;ArtifactId es el nombre del proyecto: helloheroku&lt;/li&gt;
	&lt;li&gt;Version se deja en blanco, será la 1.0-SNAPSHOT&lt;/li&gt;
	&lt;li&gt;Package es la paquetería del proyecto, introduzco es.aguasnegras.helloheroku&lt;/li&gt;
	&lt;li&gt;Por último, muestra un resumen y pide confirmación: Y.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Con esto tengo el proyecto creado según la estructura de directorio estándar de Maven. Debo tener un index.html, un Main.java y un pom.xml que contiene la configuración del proyecto según Maven.&lt;/p&gt;
&lt;p&gt;Lo interesante es el Main.java. En Heroku no despliego sobre un servidor de aplicaciones (caso usual en Java) sino que es la misma aplicación la que crea su servidor, Jetty (por eso el arquetipo de Maven era embedded-jetty-archetype). Esto tiene sus pros y sus contras, pero de momento esta bien. Se puede ver en el main de Main.java como se instancia el servidor.&lt;/p&gt;
&lt;p&gt;Una ventaja de esto es que voy a poder probar la aplicación en local sin tener que caer en todo el tedio de instalar un Tomcat, un Weblogic, un JBoss o un Glassfish. Y ese es el siguiente paso.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Primero hay que tener en cuenta que Maven me gestiona las dependencias (librerías, vaya) en tiempo de compilación, si quiero tenerlas disponibles en tiempo de ejecución (cuando arranque en local), tengo que exportar una variable llamada repo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;export REPO=~/.m2/repository
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para arrancar la aplicación en local, entro en el directorio (helloheroku) y ejecuto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;mvn install
sh target/bin/webapp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Abro en un navegador localhost:8080 y ahí esta: &amp;quot;hello, world&amp;quot;.&lt;/p&gt;
&lt;p&gt;Para parar la aplicación, Ctrl-c en la consola y listo. Una vez probada en local, hay que moverla (pasarla, exportarla, publicarla... publicarla, sí, me gusta) a Heroku.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para publicar la aplicación en Heroku, primero hay que crear un archivo llamado &amp;quot;Procfile&amp;quot; en el raíz del proyecto y añadirle una línea describiendo como se arranca la aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;touch Procfile
echo web: sh target/bin/webapp | tee Procfile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creo un repositorio de git para el proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;git init
git add .
git commit -m &amp;quot;commit inicial del proyecto helloheroku&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora viene lo bueno, la parte de cacharreo con Heroku.&lt;/p&gt;
&lt;p&gt;Primero creo el stack de Heroku que va a alojar la aplicación, este stack tiene que ser del tipo &amp;quot;cedar&amp;quot; que es el único que admite aplicaciones Java:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku create --stack cedar
Creating fierce-autumn-4530... done, stack is cedar
http://fierce-autumn-4530.herokuapp.com/ | git@heroku.com:fierce-autumn-4530.git
Git remote heroku added
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El comando me ha devuelto una URL http y otra para git. Si abro la URL en un navegador, me dice que enhorabuena, tengo creada mi app.&lt;br /&gt;
Ahora, con git, envío el master local a Heroku:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando llegue a Heroku veré en la consola que se lanza un proceso de Maven (mvn install) y que se detecta el Procfile y se lanza la aplicación web. Por último, me informa de que se ha desplegado en la URL correctamente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;-----&amp;gt; Heroku receiving push
-----&amp;gt; Java app detected
-----&amp;gt; Installing Maven 3.0.3..... done
-----&amp;gt; Installing settings.xml..... done
-----&amp;gt; executing .maven/bin/mvn -B -Duser.home=/tmp/build_s6y8o29xnjfx -s .m2/settings.xml -DskipTests=true clean install

-----&amp;gt; Discovering process types
       Procfile declares types -&amp;amp;gt; web
-----&amp;gt; Compiled slug size is 12.8MB
-----&amp;gt; Launching... done, v5
       http://fierce-autumn-4530.herokuapp.com deployed to Heroku
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si ahora abro &lt;a href=&quot;http://fierce-autumn-4530.herokuapp.com/&quot;&gt;http://fierce-autumn-4530.herokuapp.com/&lt;/a&gt; en el navegador, puedo ver el &amp;quot;hello, world&amp;quot;.&lt;/p&gt;
&lt;p&gt;Bueno, pues ya esta desplegada la aplicación en un servidor, ahora, ¿cómo se aumenta?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ya esta desplegada la aplicación en un servidor, pero claro, esto no sería la nube si no pudiera ampliar fácilmente los servidores en los que ejecuta. Voy a aumentar la aplicación a dos servidores:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku scale web=2
Scaling web processes...  This action will cause your account to be billed at the end of the month
 For more information, see http://docs.heroku.com/billing
 Are you sure you want to do this? (y/n) y
Scaling web processes... done, now running 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La verdad que no entiendo muy bien como pretenden cobrarme, porque no he dado ningún dato... pero oye... ellos mismos. Aunque habrá que mirar más a fondo el tema de como cobran.&lt;/p&gt;
&lt;p&gt;Por último, voy a verificar que efectivamente estan corriendo dos instancias y voy a reducir a una de nuevo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku ps
Process       State               Command
------------  ------------------  ------------------------------
web.1         up for 17m          sh target/bin/webapp
web.2         up for 2m           sh target/bin/webapp

heroku scale web=1
Scaling web processes... done, now running 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hasta el momento toda esta información de salida es bastante... escueta. ¿Cómo se ven los logs?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Paso 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pues muy fácil, hay dos forma de ver los logs, estática o dinámica. Estática, me muestra lo que hay hasta el momento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku logs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dinámica, no deja de ser un tail, va actualizando el log según se van creando mensajes nuevos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku logs -t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Paso 6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Por último, Heroku ofrece soporte para control de versiones. No me refiero solo a código, si no también, como en el ejemplo a variables de entorno, por ejemplo.&lt;/p&gt;
&lt;p&gt;Primero me aseguro de que el servidor tiene soporte para el control de releases, mediante el addon de releases:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku addons:add releases:basic
-----&amp;gt; Adding releases:basic to fierce-autumn-4530... failed !    
releases:basic add-on already added.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta añadido, ahora voy a añadir una variable de entorno y a verificar que se ha hecho:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku config:add MYVAR=42
Adding config vars:  MYVAR =&amp;amp;gt; 42
Restarting app... done, v6.

heroku config
DATABASE_URL        =&amp;gt; postgres://tpqbfpkzqb:OILC1r62mtQ5YkqKTeA7@ec2-107-20-227-173.compute-1.amazonaws.com/tpqbfpkzqb
JAVA_OPTS           =&amp;gt; -Xmx384m -Xss512k -XX:+UseCompressedOops
MAVEN_OPTS          =&amp;gt; -Xmx384m -Xss512k -XX:+UseCompressedOops
MYVAR               =&amp;gt; 42
PATH                =&amp;gt; .maven/bin:/usr/local/bin:/usr/bin:/bin
REPO                =&amp;gt; /app/.m2/repository
SHARED_DATABASE_URL =&amp;gt; postgres://tpqbfpkzqb:OILC1r62mtQ5YkqKTeA7@ec2-107-20-227-173.compute-1.amazonaws.com/tpqbfpkzqb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muy bien, pues ahora, toca volver atrás:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;heroku releases
Rel   Change                          By                    When
----    ----------------------          ----------                   ----------
v6    Config add MYVAR    agustinventura@gma..  45 seconds ago           
v5    Deploy cd3c58f          agustinventura@gma..  29 minutes ago           

heroku rollback
Rolled back to v5

heroku config
DATABASE_URL        =&amp;gt; postgres://tpqbfpkzqb:OILC1r62mtQ5YkqKTeA7@ec2-107-20-227-173.compute-1.amazonaws.com/tpqbfpkzqb
JAVA_OPTS           =&amp;gt; -Xmx384m -Xss512k -XX:+UseCompressedOops
MAVEN_OPTS          =&amp;gt; -Xmx384m -Xss512k -XX:+UseCompressedOops
PATH                =&amp;gt; .maven/bin:/usr/local/bin:/usr/bin:/bin
REPO                =&amp;gt; /app/.m2/repository
SHARED_DATABASE_URL =&amp;gt; postgres://tpqbfpkzqb:OILC1r62mtQ5YkqKTeA7@ec2-107-20-227-173.compute-1.amazonaws.com/tpqbfpkzqb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¡Listo! Hecha la vuelta atrás a la última publicación estable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Código en GitHub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/agustinventura/helloheroku/tree/cd3c58faf1ceaf0905b390f41f2f51088ca3724b&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-255&quot; title=&quot;GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusiones&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Pues de momento parece que Heroku ofrece lo que promete, uso de Java estándar, e integración con herramientas actuales: git y Maven. Además me ha sorprendido gratamente la herramienta de consola con más utilidades de lo que parece y que hace muy sencillo aumentar el número de instancias de la aplicación.&lt;/p&gt;
&lt;p&gt;Esto sí, echo en falta... un plugin de Eclipse, tendré que investigar si existe o esta en desarrollo.&lt;/p&gt;
&lt;p&gt;Igualmente tengo que investigar bien las opciones de facturación y algunos conceptos como dyno, stack, etc...&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>GitHub y Markdown</title>
      <link>http://www.aguasnegras.es/blog/2011/08/30-GitHub+y+Markdown.html</link>
      <pubDate>mar., 30 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/30-GitHub+y+Markdown.html</guid>
      	<description>
	&lt;p&gt;Si entro en el repositorio PruebaGit que cree en &lt;a title=&quot;Git, EGit y GitHub.&quot; href=&quot;http://www.aguasnegras.es/?p=201&quot; target=&quot;_blank&quot;&gt;este artículo&lt;/a&gt;, GitHub es tan amable de avisarme de que no encuentra un archivo README.&lt;/p&gt;
&lt;p&gt;En primer lugar, ¿qué es un README? Un archivo README contiene información genérica sobre el proyecto, como instalar, como configurar, como usar, licencia, contacto con el autor, bugs, etc... Para más detalles esta el artículo de la &lt;a title=&quot;Archivo README, Wikipedia (inglés)&quot; href=&quot;http://en.wikipedia.org/wiki/README&quot; target=&quot;_blank&quot;&gt;wikipedia&lt;/a&gt; (en inglés, el artículo en español es bastante malo).&lt;/p&gt;
&lt;p&gt;Bien, pues GitHub te recomienda poner un archivo README en la raíz de tu proyecto, y para ello puedes usar varios lenguajes de maquetado. Un lenguaje de maquetado es un archivo de texto plano (normal y corriente) pero que usa una síntaxis especial y específica para poder pasarle una herramienta y convertirlo a HTML. Yo voy a utilizar &lt;a title=&quot;Markdown&quot; href=&quot;http://daringfireball.net/projects/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;La gracia viene en que voy a crear un archivo README.markdown y GitHub lo podrá convertir al vuelo en un HTML, de esta manera el que utilice un navegador web para explorar GitHub podrá ver una descripción de mi proyecto en HTML, que siempre queda mejor que en texto plano.&lt;/p&gt;
&lt;p&gt;Como ya digo, voy a crear el README del proyecto PruebaGit y voy a incluir los siguientes datos: Descripción del proyecto, como instalar y contacto con el autor, con esos tres apartados creo que ya es suficiente.&lt;/p&gt;
&lt;p&gt;Click con el botón derecho en PruebaGit &amp;gt; New... &amp;gt; File &amp;gt; Name: README.markdown. Con esto se abre el archivo en blanco.&lt;/p&gt;
&lt;p&gt;A continuación voy a ir describiendo como voy usando el lenguaje Markdown para darle formato al texto:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Título: Prueba Git. Para forzar que sea el primer encabezado, lo subrayo con =&lt;/li&gt;
	&lt;li&gt;Para definir otro párrafo, basta con dejar una línea en blanco, o solo rellena con espacios o con tabuladores (y supongo que cualquier combinación de ellos).&lt;/li&gt;
	&lt;li&gt;Instalación: Éste epígrafe es de tipo título 2, así que lo subrayo con -&lt;/li&gt;
	&lt;li&gt;Los items de instalación son una lista, basta con comenzar cada item con -, * ó +. Con esto he tenido problemas (como se puede ver en el repositorio). La lista tiene que estar separada del párrafo anterior por una línea en blanco, si no, no la estima como válida.&lt;/li&gt;
	&lt;li&gt;Contacto, de nuevo título 2, así que se subraya con -&lt;/li&gt;
	&lt;li&gt;Enlaces: Los enlaces funcionan poniendo entre corchetes el título del enlace y a continuación, entre paréntesis, la url del enlace: [AguasNegras](http://www.aguasnegras.es/blog/?p=201).&lt;/li&gt;
	&lt;li&gt;Los enlaces de mail, igual, título entre corchetes y entre paréntesis la dirección de mail: [agustinventura](http://www.aguasnegras.es/blog/?p=201)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y eso es todo, los resultados se pueden ver &lt;a title=&quot;README de PruebaGit en GitHub.&quot; href=&quot;https://github.com/agustinventura/PruebaGit/blob/master/README.markdown&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;. Como detalle curioso e interesante, podemos decir que GitHub automáticamente te muestra el README en la página principal del repositorio del proyecto (&lt;a title=&quot;Repositorio de PruebaGit.&quot; href=&quot;https://github.com/agustinventura/PruebaGit&quot; target=&quot;_blank&quot;&gt;ejemplo&lt;/a&gt;).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Localización en Android</title>
      <link>http://www.aguasnegras.es/blog/2011/08/17-Localizaci%C3%B3n+en+Android.html</link>
      <pubDate>mié., 17 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/17-Localizaci%C3%B3n+en+Android.html</guid>
      	<description>
	&lt;p&gt;En general en mi trabajo soy fanático de la&lt;a title=&quot;i18n y L18n en Wikipedia&quot; href=&quot;http://es.wikipedia.org/wiki/Internacionalizaci%C3%B3n_y_localizaci%C3%B3n&quot; target=&quot;_blank&quot;&gt; internacionalización (i18n) y la localización (L18n)&lt;/a&gt;, aunque la aplicación que este en desarrollo ni siquiera vaya a ser traducida nunca a ningún otro idioma.&lt;/p&gt;
&lt;p&gt;El motivo es sencillo, si uso localización, cuando necesite poner un botón &amp;quot;Buscar&amp;quot; lo pondré en un archivo, por lo que al final todos los botones de &amp;quot;Buscar&amp;quot; de la aplicación apuntarán al mismo archivo (al mismo recurso). Ya se sabe que los clientes son caprichosos y es más que posible que pidan que ese &amp;quot;Buscar&amp;quot; se cambie por un &amp;quot;Encontrar&amp;quot;... y ahí es donde esta la potencia de la localización, basta con cambiar la palabra en el archivo adecuado. Se puede argüir que gracias a los IDEs modernos es sencillo hacer un search &amp;amp; replace all, pero creo que la opción de cambiar directamente lo que deseas en un archivo gana por goleada. Aparte, en lo personal, me dá mucha rabia que los informáticos en general tengan la duplicación de código por el anticristo (o así debiera ser) pero no tengan nada en contra de la duplicación sin medida de literales de textos.&lt;/p&gt;
&lt;p&gt;En Android, el concepto de &amp;quot;Recurso&amp;quot; no incluye tan solo los textos, sino también, como dice la &lt;a title=&quot;Documentación de Localization&quot; href=&quot;http://developer.android.com/guide/topics/resources/localization.html&quot; target=&quot;_blank&quot;&gt;documentación&lt;/a&gt;: cadenas de texto, layouts, sonidos, gráficos y cualquier otro conjunto de datos estáticos. Cuando la aplicación se ejecuta, Android escoge automáticamente de entre todos los recursos provistos, el que mejor se adapta, no solo teniendo en cuenta el idioma, sino también la orientación del dispositivo, tamaño de pantalla, etc...&lt;/p&gt;
&lt;p&gt;Por defecto, al desarrollar una aplicación se crean una serie de recursos por defecto, en el tutorial del bloc de notas ya ví algunos. En general es cualquier cosa dentro del directorio res/ y en ese caso vi las cadenas de texto (res/values/strings.xml) y los layouts (res/layout/notes_list.xml, res/layout/note_edit.xml, etc...).  La &lt;a title=&quot;Los recursos por defecto son importantes.&quot; href=&quot;http://developer.android.com/guide/topics/resources/localization.html#defaults-r-important&quot; target=&quot;_blank&quot;&gt;documentación&lt;/a&gt; recomienda que los recursos por defecto sean siempre completos, es decir, si mi strings.xml tiene siete cadenas de texto, las mismas debe tener el que se usa por defecto, ya que si cambio el locale del dispositivo del español al inglés, la aplicación se cerrará inesperadamente al no encontrar el recurso. Una buena estrategia, aunque suene extraña, es desarrollar la aplicación enteramente en inglés usando el string.xml, y después copiar y pegar al archivo localizado y traducir. Todo de una tacada.&lt;/p&gt;
&lt;p&gt;Vale, muy bien la teoría, excelente, pero, ¿cómo traduzco el tutorial del bloc de notas?. Pues un poco más de teoría. En el caso de los textos, si quiero un strings.xml en español, iría en el directorio /res/values-es/strings.xml. Ah, perfecto, ¿y si quiere español de España y de Perú? En ese caso, tendremos dos directorios: /res/values-es-rES y /res/values-es-rPE. La primera parte (el &amp;quot;es&amp;quot;) viene dado por el código de lenguaje según la &lt;a title=&quot;Códigos de lenguajes en ISO 639&quot; href=&quot;http://www.loc.gov/standards/iso639-2/php/code_list.php&quot; target=&quot;_blank&quot;&gt;ISO 639-1&lt;/a&gt; (atención, la 1, no la 2, es de dos letras, no de tres. Lo siento por catalanes y demás afectados), después tendremos como parte fija el guión y la r (-r) y el código de región según la &lt;a title=&quot;Códigos de regiones segun ISO 3166&quot; href=&quot;http://en.wikipedia.org/wiki/ISO_3166-1-alpha-2#Officially_assigned_code_elements&quot; target=&quot;_blank&quot;&gt;ISO 3166-1-alpha-2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vale, pero eso es lo que se refiere a lenguajes, ¿qué pasa si me interesa tener unos gráficos para pantallas grandes y otros para pantallas pequeñas? Pues que los gráficos por defecto estarán en /res/drawable, los de pantallas grande en /res/drawable-large y los de pantalla pequeña en /res/drawable-small, se puede consultar en la Tabla 2, &lt;a title=&quot;Recursos alteranativos.&quot; href=&quot;http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;.  Un momento... ¿y si quiero textos en español para dispositivos con pantalla grande? Pues eso: /res/values-es-rES-large... hala, toma ya. Pero... ¿y si tengo definidos textos en español y textos para pantalla grande en dos archivos distintos (res/values-es-rES y res/values-large) y usa la aplicación alguien con un Android con pantalla grande y en español? Pues hay unas &lt;a title=&quot;Reglas de Resolución de Recursos&quot; href=&quot;http://developer.android.com/guide/topics/resources/providing-resources.html#BestMatch&quot; target=&quot;_blank&quot;&gt;reglas de resolución de recursos&lt;/a&gt;, pero en general, según la documentación, casi siempre mandan las locales.&lt;/p&gt;
&lt;p&gt;Una vez visto esto, la guía dá una serie de recomendaciones:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Proveer siempre los recursos por defecto, para evitar petes como ya he visto antes.&lt;/li&gt;
	&lt;li&gt;En vez de definir un layout por idioma, usar un único layout, pero que sea flexible, que tenga capacidad de expandirse o contraerse y de controlar su tamaño programáticamente.&lt;/li&gt;
	&lt;li&gt;Traducir únicamente lo imprescindible, si la aplicación por defecto esta en español de España, y quiero aportar también español de México, puede ser que no tenga que traducir todas las frases sino simplemente aquellas que incluyan por ejemplo &quot;coche&quot; y cambiarlo por &quot;auto&quot;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y ahora, al lío. Traducción del bloc de notas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;En el proyecto Notepadv3, creo dentro de la carpeta /res la carpeta values-es-rES.&lt;/li&gt;
	&lt;li&gt;Click con el botón derecho encima de la carpeta recién creada, New... &amp;gt; Android XML File.&lt;/li&gt;
	&lt;li&gt;En nombre del archivo, usamos strings.xml y veremos que al crearlo dentro de esta carpeta nos aparece como escogidos los calificadores de pais y región.&lt;/li&gt;
	&lt;li&gt;Click en Finish&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;/images/2011/08/Pantallazo-New-Android-XML-File-.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-251&quot; title=&quot;Creación de strings.xml para es-ES&quot; src=&quot;/images/2011/08/Pantallazo-New-Android-XML-File--300x294.png&quot; alt=&quot;Creación de strings.xml para es-ES&quot; width=&quot;300&quot; height=&quot;294&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora a copiar y traducir:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Abro el strings.xml original y copio todas las etiquetas &amp;lt;string&amp;gt;&lt;/li&gt;
	&lt;li&gt;Las pego en mi nuevo strings.xml&lt;/li&gt;
	&lt;li&gt;Traduzco.&lt;/li&gt;
	&lt;li&gt;Arranco el emulador y cierro la aplicación para ponerlo en español (tecla home &amp;gt; tecla menu &amp;gt; settings &amp;gt; language &amp;amp; keyboard &amp;gt; select language &amp;gt; Español).&lt;/li&gt;
	&lt;li&gt;Vuelvo a arrancar la aplicación... et voilà!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;/images/2011/08/Pantallazo-Bloc-de-Notas-en-Español.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-252&quot; title=&quot;Bloc de Notas traducido al español&quot; src=&quot;/images/2011/08/Pantallazo-Bloc-de-Notas-en-Español-300x278.png&quot; alt=&quot;Bloc de Notas traducido al español&quot; width=&quot;300&quot; height=&quot;278&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Y eso es todo, si quieres los fuentes del proyecto, los tienes en GitHub.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Fuentes en GitHub&quot; href=&quot;https://github.com/agustinventura/Bloc-de-Notas-en-Espa-ol&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-255&quot; title=&quot;GitHub&quot; src=&quot;/images/2011/08/github_icon.png&quot; alt=&quot;GitHub&quot; width=&quot;115&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Parte 7</title>
      <link>http://www.aguasnegras.es/blog/2011/08/10-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+7.html</link>
      <pubDate>mié., 10 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/10-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+7.html</guid>
      	<description>
	&lt;p&gt;Actualmente, la aplicación de bloc de notas deja mucho que desear, no solo con respecto al aspecto gráfico o usabilidad de la misma, sino que además no esta integrada en el ciclo de vida.&lt;/p&gt;
&lt;p&gt;Una Activity tiene un &lt;a title=&quot;Ciclo de Vida de Activity&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#ActivityLifecycle&quot; target=&quot;_blank&quot;&gt;ciclo de vida&lt;/a&gt; determinado y el programador se tiene que ajustar a él. Por ejemplo, si se arranca la aplicación y se le da a crear o editar una nota y a continuación al botón de atrás, la Activity se cierra inesperadamente. Para evitar este tipo de cosas, el tutorial propone dos soluciones:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Integrar la Activity NoteEdit en el ciclo de vida de una Activity de Android.&lt;/li&gt;
	&lt;li&gt;Mover toda la lógica de acceso a base de datos necesaria a NoteEdit (si se pulsa el botón atrás, se disparará el onPause() que se encargará de salvar la nota a la base de datos)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En general esto implica algunas funciones nuevas (básicamente, los callbacks del ciclo de vida) y movimiento de código de un lado a otro. A ello.&lt;/p&gt;
&lt;p&gt;Con el nuevo enfoque (acceso a la base de datos en NoteEdit), se hace inútil pasar todos los datos de la nota a NoteEdit, basta con pasar el mRowId. Si mRowId es null, será una creación de nueva nota, en otro caso será una edición y se cargarán los datos de la base de datos. Borro en NoteEdit.java las líneas 46 y 47 y de la 50 a la 55.&lt;/p&gt;
&lt;p&gt;Creo también una instancia de clase de NotesDbAdapter y se inicializa en el onCreate, justo después del super.onCreate().&lt;/p&gt;
&lt;p&gt;Ahora viene la obtención del mRowId, se sigue este orden:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Si la Activity estaba en ejecución anteriormente, habrá una instancia salvada, que se habrá pasado. En este caso se obtiene de esa instancia.&lt;/li&gt;
	&lt;li&gt;Si no, es posible que el Intent traiga el mRowId, habrá que comprobarlo.&lt;/li&gt;
	&lt;li&gt;Por último, puede ser que no venga de ninguna de las maneras y que, por tanto, sea un alta.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sustituyo el código de las líneas 46 a 50 por este:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;//Si la aplicación no tiene estado salvado, mRowId será nulo. En caso de tenerlo, se recupera.
mRowId = (savedInstanceState == null) ? null :
    (Long) savedInstanceState.getSerializable(NotesDbAdapter.KEY_ROWID);
     //Si mRowId vale nulo, es que no había instancia salvada del estado de la aplicación
     if (mRowId == null) {
        //Se comprueba si mRowId viene en el Intent
        Bundle extras = getIntent().getExtras();
         //Aún así puede ser que no venga y entonces valdrá nulo, siendo un alta de nueva nota
         mRowId = extras != null ? extras.getLong(NotesDbAdapter.KEY_ROWID)
                     : null;
     }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nota de interés, en el primer caso se usa getSerializable porque &lt;a title=&quot;Documentación de getSerializable&quot; href=&quot;http://developer.android.com/reference/android/os/Bundle.html#getSerializable(java.lang.String)&quot; target=&quot;_blank&quot;&gt;devuelve un Object&lt;/a&gt; (una instancia de Serializable, más concretamente), mientras que getLong &lt;a title=&quot;Documentación de getLong&quot; href=&quot;http://developer.android.com/reference/android/os/Bundle.html#getLong(java.lang.String)&quot; target=&quot;_blank&quot;&gt;devuelve un long&lt;/a&gt; (el tipo primitivo), así que no serviría para hacer la comparación con null (getLong nunca podrá devolver null). Hmm... si embargo mRowId es de tipo Long, luego cuando en la última línea se hace ese getLong, en caso de venir (una edición), hay que hacer un autoboxing. No sé en la Dalvik VM, pero en Java &amp;quot;vanilla&amp;quot; el uso indiscriminado de autoboxing es una pérdida de rendimiento bastante gorda, habrá que estar pendiente de ello...&lt;/p&gt;
&lt;p&gt;Una vez accedido y cargado el mRowId (bien del Intent, bien del savedInstance), es hora de cargar los campos (o no, claro), para ello se invoca a un nuevo método llamado populateFields() (implementación más adelante).&lt;/p&gt;
&lt;p&gt;En lo que respecta al onClickListener, queda tal que así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;confirmButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                setResult(RESULT_OK);
                finish();
            }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A por ese populateFields... el tema es muy sencillo, si mRowId es distinto de nulo, habrá que cargar la nota desde la base de datos y establecer los valores de los textos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private void populateFields() {
        if (mRowId != null) {
            Cursor note = mDbHelper.fetchNote(mRowId);
            startManagingCursor(note);
            mTitleText.setText(note.getString(
                        note.getColumnIndexOrThrow(NotesDbAdapter.KEY_TITLE)));
            mBodyText.setText(note.getString(
                    note.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)));
        }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí pasa algo interesante, para adaptar la aplicación totalmente al ciclo de vida, tendríamos que implementar un método onPause() que entre otras cosas, liberase el cursor, y en el onResume() volver a abrirlo, etc... en general, gestionar el recurso del Cursor. Bueno, pues como ese caso es bastante, común, para eso se utiliza el &lt;a title=&quot;Documentanción de startManagingCursor&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#startManagingCursor(android.database.Cursor)&quot; target=&quot;_blank&quot;&gt;startManagingCursor&lt;/a&gt;, se encarga de acoplar el ciclo de vida del cursor... y por cierto, esta deprecado... otra guasita del tutorial, ya me dá la risa floja.&lt;/p&gt;
&lt;p&gt;Sigo, ahora hay que implementar el onSaveInstanceState, que es llamado por el framework Android antes de matar la aplicación. Va a hacer dos tareas, guardar la nota en la base de datos (creando una nueva o actualizando) y guardar el mRowId en el savedInstanceState para que lo pueda usar el onCreate.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        saveState();
        outState.putSerializable(NotesDbAdapter.KEY_ROWID, mRowId);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Siguiente, el onPause(), en este caso, solo hay que guardar en base de datos (ya que no se va a matar la Activity):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
protected void onPause() {
        super.onPause();
        saveState();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el onResume(), más de lo mismo, no se ha destruido la aplicación, asi que basta con leer los valores de la base de datos (es decir, invocar el populateFields()). Pregunta, ¿es necesario? Si la Activity no se ha llegado a matar, ¿hace falta volver a cargar los valores? Me lo dejo como ejercicio.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
    protected void onResume() {
        super.onResume();
        populateFields();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el saveState():&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private void saveState() {
        String title = mTitleText.getText().toString();
        String body = mBodyText.getText().toString();

        if (mRowId == null) {
            long id = mDbHelper.createNote(title, body);
            if (id &amp;amp;gt; 0) {
                mRowId = id;
            }
        } else {
            mDbHelper.updateNote(mRowId, title, body);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo único a reseñar es que si mRowId es null y la inserción es correcta (id &amp;gt; 0), se carga el mRowId, es decir, cuando se recargue la Activity o se vuelva a ejecutar el onCreate, será una edición, no un alta.&lt;/p&gt;
&lt;p&gt;Ahora toca limpiar el Notepadv3, quitando llamadas varias a la base de datos. En primer lugar, el onActivityResult, ya simplemente hay que refrescar la vista, por si ha habido posibles cambios (hmm... esto también es muy optimizable):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
    super.onActivityResult(requestCode, resultCode, intent);
    fillData();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Igual para el onListClickItem, ya no hace falta acceder a base de datos, y el mRowId viene dado por el id que recibe el método:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
        super.onListItemClick(l, v, position, id);
        Intent i = new Intent(this, NoteEdit.class);
        i.putExtra(NotesDbAdapter.KEY_ROWID, id);
        startActivityForResult(i, ACTIVITY_EDIT);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, el Cursor ya no hace falta que sea una variable de instancia de la Activity, sino que puede ser una variable local del fillData.&lt;/p&gt;
&lt;p&gt;Bueno, pues con esto termina el tutorial de Google que empecé hace ya más de un mes... no ha estado mal, quizás me ha faltado constancia. Me queda el detalle de examinar más de cerca lo que he apuntado arriba del ciclo de vida... y una vez hecho eso, habrá que buscar una idea de aplicación a desarrollar (ya tengo una primera...). Aparte, también le echaré un vistazo al &lt;a title=&quot;Curso de Android de Maestros del Web&quot; href=&quot;http://www.maestrosdelweb.com/editorial/curso-android/&quot; target=&quot;_blank&quot;&gt;libro de Maestros del Web&lt;/a&gt;, que tiene una pinta bastante buena.&lt;/p&gt;
&lt;p&gt;creo que cuando lo haya leído, haré un post de conclusiones sobre Android así en general, aunque mi primera impresión es muy positiva. Si alguien ha seguido la serie hasta aquí, gracias por leerme :).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Git, EGit y GitHub.</title>
      <link>http://www.aguasnegras.es/blog/2011/08/06-Git%2C+EGit+y+GitHub.html</link>
      <pubDate>sáb., 6 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/06-Git%2C+EGit+y+GitHub.html</guid>
      	<description>
	&lt;p&gt;&lt;strong&gt;Introducción&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Este tutorial pretende reflejar un ciclo de trabajo básico con Git, EGit y GitHub, crear un nuevo repositorio, añadir y borrar archivos y subir ese repositorio a GitHub. Si quieres saber que es un sistema de control de versiones, las diferencias entre un sistema de control de versiones centralizado y uno distribuido o por qué Git y no Mercurial o Bazaar, te recomiendo que le eches un vistazo a alguna de las referencias.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Referencias:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a title=&quot;Git Tutorial by Lars Vogel&quot; href=&quot;http://www.vogella.de/articles/Git/article.html&quot;&gt;Git Tutorial&lt;/a&gt; y &lt;a title=&quot;Git With Eclipse by Lars Vogel&quot; href=&quot;http://www.vogella.de/articles/EGit/article.html&quot; target=&quot;_blank&quot;&gt;Git with Eclipse&lt;/a&gt;, por &lt;a title=&quot;Lars Vogel&quot; href=&quot;http://www.vogella.de/&quot; target=&quot;_blank&quot;&gt;Lars Vogel&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;Modern Version Control with Git, Smashing Magazine&quot; href=&quot;http://coding.smashingmagazine.com/2011/07/26/modern-version-control-with-git-series/&quot; target=&quot;_blank&quot;&gt;Modern Version Control with Git&lt;/a&gt;, por &lt;a title=&quot;Smashing Magazine&quot; href=&quot;http://www.smashingmagazine.com/&quot; target=&quot;_blank&quot;&gt;Smashing Magazine&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;EGit User Guide&quot; href=&quot;http://wiki.eclipse.org/EGit/User_Guide&quot; target=&quot;_blank&quot;&gt;EGit User Guide&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Configuración de Git.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hay que instalar Git, bien git-core para Linux, bien &lt;a title=&quot;msysgit&quot; href=&quot;http://code.google.com/p/msysgit/&quot; target=&quot;_blank&quot;&gt;msysgit&lt;/a&gt; para Windows.&lt;/p&gt;
&lt;p&gt;Una vez instalado, hay que seguir este &lt;a title=&quot;Configuración de Git&quot; href=&quot;http://progit.org/book/ch1-5.html&quot; target=&quot;_blank&quot;&gt;tutorial&lt;/a&gt; para configurarlo. Si es en Windows, se puede usar el Git Bash que provee el msysgit. Para el propósito de este artículo, basta con rellenar nombre y email.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Instalación de EGit en Eclipse Indigo.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;EGit se puede instalar directamente desde el marketplace de Eclipse:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/strong&gt;Help &amp;gt; Eclipse Marketplace &amp;gt; Find: &amp;quot;EGit&amp;quot; &amp;gt; Install&lt;/p&gt;
&lt;p&gt;Se reinicia Eclipse y queda instalado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creación del Proyecto de Pruebas.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para las pruebas voy a utilizar un proyecto Java normal y corriente con una sola clase.&lt;/p&gt;
&lt;p&gt;File &amp;gt; New... &amp;gt; Java Project &amp;gt; Nombre: PruebaGit&lt;/p&gt;
&lt;p&gt;Click con el botón derecho encima del proyecto, New &amp;gt; Class:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Nombre: PruebaGit&lt;/li&gt;
	&lt;li&gt;Paquete: es.aguasnegras.pruebagit&lt;/li&gt;
	&lt;li&gt;Se marca también la generación de main.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit1.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-213&quot; title=&quot;Configuración del Proyecto Java de Pruebas&quot; src=&quot;/images/2011/08/TutorialGit1-227x300.png&quot; alt=&quot;Configuración del Proyecto Java de Pruebas&quot; width=&quot;227&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit2.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-214&quot; title=&quot;Tutorial Git 2 - Clase Java de Pruebas&quot; src=&quot;/images/2011/08/TutorialGit2-250x300.png&quot; alt=&quot;Clase Java de Pruebas&quot; width=&quot;250&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit3.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-215&quot; title=&quot;Tutorial Git 3 - Clase Java de Pruebas en el Editor de Eclipse&quot; src=&quot;/images/2011/08/TutorialGit3-300x233.png&quot; alt=&quot;Clase Java de Pruebas en el Editor de Eclipse&quot; width=&quot;300&quot; height=&quot;233&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Añadir el proyecto a un repositorio de Git.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Click con el botón derecho encima del proyecto, Team &amp;gt; Share Project... Selecciono Git &amp;gt; Next. En esta pantalla marco &amp;quot;Use or create repository in parent folder of the project&amp;quot;, si no existe el repositorio, debajo selecciono el proyecto y le doy a &amp;quot;Create repository&amp;quot;. Finish.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit3a.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-216&quot; title=&quot;Tutorial Git 4 - Configuración del Repositorio de Git&quot; src=&quot;/images/2011/08/TutorialGit3a-300x167.png&quot; alt=&quot;Configuración del Repositorio de Git&quot; width=&quot;300&quot; height=&quot;167&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit4.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-217&quot; title=&quot;Tutorial Git 5 - Repositorio de Git Creado&quot; src=&quot;/images/2011/08/TutorialGit4-300x167.png&quot; alt=&quot;Repositorio de Git Creado&quot; width=&quot;300&quot; height=&quot;167&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora, creo el archivo .gitignore. En este archivo se pondrán todos los archivos y directorios que queremos que no se añadan al control de versiones. En este caso será el directorio bin y los propios del proyecto de Eclipse (.classpath, .settings y .project).&lt;/p&gt;
&lt;p&gt;Click con el botón derecho encima del proyecto, New &amp;gt; File &amp;gt; Name: .gitignore y Finish.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit5.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-218&quot; title=&quot;Tutorial Git 6 - Creación de .gitignore&quot; src=&quot;/images/2011/08/TutorialGit5-259x300.png&quot; alt=&quot;Creación de .gitignore&quot; width=&quot;259&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Se abre el archivo para editar y pongo las entradas de arriba cada una en una línea.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Añadiendo y borrrando archivos.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Con esto ya esta todo configurado y listo para empezar a trabajar. Antes hay que entender un poco como funciona Git. En Git, los archivos tienen tres estados:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sin Modificar&lt;/li&gt;
	&lt;li&gt;Modificados&lt;/li&gt;
	&lt;li&gt;Staging (han sido modificados y además serán incluidos en el próximo commit al repositorio).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto, ahora mismo lo tengo todo en modificado, hay que añadirlo a Staging... click con el botón derecho en el proyecto, Team &amp;gt; Add y sale una cruz verde, ya estan en Staging, ahora commit.&lt;/p&gt;
&lt;p&gt;Click con el botón derecho en el proyecto, Team &amp;gt; Commit, si todo ha ido bien, vemos la pantalla de commit, con el autor y el email completados. En mi caso, se ve también el .project porque se me escapó del .gitignore ;)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit6.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-219&quot; title=&quot;Tutorial Git 7 - Commit inicial del proyecto&quot; src=&quot;/images/2011/08/TutorialGit6-300x279.png&quot; alt=&quot;Commit inicial del proyecto&quot; width=&quot;300&quot; height=&quot;279&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cambio ahora el main:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt; public static void main(String[] args) {
	System.out.println(&amp;quot;Subversion, tu antes molabas&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para comparar los cambios (diff): click con el botón derecho en el proyecto, Team &amp;gt; Synchronize Workspace.&lt;br /&gt;
En esta perspectiva (Team Synchronizing Perspective) tengo en el árbol de directorio tan solo los archivos que tienen cambios con respecto al repositorio, expando y doble click en PruebaGit.java. Se abre el Compare Editor y ahí tengo a la izquierda mi copia local, a la derecha lo que hay en el repositorio.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit7.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-220&quot; title=&quot;Tutorial Git 8 - Diff de dos archivos&quot; src=&quot;/images/2011/08/TutorialGit7-300x233.png&quot; alt=&quot;Diff de dos archivos&quot; width=&quot;300&quot; height=&quot;233&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora voy a crear un &amp;quot;propiedades.properties&amp;quot;, lo voy a añadir y lo voy a borrar. Para ello, creo el archivo, igual que hice con el .gitignore y hago commit. ¿Para borrar? Lo borro (click con el botón derecho &amp;gt; delete) y a continuación, hago commit de nuevo. Listo, para comprobarlo, click con el botón derecho en el proyecto, Team &amp;gt; Show in History. Selecciono el último commit y abajo a la derecha se observa que se ha borrado propiedades.properties.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit8.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-221&quot; title=&quot;Tutorial Git 9 - Borrado de un archivo&quot; src=&quot;/images/2011/08/TutorialGit8-300x233.png&quot; alt=&quot;Borrado de un archivo&quot; width=&quot;300&quot; height=&quot;233&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hasta el momento, he trabajado siempre en local, es decir, contra el repositorio que hay en mi misma máquina, pero, ¿cómo lo subo a la nube?... Enter &lt;a title=&quot;GitHub&quot; href=&quot;http://www.github.com/&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Subir el repositorio a GitHub.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accedo a mi cuenta de GitHub y le doy a Dashboard. Dentro del Dashboard, creo un repositorio nuevo (create repository):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Project Name: PruebaGit&lt;/li&gt;
	&lt;li&gt;Description: Ejemplo de uso de Git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click en create repository y listo. En la siguiente página, lo importante es hacer click en http, para que me dé un enlace http al repositorio (lo más normal es que cualquier firewall/proxy corte el protocolo git).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit9.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-222&quot; title=&quot;Tutoria lGit 10 - Creación del repositorio en GitHub&quot; src=&quot;/images/2011/08/TutorialGit9-300x213.png&quot; alt=&quot;Creación del repositorio en GitHub&quot; width=&quot;300&quot; height=&quot;213&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ahora, en el eclipse, click con el botón derecho encima del proyecto, Team &amp;gt; Remote &amp;gt; Push... En esta pantalla, introduzco la URI (http) que me ha dado GitHub e introduzco mi contraseña de GitHub.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit10.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-223&quot; title=&quot;Tutorial Git 11 - Subir el proyecto a GitHub&quot; src=&quot;/images/2011/08/TutorialGit10-283x300.png&quot; alt=&quot;Subir el proyecto a GitHub&quot; width=&quot;283&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En la siguiente pantalla, escojo que quiero enviar y a donde, en mi caso particular, me basta con enviar mi master a su master. Los escojo y hago click en &amp;quot;Add Spec&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit11.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-224&quot; title=&quot;Tutorial Git 12 - Escoger que rama se quiere subir a GitHub&quot; src=&quot;/images/2011/08/TutorialGit11-283x300.png&quot; alt=&quot;Escoger que rama se quiere subir a GitHub&quot; width=&quot;283&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A continuación puedo darle a &amp;quot;Next&amp;quot; para ver la pantalla de confirmación y pulsar &amp;quot;Finish&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit12.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-225&quot; title=&quot;Tutorial Git 13 - Finalizar subida de repositorio a GitHub&quot; src=&quot;/images/2011/08/TutorialGit12-283x300.png&quot; alt=&quot;Finalizar subida de repositorio a GitHub&quot; width=&quot;283&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit13.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-226&quot; title=&quot;Tutorial Git 14 - Confirmar Subida del Proyecto a GitHub&quot; src=&quot;images/2011/08/TutorialGit13-283x300.png&quot; alt=&quot;Confirmar Subida del Proyecto a GitHub&quot; width=&quot;283&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;En GitHub voy a mi Dashboard, hago click encima del repositorio PruebaGit y veo que, efectivamente ya están ahí mis archivos.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;images/2011/08/TutorialGit14.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-227&quot; title=&quot;Tutorial Git 15 - Proyecto en GitHub&quot; src=&quot;http://www.aguasnegras.es/blog/wp-content/uploads/2011/08/TutorialGit14-300x213.png&quot; alt=&quot;Proyecto en GitHub&quot; width=&quot;300&quot; height=&quot;213&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Para subir archivos, muy sencillo, click con el botón derecho encima del proyecto, Team &amp;gt; Remote &amp;gt; Push...&lt;/p&gt;
&lt;p&gt;Para traer los cambios, igual, pero con pull: click con el botón derecho encima del proyecto, Team &amp;gt; Remote &amp;gt; Pull...&lt;/p&gt;
&lt;p&gt;Y con esto, ya se ha cubierto la funcionalidad básica de Git, trabajo con el repositorio local, añadir, modificar y borrar archivos y subir a un repositorio remoto.&lt;/p&gt;
&lt;p&gt;Ya en otro veré como manejar ramas, etc...&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Interludio</title>
      <link>http://www.aguasnegras.es/blog/2011/08/04-Tutorial+de+Bloc+de+Notas+para+Android+-+Interludio.html</link>
      <pubDate>jue., 4 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/04-Tutorial+de+Bloc+de+Notas+para+Android+-+Interludio.html</guid>
      	<description>
	&lt;p&gt;Bueno, pues como me quedé ayer con las ganas, voy a hacer hoy un poco de microbenchmarking.&lt;br /&gt;
En general, y después de hablar con &lt;a title=&quot;SpanishCoders&quot; href=&quot;http://spanishcoders.com/&quot; target=&quot;_blank&quot;&gt;spCoder&lt;/a&gt;, me quedó claro que hay en general, cuatro formas de hacer ese onClick:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Tal y como pone el tutorial, mediante una clase interna anónima.&lt;/li&gt;
	&lt;li&gt;Seguimos depurando, hacemos que NoteEdit.java implemente O&lt;a title=&quot;Documentación de onClickListener&quot; href=&quot;http://developer.android.com/reference/android/view/View.OnClickListener.html&quot; target=&quot;_blank&quot;&gt;nClickListener&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Definir el onClick en el layout del botón y definir el método en el NoteEdit. A priori es la forma más elegante y mejor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Por curiosidad, voy a aplicar cada una de las soluciones y voy a tomar dos medidas:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Tiempo de ejecución del onCreate.&lt;/li&gt;
	&lt;li&gt;Tiempo de ejecución del onClick.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El proceso de prueba será:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Seleccionar una nota ya existente.&lt;/li&gt;
	&lt;li&gt;Modificar el título.&lt;/li&gt;
	&lt;li&gt;Modificar el cuerpo.&lt;/li&gt;
	&lt;li&gt;Pulsar confirmar.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Primera forma&lt;/strong&gt;, código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
		long onCreateStartTime = System.currentTimeMillis();
		//Se invoca el onCreate de Activity
		super.onCreate(savedInstanceState);
		//Se asigna el layout
		setContentView(R.layout.note_edit);
		//Se le dá el título
		setTitle(R.string.edit_note);
		//Se cargan los componentes para establecer los textos (si es una edición)
		mTitleText = (EditText) findViewById(R.id.title);
		mBodyText = (EditText) findViewById(R.id.body);
		//Si es una edición, los datos de la nota vendrán dentro de los extras del Intent
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			//Caso de que haya estos extras, se le dan los valores adecuados a los EditText
		    String title = extras.getString(NotesDbAdapter.KEY_TITLE);
		    String body = extras.getString(NotesDbAdapter.KEY_BODY);
		    //Y se guarda el identificador en BD de la nota
		    mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
		    //Comprobación de nulo, ya que se permite crear notas sin cuerpo o sin título
		    if (title != null) {
		        mTitleText.setText(title);
		    }
		    if (body != null) {
		        mBodyText.setText(body);
		    }
		}
		//Se trae el botón de confirmar para añadirle un listener del click
		Button confirmButton = (Button) findViewById(R.id.confirm);
		//ATENCIÓN, el Listener se crea como una Inner Class Anónima!!
		confirmButton.setOnClickListener(new View.OnClickListener() {
			public void onClick(View view) {
				long onClickStartTime = System.currentTimeMillis();
	            Bundle bundle = new Bundle();

	            bundle.putString(NotesDbAdapter.KEY_TITLE, mTitleText.getText().toString());
	            bundle.putString(NotesDbAdapter.KEY_BODY, mBodyText.getText().toString());
	            if (mRowId != null) {
	                bundle.putLong(NotesDbAdapter.KEY_ROWID, mRowId);
	            }

	            Intent mIntent = new Intent();
	            mIntent.putExtras(bundle);
	            setResult(RESULT_OK, mIntent);
	            long onClickFinishTime = System.currentTimeMillis();
	            Log.d(&amp;quot;Tiempo de ejecución: &amp;quot;, Long.toString(onClickFinishTime - onClickStartTime));
	            finish();
	        }
		});
		long onCreateFinishTime = System.currentTimeMillis();
		Log.d(&amp;quot;Tiempo de ejecución: &amp;quot;, Long.toString(onCreateFinishTime - onCreateStartTime));
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tiempos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;onCreate: 80 msg&lt;/li&gt;
	&lt;li&gt;onClick: 10 msg.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Segunda forma&lt;/strong&gt;, código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;@Override
	protected void onCreate(Bundle savedInstanceState) {
		long onCreateStartTime = System.currentTimeMillis();
		//Se invoca el onCreate de Activity
		super.onCreate(savedInstanceState);
		//Se asigna el layout
		setContentView(R.layout.note_edit);
		//Se le dá el título
		setTitle(R.string.edit_note);
		//Se cargan los componentes para establecer los textos (si es una edición)
		mTitleText = (EditText) findViewById(R.id.title);
		mBodyText = (EditText) findViewById(R.id.body);
		//Si es una edición, los datos de la nota vendrán dentro de los extras del Intent
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			//Caso de que haya estos extras, se le dan los valores adecuados a los EditText
		    String title = extras.getString(NotesDbAdapter.KEY_TITLE);
		    String body = extras.getString(NotesDbAdapter.KEY_BODY);
		    //Y se guarda el identificador en BD de la nota
		    mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
		    //Comprobación de nulo, ya que se permite crear notas sin cuerpo o sin título
		    if (title != null) {
		        mTitleText.setText(title);
		    }
		    if (body != null) {
		        mBodyText.setText(body);
		    }
		}
		//Se trae el botón de confirmar para añadirle un listener del click
		Button confirmButton = (Button) findViewById(R.id.confirm);
		//ATENCIÓN, el Listener se crea como una Inner Class Anónima!!
		confirmButton.setOnClickListener(this);
		long onCreateFinishTime = System.currentTimeMillis();
		Log.d(&amp;quot;Tiempo de ejecución: &amp;quot;, Long.toString(onCreateFinishTime - onCreateStartTime));
	}

	@Override
	public void onClick(View v) {
		long onClickStartTime = System.currentTimeMillis();
        Bundle bundle = new Bundle();

        bundle.putString(NotesDbAdapter.KEY_TITLE, mTitleText.getText().toString());
        bundle.putString(NotesDbAdapter.KEY_BODY, mBodyText.getText().toString());
        if (mRowId != null) {
            bundle.putLong(NotesDbAdapter.KEY_ROWID, mRowId);
        }

        Intent mIntent = new Intent();
        mIntent.putExtras(bundle);
        setResult(RESULT_OK, mIntent);
        long onClickFinishTime = System.currentTimeMillis();
        Log.d(&amp;quot;Tiempo de ejecución: &amp;quot;, Long.toString(onClickFinishTime - onClickStartTime));
        finish();
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tiempos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;onCreate: 130 msg&lt;/li&gt;
	&lt;li&gt;onClick: 8 msg.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Tercera forma&lt;/strong&gt;, código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
		long onCreateStartTime = System.currentTimeMillis();
		//Se invoca el onCreate de Activity
		super.onCreate(savedInstanceState);
		//Se asigna el layout
		setContentView(R.layout.note_edit);
		//Se le dá el título
		setTitle(R.string.edit_note);
		//Se cargan los componentes para establecer los textos (si es una edición)
		mTitleText = (EditText) findViewById(R.id.title);
		mBodyText = (EditText) findViewById(R.id.body);
		//Si es una edición, los datos de la nota vendrán dentro de los extras del Intent
		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			//Caso de que haya estos extras, se le dan los valores adecuados a los EditText
		    String title = extras.getString(NotesDbAdapter.KEY_TITLE);
		    String body = extras.getString(NotesDbAdapter.KEY_BODY);
		    //Y se guarda el identificador en BD de la nota
		    mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
		    //Comprobación de nulo, ya que se permite crear notas sin cuerpo o sin título
		    if (title != null) {
		        mTitleText.setText(title);
		    }
		    if (body != null) {
		        mBodyText.setText(body);
		    }
		}
		//Se trae el botón de confirmar para añadirle un listener del click
		Button confirmButton = (Button) findViewById(R.id.confirm);
		long onCreateFinishTime = System.currentTimeMillis();
		Log.d(&amp;quot;Tiempo de ejecución: &amp;quot;, Long.toString(onCreateFinishTime - onCreateStartTime));
	}

	public void confirmClickListener(View v) {
		long onClickStartTime = System.currentTimeMillis();
        Bundle bundle = new Bundle();

        bundle.putString(NotesDbAdapter.KEY_TITLE, mTitleText.getText().toString());
        bundle.putString(NotesDbAdapter.KEY_BODY, mBodyText.getText().toString());
        if (mRowId != null) {
            bundle.putLong(NotesDbAdapter.KEY_ROWID, mRowId);
        }

        Intent mIntent = new Intent();
        mIntent.putExtras(bundle);
        setResult(RESULT_OK, mIntent);
        long onClickFinishTime = System.currentTimeMillis();
        Log.d(&amp;quot;Tiempo de ejecución: &amp;quot;, Long.toString(onClickFinishTime - onClickStartTime));
        finish();
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la definición del botón:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;Button android:id=&amp;quot;@+id/confirm&amp;quot; 
	  android:text=&amp;quot;@string/confirm&amp;quot;
		android:layout_width=&amp;quot;wrap_content&amp;quot;
		android:layout_height=&amp;quot;wrap_content&amp;quot;
		android:onClick=&amp;quot;confirmClickListener&amp;quot; /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veamos los tiempos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;onCreate: 48 msg&lt;/li&gt;
	&lt;li&gt;onClick: 3 msg.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Conclusiones.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;En primer lugar, hay que decir que estas pruebas son un poco cutres. Para tener algo más de fiabilidad habría que usar un framework de pruebas y ejecutar multiples veces (al menos 100) el caso de prueba. Habría que hallar entonces la media y la varianza... pero de mientras...&lt;/li&gt;
	&lt;li&gt;En general, podemos decir que la tercera forma es la más natural, tan solo hay que enlazar el onClick del botón con la función que le dá soporte.&lt;/li&gt;
	&lt;li&gt;De esta forma, además, se ahorra el acceder al botón programáticamente en el onCreate().&lt;/li&gt;
	&lt;li&gt;Tanto la segunda como la tercera forma han arrojado valores bastante similares.&lt;/li&gt;
	&lt;li&gt;Queda a bastante distancia la primera forma. No solo es la más ilegible, sino que además es la más lenta, particularmente en el onCreate. Hay que tener en cuenta que siempre hay que hacer estos métodos lo más fluido posible, ya que uno de ellos excesivamente largo puede causar una pausa perceptible para el usuario. Es decir, es preferible tener dos métodos con una duración &quot;media&quot; que uno solo muy largo y otro muy corto.&lt;/li&gt;
	&lt;li&gt;Por último también hay que tener en cuenta otro punto. He evaluado lo que tardan en ejecutar los métodos. Pero no cómo de bien se acopla el framework de Android al uso de uno o de otro. Me explico, está claro que en la tercera forma, es el mismo framework el que se encarga de enlazar botón y función. Es decir, que el tiempo que hemos medido no es del todo real, ya que habría que sumarle algo de tiempo que tarda el framework en ejecutar esta operación. En el primer y segundo caso, podemos suponer que el framework interviene de una forma menos intrusiva, al estar manipulando a mano el botón.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Poco más... me desconcierta un poco que el mismo tutorial sugiera una forma de hacer las cosas subóptima en más de un sentido, pero bueno...&lt;/p&gt;
&lt;p&gt;Addenda.&lt;/p&gt;
&lt;p&gt;No todo iba a ser malo... de propina he visto el uso de la clase Log así por encima, y solo puedo decir que lo aplaudo. Me parece estupendo que traiga un sistema de logging claro y conciso ya integrado. Asimismo, el uso de los tags y del LogCat es un combo de una utilidad impresionante :D&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Parte 6</title>
      <link>http://www.aguasnegras.es/blog/2011/08/03-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+6.html</link>
      <pubDate>mié., 3 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/03-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+6.html</guid>
      	<description>
	&lt;p&gt;Bueno, pues ayer había rellenado el cuerpo del onCreate del EditNote.java y quedaba una cosa que no me gusta un pelo, que es rellenar ese onClick de la clase anónima interna. Para no salirme mucho (de momento) del objetivo, que es el tutorial, me limitaré a seguir el tutorial y después haré los experimentos oportunos.&lt;/p&gt;
&lt;p&gt;Recordando igualmente de antesdeayer, toda la interacción con la base de datos se hace en la Activity Notepadv2, con lo cual el onClick lo único que ha de hacer es montar el mensaje necesario y devolverlo a la actividad que le ha invocado. Facilísimo, vaya:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public void onClick(View view) {
            Bundle bundle = new Bundle();

            bundle.putString(NotesDbAdapter.KEY_TITLE, mTitleText.getText().toString());
            bundle.putString(NotesDbAdapter.KEY_BODY, mBodyText.getText().toString());
            if (mRowId != null) {
                bundle.putLong(NotesDbAdapter.KEY_ROWID, mRowId);
            }

            Intent mIntent = new Intent();
            mIntent.putExtras(bundle);
            setResult(RESULT_OK, mIntent);
            finish();
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bien, se construye un bundle en el que se introducen los datos de los EditText y el id de la nota (si es una edición), a continuación se construye el Intent que se devuelve y se establece el bundle anterior como sus extras. Con &lt;a title=&quot;Documentación de setResult&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#setResult(int, android.content.Intent)&quot; target=&quot;_blank&quot;&gt;setResult&lt;/a&gt; se establece el código de resultado y el Intent a devolver. Por último, ese &lt;a title=&quot;Documentación de finish()&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#finish()&quot; target=&quot;_blank&quot;&gt;finish&lt;/a&gt; se encarta de devolver el ActivityResult (que contendrá el código de resultado y el Intent) a la Activity que llamó a esta. Finito.&lt;/p&gt;
&lt;p&gt;Vale, aquí no esta muy limpia la API,, creo yo, setResult toma un int y un Intent, y finish dice que pasa un &lt;a title=&quot;Documentación de ActivityResult&quot; href=&quot;http://developer.android.com/reference/android/app/Instrumentation.ActivityResult.html&quot; target=&quot;_blank&quot;&gt;ActivityResult&lt;/a&gt; a la Activity que había invocado a la que termina... pero sin embargo esta &amp;quot;invocadora&amp;quot;, en su onActivityResult, recibe requestCode (int), resultCode (int) y el Intent. Que no digo que no, pero limpio, limpio lo que se dice muy limpio, pues tampoco es...&lt;/p&gt;
&lt;p&gt;Por último, hay que declarar la activity en el AndroidManifest.xml, así que lo abro, paso de wizard y le doy al xml a pelo... busco la línea &amp;lt;/activity&amp;gt; de la de Notepadv2 y añado esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;lt;activity android:name=&amp;quot;.NoteEdit&amp;quot; /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hora de darle a Run... ;)&lt;/p&gt;
&lt;p&gt;Y efectivamente, con esto ya esta listo... me quedo con la espina clavada de la clase interna anónima, así que mañana haré un poco de microbenchmarking y probaré distintas cosas que me ha recomendado &lt;a title=&quot;SpanishCoders&quot; href=&quot;http://www.spanishcoders.com&quot; target=&quot;_blank&quot;&gt;spCoder&lt;/a&gt;.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Instalación de Entorno de Android en Linux</title>
      <link>http://www.aguasnegras.es/blog/2011/08/03-Instalaci%C3%B3n+de+Entorno+de+Android+en+Linux.html</link>
      <pubDate>mié., 3 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/03-Instalaci%C3%B3n+de+Entorno+de+Android+en+Linux.html</guid>
      	<description>
	&lt;p&gt;Pasos para instalar el Android SDK, Eclipse y Android Development Toolkit en Eclipse:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Si el sistema es Ubuntu de 64 bits, instalar los &lt;a title=&quot;instalación de ia32-libs&quot; href=&quot;http://developer.android.com/sdk/installing.html#troubleshooting&quot; target=&quot;_blank&quot;&gt;ia32-libs&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Instalar JDK de Sun: 
```prettyprint linenums
sudo apt-get install sun-java6-jdk
```
&lt;/li&gt;
	&lt;li&gt;Asegurarse de que se esta usando el JDK de Sun: 
```prettyprint linenums
java -version
```
 debe devolver (entre otras cosas) Java HotSpot&lt;/li&gt;
	&lt;li&gt;Descargar &lt;a title=&quot;Descarga SDK de Android&quot; href=&quot;http://developer.android.com/sdk/index.html&quot; target=&quot;_blank&quot;&gt;SDK de Android&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Descomprimir SDK (por ejemplo en $HOME/Android)&lt;/li&gt;
	&lt;li&gt;Descargar &lt;a title=&quot;Descarga de Eclipse Indigo&quot; href=&quot;http://www.eclipse.org/downloads/&quot; target=&quot;_blank&quot;&gt;Eclipse Indigo&lt;/a&gt;, vale la &quot;Classic Edition&quot;&lt;/li&gt;
	&lt;li&gt;Descomprimir Eclipse ($HOME/Android)&lt;/li&gt;
	&lt;li&gt;En $HOME/Android debe haber dos carpetas: android-sdk-linux_x86 y eclipse.&lt;/li&gt;
	&lt;li&gt;Ejecutar Eclipse y pulsar Help &amp;gt; Install New Software... y pulsar el botón Add...&lt;/li&gt;
	&lt;li&gt;En Name introducir &quot;ADT Plugin&quot; y en location https://dl-ssl.google.com/android/eclipse/&lt;/li&gt;
	&lt;li&gt;En la pantalla de Install New Software seleccionar este sitio y marcar todo el software que nos ofrece para instalar.&lt;/li&gt;
	&lt;li&gt;Aceptar las licencias y ante el aviso de &quot;Unsigned Software&quot;, aceptar igualmente.&lt;/li&gt;
	&lt;li&gt;Reiniciar Eclipse y pulsar Window &amp;gt; Preferences y seleccionar Android en el menú de la izquierda.&lt;/li&gt;
	&lt;li&gt;Aceptar el aviso de Google (marcando si deseamos o no enviar datos de uso)&lt;/li&gt;
	&lt;li&gt;En SDK Location introducir $HOME/Android/android-sdk-linux_x86&lt;/li&gt;
	&lt;li&gt;Pulsar Apply, OK.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Listo, con esto ya esta todo instalado en Eclipse y listo para funcionar, otro día repasaré el proceso de creado de AVDs.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Parte 5</title>
      <link>http://www.aguasnegras.es/blog/2011/08/02-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+5.html</link>
      <pubDate>mar., 2 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/02-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+5.html</guid>
      	<description>
	&lt;p&gt;Con respecto a la pantalla de edición/inserción de notas nuevas, nos dan ya el layout, llamado note_edit.xml. En él tenemos una distribución de elementos de la siguiente manera: LinearLayout, TextView, EditText y Button (todo ello dentro a su vez de un LinearLayout). El primer LinearLayout tiene orientation=vertical, para disponer los elementos en vertical (nada que ver con la posición de la pantalla) y el segundo tiene orientation=horizontal. Dentro de él hay un TextView y un EditText con layout_weight = 1. Este parámetro indica la importancia (y por tanto el espacio en pantalla) que ocupará un elemento determinado. Por defecto, vale 0.&lt;/p&gt;
&lt;p&gt;La gestión del espacio ocupado por un elemento, es un poco extraña. En caso de que el parámetro no este establecido (o valga 0), el elemento ocupará el espacio mínimo e imprescindible para mostrarse. En el ejemplo de arriba, el TextView no tiene parámetro, luego ocupará el mínimo espacio posible, mientras que el EditText lo tiene a 1, lo que hace que ocupe todo el espacio restante en el LinearLayout padre. Si pongo los dos a 1, pasan a ocupar la mitad del LinearLayout cada uno. Si lo dejo en el TextView a 1 y lo cambio en el EditText a 2, el TextView ocupará un tercio del espacio y los restantes dos tercios, el EditText... y así sucesivamente.&lt;/p&gt;
&lt;p&gt;Para los otros tres elementos, solo tiene layout_weight = 1 el EditText (de nuevo), lo cual significa que el TextView ocupará el mínimo espacio posible, el Button igual y el resto del espacio lo ocupará el EditText.&lt;/p&gt;
&lt;p&gt;Para aportar la lógica de negocio de esta vista, hay que crear la clase NoteEdit, así que click con el botón derecho encima del paquete com.android.demo.notepad2 &amp;gt; New &amp;gt; Class... En Name pongo NoteEdit y en Superclass com.android.app.Activity (hereda de Activity). Finish.&lt;/p&gt;
&lt;p&gt;Ahora hace falta crear en onCreate (valga la redundancia), click con el botón derecho encima del editor de la clase Source &amp;gt; Implement/Override methods y selecciono el onCreate(Bundle).&lt;/p&gt;
&lt;p&gt;Aquí esta el método correctamente creado y con comentarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;protected void onCreate(Bundle savedInstanceState) {
        //Se invoca el onCreate de Activity
	super.onCreate(savedInstanceState);
	//Si es una edición, hay que guardar el identificador de la nota
	Long mRowId = null;
	//Se asigna el layout
	setContentView(R.layout.note_edit);
	//Se le dá el título
	setTitle(R.string.edit_note);
	//Se cargan los componentes para establecer los textos (si es una edición)
	mTitleText = (EditText) findViewById(R.id.title);
	mBodyText = (EditText) findViewById(R.id.body);
	//Si es una edición, los datos de la nota vendrán dentro de los extras del Intent
	Bundle extras = getIntent().getExtras();
	if (extras != null) {
		//Caso de que haya estos extras, se le dan los valores adecuados a los EditText
		String title = extras.getString(NotesDbAdapter.KEY_TITLE);
		String body = extras.getString(NotesDbAdapter.KEY_BODY);
		//Y se guarda el identificador en BD de la nota
		mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
		//Comprobación de nulo, ya que se permite crear notas sin cuerpo o sin título
		if (title != null) {
		    mTitleText.setText(title);
		}
		if (body != null) {
		    mBodyText.setText(body);
		}
	}
	//Se trae el botón de confirmar para añadirle un listener del click
	Button confirmButton = (Button) findViewById(R.id.confirm);
	//ATENCIÓN, el Listener se crea como una Inner Class Anónima!!
	confirmButton.setOnClickListener(new View.OnClickListener() {
	        public void onClick(View view) {
		}
	});
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bueno, a ver, cosas que me llaman la atención...&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;¿Por qué mTitleText y mBodyText son variables de instancia y mRowId es de método? ¿No sé supone que se optimiza accediendo mediante variables locales? Voy a tener que pensar sobre esto...&lt;/li&gt;
	&lt;li&gt;Hablando de mRowId... es Long, no long (¿quizás para evitar autoboxing?)&lt;/li&gt;
	&lt;li&gt;Por último... una clase anónima interna?? WTF?? Esto se lo voy a tener que preguntar a mi &lt;a title=&quot;SpanishCoders&quot; href=&quot;http://www.spanishcoders.com&quot; target=&quot;_blank&quot;&gt;primo&lt;/a&gt;, y aún así no descarto hacer algún microbenchmark a ver si mediante una clase interna normal va igual y por lo menos gano en legibilidad...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En fín, mañana lo acabo y si me dá tiempo,&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android – Parte 4</title>
      <link>http://www.aguasnegras.es/blog/2011/08/01-Tutorial+de+Bloc+de+Notas+para+Android+%E2%80%93+Parte+4.html</link>
      <pubDate>lun., 1 ago. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/08/01-Tutorial+de+Bloc+de+Notas+para+Android+%E2%80%93+Parte+4.html</guid>
      	<description>
	&lt;p&gt;Recapitulando lo anterior (hace ya 13 días a lo tonto...), se había a añadir la funcionalidad CRUD al bloc de notas, ya tengo puestos los métodos en el código del activity y solo hará falta completar.&lt;/p&gt;
&lt;p&gt;Primero. Borrado.&lt;/p&gt;
&lt;p&gt;El borrado habitualmente se hace mediante el menú contextual (igual que la edición, ahora que lo pienso...), para ello hay que registrar en el menú contextual el ListView, todo se puede hacer mediante métodos de la clase Activity, añadiendo al onCreate lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;registerForContextMenu(getListView());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto ya podemos invocar al menú contextual desde el ListView, pero claro, estará vacío, así que hace falta rellenar el onCreateContextMenu, que es muy similar al onCreateOptionsMenu, solo que además puede interactuar con la vista que lo invoca y además acepta opciones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public void onCreateContextMenu(Menu menu, View v,
        ContextMenu.ContextMenuInfo menuInfo) {
    super.onCreateContextMenu(menu, v, menuInfo);
    menu.add(0, DELETE_ID, 0, R.string.menu_delete);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto se crea un menú contextual que contiene un único item, borrar. ¿Qué pasa cuando se pulsa un elemento del menú contextual? Pues que se ejecuta onContextItemSelected que contiene la lógica de reconocimiento del elemento y de borrado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public boolean onContextItemSelected(MenuItem item) {
    switch(item.getItemId()) {
    case DELETE_ID:
        AdapterContextMenuInfo info = (AdapterContextMenuInfo) item.getMenuInfo();
        mDbHelper.deleteNote(info.id);
        fillData();
        return true;
    }
    return super.onContextItemSelected(item);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí es especialmente importante la línea 5, si miro &lt;a href=&quot;http://developer.android.com/reference/android/widget/AdapterView.AdapterContextMenuInfo.html&quot; target=&quot;_blank&quot;&gt;la documentación&lt;/a&gt;, ese info.id lo que devuelve es el identificador de la fila en la que se ha llamado al menú contextual, y se pasa tal cual al delete. Evidentemente en este ejemplo, se asume que ese id es el identificador de la nota también en la base de datos, pero no tiene por qué ser así... cuidado.&lt;/p&gt;
&lt;p&gt;Para crear una nota, se usará un Intent. En general Android funciona mediante paso de mensajes, por tanto, para crear una nota, habrá que enviar un mensaje (Intent), solicitando que se cree. Tendré esto en el createNote:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;Intent i = new Intent(this, NoteEdit.class);
startActivityForResult(i, ACTIVITY_CREATE);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para crear el Intent, pasamos el Activity como implementación de Context, para dotar de un contexto de ejecución, y la clase (en este caso NoteEdit.class) que queremos que lo reciba. Tal y como &lt;a title=&quot;Documentación de Intent&quot; href=&quot;http://developer.android.com/reference/android/content/Intent.html#Intent(android.content.Context, java.lang.Class&amp;lt;?&amp;gt;)&quot; target=&quot;_blank&quot;&gt;insinúa la documentación&lt;/a&gt;, esta forma es un poco suboptima, ya que se hardcodea la clase y esto es susceptible de cambiar. La forma habitual de usar los Intent, según leo en la documentación, es declarando intent-filters en el manifest, pero de momento, así se queda.&lt;/p&gt;
&lt;p&gt;Más cosas, el &lt;a title=&quot;Documentación de startActivityForResult&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#startActivityForResult(android.content.Intent, int)&quot; target=&quot;_blank&quot;&gt;startActivityForResult&lt;/a&gt;, inicia la actividad y deja la que lo invoca esperando el resultado de ella (lo apila como proceso, supongo), cuando la nueva actividad termine de ejecutar invocará al método onActivityResult() de la invocadora. La otra forma de invocar una actividad es con &lt;a title=&quot;Documentación de startActivity&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#startActivity(android.content.Intent)&quot; target=&quot;_blank&quot;&gt;startActivity&lt;/a&gt;, que lo lanza y punto. Otra diferencia importante entre estos dos métodos, es que startActivity puede ser invocado sin existir una Activity, puede servir para crear una actividad nueva sin otra ya existente... ahí queda eso...&lt;/p&gt;
&lt;p&gt;Con este método tenemos completado el caso de creación de una nueva nota, ahora bien, ¿cómo se edita una nueva nota? Pues pulsando sobre ella en la lista. ¿Y qué pasa cuando se pulsa sobre ella? Pues que se ejecuta &lt;a title=&quot;Documentación de onListItemClick&quot; href=&quot;http://developer.android.com/reference/android/app/ListActivity.html#onListItemClick(android.widget.ListView, android.view.View, int, long)&quot;&gt;onListItemClick&lt;/a&gt;, que toma de parámetros, la lista en la que se hizo click, la vista dentro del ListView en la que se hizo click, la posición de la lista en la que se hizo click y por último, el identificador del elemento en el que se hizo click. El método se completaría así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;protected void onListItemClick(ListView l, View v, int position, long id) {
        super.onListItemClick(l, v, position, id);
        Cursor c = mNotesCursor;
        c.moveToPosition(position);
        Intent i = new Intent(this, NoteEdit.class);
        i.putExtra(NotesDbAdapter.KEY_ROWID, id);
        i.putExtra(NotesDbAdapter.KEY_TITLE, c.getString(
                c.getColumnIndexOrThrow(NotesDbAdapter.KEY_TITLE)));
        i.putExtra(NotesDbAdapter.KEY_BODY, c.getString(
                c.getColumnIndexOrThrow(NotesDbAdapter.KEY_BODY)));
        startActivityForResult(i, ACTIVITY_EDIT);

    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo primero, si mNotesCursor, es un atributo de mi actividad, ¿por qué se asigna a una variable local? Pues parece ser que por una particularidad de Dalvik, esta técnica hace que se acceda mucho más rápido al cursor, por tanto te recomiendan aplicarla siempre que puedas... vaya plan.&lt;/p&gt;
&lt;p&gt;A continuación se situa el cursor en el registro de base de datos que indica position (que es la posición de la nota en la lista y ha de coincidir con la posición en la base de datos... se me ocurre que esto puede dar problemas si en la base de datos se hacen borrados lógicos y no físicos) y se crea un Intent nuevo.&lt;/p&gt;
&lt;p&gt;Este Intent tiene un bundle interno que sirve digamos de cajón de sastre, para pasar la información que se quiera, el uso es mediante el método putExtra, y ahí se añaden todos los campos que tiene la nota.&lt;/p&gt;
&lt;p&gt;Por último, se lanza la Activity, pero esta vez indicándole que es una edición (ACTIVITY_EDIT). La gracia de indicar estos modos de acceso, es que se devuelven a la actividad que lo invoca en su método onActivityResult, así se puede saber de donde se viene, si de una creación o una edición.&lt;/p&gt;
&lt;p&gt;El método &lt;a title=&quot;Documentación de onActivityResult&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#onActivityResult(int, int, android.content.Intent)&quot; target=&quot;_blank&quot;&gt;onActivityResult&lt;/a&gt; recibe tres parámetros: el requestCode (es decir, el código que nosotros le hemos pasado), el resultCode (por convenio, si es distinto de 0, es correcto, tenemos un par de &lt;a title=&quot;ResultCodes predefinidos&quot; href=&quot;http://developer.android.com/reference/android/app/Activity.html#RESULT_CANCELED&quot; target=&quot;_blank&quot;&gt;constantes predefinidas&lt;/a&gt;) y un Intent de vuelta que trae posibles resultados de la Activity recién terminada.&lt;/p&gt;
&lt;p&gt;En nuestro caso, el código quedará así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;protected void onActivityResult(int requestCode, int resultCode, Intent intent) {
    	super.onActivityResult(requestCode, resultCode, intent);
    	Bundle extras = intent.getExtras();

    	switch(requestCode) {
    	case ACTIVITY_CREATE:
    	    String title = extras.getString(NotesDbAdapter.KEY_TITLE);
    	    String body = extras.getString(NotesDbAdapter.KEY_BODY);
    	    mDbHelper.createNote(title, body);
    	    fillData();
    	    break;
    	case ACTIVITY_EDIT:
    	    Long mRowId = extras.getLong(NotesDbAdapter.KEY_ROWID);
    	    if (mRowId != null) {
    	        String editTitle = extras.getString(NotesDbAdapter.KEY_TITLE);
    	        String editBody = extras.getString(NotesDbAdapter.KEY_BODY);
    	        mDbHelper.updateNote(mRowId, editTitle, editBody);
    	    }
    	    fillData();
    	    break;
    	}
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Haciendo un recorrido, vemos que si es un ACTIVITY_CREATE, se accede al título y el cuerpo que vienen en el Intent con los resultados, y se crea la nota a través del mDbHelper.&lt;/p&gt;
&lt;p&gt;Si es un ACTIVITY_EDIT, además habrá que acceder en el Intent al Id de la nota, y se procederá a actualizar. Eso es todo.&lt;/p&gt;
&lt;p&gt;Se puede observar que la lógica de acceso a datos queda encapsulada en esta Activity, es decir, la clase NoteEdit no va a tener lógica de acceso a base de datos, ya que es innecesario, todas las operaciones las gestiona ListActivity.&lt;/p&gt;
&lt;p&gt;Con esto ya esta implementada esta clase, ¿qué queda? Pues NoteEdit.java con su correspondiente layout, pero eso lo dejo para la Parte 5 :).&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Parte 3</title>
      <link>http://www.aguasnegras.es/blog/2011/07/12-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+3.html</link>
      <pubDate>mar., 12 jul. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/07/12-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+3.html</guid>
      	<description>
	&lt;p&gt;Sigo con el tutorial, que más vale tarde que nunca... Entonces, repasando un poco lo hecho, tengo una tabla en la bd de la aplicación (un sqlite) que contiene las notas.&lt;/p&gt;
&lt;p&gt;Asimismo, tengo un activity que se encarga de presentar una lista con las notas creadas que de momento no tienen nada, tan solo un título &amp;quot;Note x&amp;quot; donde x es un autosecuencial, además un secuencial de Java, por lo cual en cada ejecución de la aplicación se repiten ya que se resetea el contador a 1. Esto no me gusta y da la casualidad de que tengo un autoincremental en la base de datos, así que voy a tratar de presentarlo en vez de ese.&lt;/p&gt;
&lt;p&gt;Analizando lo que tengo, en base de datos no hay que tocar nada, ya tengo todos los datos. Asímismo el NotesDbAdapter.java se trae absolutamente todos los campos cuando accede, con lo cual el id secuencial lo tengo en el cursor que llega a la activity, ¿qué queda entonces? Tan solo presentarlo.&lt;/p&gt;
&lt;p&gt;Primero modifico la vista de presentación de cada nota, es decir, el notes_row.xml, tan solo tiene un TextView y voy a necesitar dos: uno para el id y otro para el título:&lt;/p&gt;
&lt;p&gt;¿Dónde se rellena esta vista? En el fillData(), precisamente tenemos un array de String que son los datos que leemos del cursor (from) y un array de int que son en qué elementos los insertamos en la vista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt; String[] from = new String[] { NotesDbAdapter.KEY_ROWID, NotesDbAdapter.KEY_TITLE };
 int[] to = new int[] { R.id.text1, R.id.text2 };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y con esto ya tengo una primera aproximación:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2011/07/Pantallazo-5554android2.2.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-141&quot; title=&quot;Pantallazo modificación propia del tutorial Notepad&quot; src=&quot;/images/2011/07/Pantallazo-5554android2.2-300x278.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;278&quot; /&gt;&lt;/a&gt;Con lo cual ya se diferencia entre notas aunque tengan el mismo título.&lt;/p&gt;
&lt;p&gt;Bueno, &lt;a title=&quot;Tutorial Notepad - Parte 2&quot; href=&quot;http://developer.android.com/resources/tutorials/notepad/notepad-ex2.html&quot;&gt;sigo con el tutorial&lt;/a&gt;, creo un nuevo proyecto Android, from existing sources, etc... Listo. En esta parte del tutorial, se va a implementar la funcionalidad de edición de las notas (a través de un activity nuevo) y el borrado de las mismas a través del menú contextual.&lt;/p&gt;
&lt;p&gt;Para empezar, el strings.xml se ha actualizado, incorporando los textos necesarios para la funcionalidad nueva &amp;quot;confirm&amp;quot;, &amp;quot;edit note&amp;quot;, etc... Sin embargo el NotesDbAdapter.java sigue siendo el mismo, normal, la funcionalidad ya estaba contemplada desde el principio.&lt;/p&gt;
&lt;p&gt;En el Notepadv2.java parece que esta el grueso de los cambios. De entrada me encuentro con unos int que representan las activity que hay:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private static final int ACTIVITY_CREATE=0;
private static final int ACTIVITY_EDIT=1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También tengo dos enteros para las entradas del menú:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private static final int INSERT_ID = Menu.FIRST;
private static final int DELETE_ID = Menu.FIRST + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último en la sección de declaraciones, el Cursor. El cursor antes era una variable del método fillData y ahora pasa a ser una variable de instancia de esta actividad:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;private Cursor mNotesCursor;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El método onCreate no tiene más cambios, y el fillData tan solo los necesarios debidos al cambio de visibilidad del cursor. Los demás métodos, onCreateOptionsMenu no tiene más cambios, pero onMenuItemSelected si que tiene un pequeño, pero importante, ahora invoca al método createNote.&lt;/p&gt;
&lt;p&gt;Llegamos a la sección de métodos nuevos. Un breve comentario sobre cada uno de ellos:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;onCreateContextMenu: Blanco y en botella... el método encargado de generar el menú contextual (con el borrar).&lt;/li&gt;
	&lt;li&gt;onContextItemSelected: Más de lo mismo, se encargará de gestionar la selección del elemento del menú contextual.&lt;/li&gt;
	&lt;li&gt;createNote: supongo que se encargará de llamar a la actividad de inserción/edición de notas.&lt;/li&gt;
	&lt;li&gt;onListItemClick: de nuevo supongo que se encargará de gestionar el click en cada uno de los elementos de la lista (notas??)&lt;/li&gt;
	&lt;li&gt;onActivityResult: esto tiene toda la pinta de ser un finalizador, para liberar recursos al salir de la actividad, vaya.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Poco más, mañana seguiré con la parte de implementación pura y dura.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Parte 2</title>
      <link>http://www.aguasnegras.es/blog/2011/07/04-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+2.html</link>
      <pubDate>lun., 4 jul. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/07/04-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+2.html</guid>
      	<description>
	&lt;p&gt;Para empezar a unir la base de datos con las vistas que hemos definido, lo primero es usar la clase ListActivity, que como dice la &lt;a title=&quot;API de ListActivity&quot; href=&quot;http://developer.android.com/reference/android/app/ListActivity.html&quot;&gt;documentación&lt;/a&gt;, es una actividad que presenta una lista de elementos provenientes de un array o un cursor y aporta una serie de gestores llamados cuando el usuario interactua con ellos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt; public class Notepadv1 extends ListActivity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora hay que completar el onCreate(), cuando se inicia la aplicación, ¿qué tiene que ocurrir?&amp;amp;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Obtener datos de la base de datos.&lt;/li&gt;
	&lt;li&gt;Establecer la vista oportuna&lt;/li&gt;
	&lt;li&gt;Completar la vista dependiendo de los datos obtenidos.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El método onCreate además toma un Bundle como parámetro, “savedInstanceState”, que es el estado de la aplicación guardado mediante el método onSaveInstanceState, es decir, sirve para recuperar el estado de la aplicación en la última ejecución.&lt;/p&gt;
&lt;p&gt;Para acceder a la base de datos hay que declarar un miembro privado de la clase del tipo NotesDbAdapter que se llamará mDbHelper.&lt;/p&gt;
&lt;p&gt;El método queda tal que así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.notepad_list);
mDbHelper = new NotesDbAdapter(this);
mDbHelper.open();
fillData();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De momento, fillData se deja así y se pasa a rellenar el onCreateOptionsMenu(). Este método es llamado para crear el menú de opciones de la aplicación. Se encarga en esencia de generar este menú.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public boolean onCreateOptionsMenu(Menu menu) {
boolean result = super.onCreateOptionsMenu(menu);
menu.add(0, INSERT_ID, 0, R.string.menu_insert);
return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si se mira la &lt;a title=&quot;Documentación de Menu#add&quot; href=&quot;http://developer.android.com/reference/android/view/Menu.html#add(int, int, int, java.lang.CharSequence)&quot;&gt;documentación del método add&lt;/a&gt;, quedará claro que se esta añadiendo un menú con identificador grupal 0 (este identificador es para crear conjuntos de elementos visuales), identificador únido INSERT_ID (esta variable habrá que declararla), orden 0 y su texto será la cadena menu_insert, que hay que declararla también en strings.xml&lt;/p&gt;
&lt;p&gt;La declaración de INSERT_ID es interesante:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public static final int INSERT_ID = Menu.FIRST

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La clase Menu, tiene definidas unas cuantas constantes, como Menu.FIRST (1) o Menu.NONE(0), que conviene mirar.&lt;/p&gt;
&lt;p&gt;El siguiente método, onOptionsItemSelected(MenuItem item), se encarga de ejecutar la accion asociada al elemento de menú que se ha seleccionado. En nuestro caso, solo un elemento de menú y se encargará de crear una nota nueva:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
public boolean onOptionsItemSelected(MenuItem item) {
switch (item.getItemId()) {
case INSERT_ID:
createNote();
return true;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
return super.onOptionsItemSelected(item);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El método createNote() de momento se limita a crear una nota vacía con un identificador generado automáticamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
private void createNote() {
String noteName = &amp;quot;Note &amp;quot; + mNoteNumber++;
mDbHelper.createNote(noteName, &amp;quot;&amp;quot;);
fillData();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez creada la nota, vuelve a rellenar la lista de notas existentes.&lt;/p&gt;
&lt;p&gt;En cuanto al fillData:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
private void fillData() {
// Get all of the notes from the database and create the item list
Cursor c = mDbHelper.fetchAllNotes();
startManagingCursor(c);

String[] from = new String[] { NotesDbAdapter.KEY_TITLE };
int[] to = new int[] { R.id.text1 };

// Now create an array adapter and set it to display using our row
SimpleCursorAdapter notes =
new SimpleCursorAdapter(this, R.layout.notes_row, c, from, to);
setListAdapter(notes);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se traen las notas de la base de datos y se pasan a un adaptador que se encarga de rellenar la vista a partir de un Cursor. A destacar:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;from: Una lista de cadena que contiene los campos que se accederan en cada uno de los elementos. En este caso, solo el titulo.&lt;/li&gt;
	&lt;li&gt;to: Los campos de la vista que se rellenarán con los valores obtenidos en el from. Cuidao que tiene que casar el orden del from con el del to.&lt;/li&gt;
	&lt;li&gt;startManagingCursor: simplemente anuncia al sistema Android que se tiene que encargar él de gestionar el cursor.&lt;/li&gt;
	&lt;li&gt;El constructor del SimpleCursorAdapter: pues nada, se le pasa el contexto, la vista &quot;plantilla&quot;, el origen de datos (cursor en este caso), lo que queremos leer y donde queremos escribirlo.&lt;/li&gt;
	&lt;li&gt;Por último, setListAdapter informe a la actividad de que sus datos están en el adaptador del cursor. Vamos, patrón decorador por un tubo, muy parecido a la forma de gestionar archivos en Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y con esto, listo, Run as &amp;gt; Android Application y volando.&lt;/p&gt;
&lt;p&gt;De momento la aplicación simplemente se limita a crear Note 1, Note 2, Note 3... Note n.&lt;/p&gt;
&lt;p&gt;Se irá mejorando.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Tutorial de Bloc de Notas para Android - Parte 1</title>
      <link>http://www.aguasnegras.es/blog/2011/06/29-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+1.html</link>
      <pubDate>mié., 29 jun. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/06/29-Tutorial+de+Bloc+de+Notas+para+Android+-+Parte+1.html</guid>
      	<description>
	&lt;p&gt;La página principal de este tutorial esta &lt;a title=&quot;Tutorial Bloc de Notas Android&quot; href=&quot;http://developer.android.com/resources/tutorials/notepad/index.html&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En general te recomiendan tener una idea de como funciona Android (para lo cual es bueno repasar los &lt;a title=&quot;Fundamentos de Aplicaciones Android&quot; href=&quot;http://developer.android.com/guide/topics/fundamentals.html&quot;&gt;Fundamentos de Aplicaciones&lt;/a&gt;) y &lt;a title=&quot;Fuentes del Bloc de Notas&quot; href=&quot;http://developer.android.com/resources/tutorials/notepad/codelab/NotepadCodeLab.zip&quot;&gt;descargar&lt;/a&gt; los proyectos preconfigurados en zip.&lt;/p&gt;
&lt;p&gt;Descomprimo el zip como recomiendan en $HOME/Android/NotepadCodeLab.&lt;/p&gt;
&lt;p&gt;El tutorial esta divido en tres ejercicios (que vienen con sus correspondientes soluciones) y un extra para aprender a depurar el ciclo de vida de Android.&lt;/p&gt;
&lt;p&gt;En el primero voy a crear una lista de notas y voy a añadir notas pero no voy a poder editarlas. Muestra los principios de ListActivity y como crear y manipular opciones de menú. Además usa una base de datos SQLite para guardar las notas.&lt;/p&gt;
&lt;p&gt;Importo los fuentes que me dan a un nuevo proyecto en eclipse (File &amp;gt; New... &amp;gt; Android Project) y selecciono &amp;quot;Create project from existing sources&amp;quot; y en la carpeta de la ruta introduzco $HOME/Android/NotepadCodeLab/Notepadv1. Selecciono también el Build target, en mi caso solo tengo instalado Android 2.2, así que nada, ese me vale. Finish.&lt;/p&gt;
&lt;p&gt;En el projecto viene dado un Notepadv1.java que es la actividad principal y viene canina, solo código por defecto, y un NotesDbAdapter.java que se encarga de conectar con la base de datos.&lt;/p&gt;
&lt;p&gt;NotesDbAdapter combina la funcionalidad de acceso a la base de datos con la de la manipulación de los datos en sí. Para empezar tiene varias constantes que definen el nombre de la base de datos (data), el de la tabla (notes) y los de las columnas (_id para la pk, el underscore es por convención, body, el texto y title, el título).&lt;/p&gt;
&lt;p&gt;Además tiene una instancia de la base de datos SQLite como tal y otra del Context, es decir, una referencia al contexto Android de la aplicación.&lt;/p&gt;
&lt;p&gt;Por último, tiene también una instancia de un DataBaseHelper que es una clase estática privada definida dento de NotesDbAdapter y que se encarga de abrir y cerrar la conexión así como de crear la base de datos si no existe (y subirla de version, sea lo que sea eso) .&lt;/p&gt;
&lt;p&gt;La interfaz de NotesDbAdapter es un &lt;a title=&quot;Create, Read, Update and Delete&quot; href=&quot;http://es.wikipedia.org/wiki/CRUD&quot;&gt;CRUD&lt;/a&gt; típico: constructor (que asigna el contexto), open (que usa el DataBaseHelper y crea la base de datos si no existe), close y createNote, deleteNote, fetchAllNotes, fetchNote y updateNote.&lt;/p&gt;
&lt;p&gt;Particularidades:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;fetchAllNotes: Devuelve un Cursor, no un List ni nada así. Importante, Cursor no es synchronized, así que no es thread safe por defecto.&lt;/li&gt;
	&lt;li&gt;El método query del SQLiteDataBase tiene esta signatura: &lt;a title=&quot;método query&quot; href=&quot;http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)&quot;&gt;query&lt;/a&gt;(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy), es decir, no toma SQL directamente, sino que más bien se especifica la consulta a través de los parámetros.&lt;/li&gt;
	&lt;li&gt;fetchNote: Utiliza una sobrecarga de query para chequear unicidad.&lt;/li&gt;
	&lt;li&gt;updateNote: Utiliza un método update muy parecido a query, pero los nuevos datos se pasan dentro de un objeto ContentValues, que tiene toda la pinta de ser un Map con alguna cosa más.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A continuación paso a la capa de presentación. En res/layout esta el notepad_list.xml, que es la vista principal de la aplicación. Cosas importantes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Tiene que ser un xml válido con su cabecera.&lt;/li&gt;
	&lt;li&gt;El primer elemento suele ser un Layout (LinearLayout en este caso).&lt;/li&gt;
	&lt;li&gt;El primer elemento define el &lt;a title=&quot;Espacio de nombres&quot; href=&quot;http://es.wikipedia.org/wiki/Namespace&quot;&gt;namespace&lt;/a&gt; de Android para poder seguir usando sus elementos (componentes) visuales: xmlns:android=&quot;http://schemas.android.com/apk/res/android&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copio y pego de la página del tutorial el siguiente trozo de código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;amp;lt;ListView android:id=&amp;quot;@android:id/list&amp;quot;
android:layout_width=&amp;quot;wrap_content&amp;quot;
android:layout_height=&amp;quot;wrap_content&amp;quot;/&amp;amp;gt;
&amp;amp;lt;TextView android:id=&amp;quot;@android:id/empty&amp;quot;
android:layout_width=&amp;quot;wrap_content&amp;quot;
android:layout_height=&amp;quot;wrap_content&amp;quot;
android:text=&amp;quot;@string/no_notes&amp;quot;/&amp;amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al tener dos hijos habrá que elegir cual de los dos presentar. El ListView para cuando haya una lista (de notas) y el TextView para cuando no haya nada. Es por ello que el TextView define en su etiqueta text &amp;quot;@string/no_notes&amp;quot;, lo cual quiere decir que en mi recurso de strings (res/values/strings.xml) tendré una llamada no_notes que especificará el texto a mostrar cuando no hay notas.&lt;/p&gt;
&lt;p&gt;La decisión de cual mostrar se realiza a través de los atributos android:id. Cuando el ListAdapter encargado de renderizar la lista tenga datos, se utilizará el marcado como &amp;quot;id/list&amp;quot;. En caso contrario se usará &amp;quot;id/empty&amp;quot;.&lt;/p&gt;
&lt;p&gt;Esta forma de acceder a los recursos es declarativa, para hacerlo de manera programática se puede utilizar la clase android.R (para acceder a los &amp;quot;@android:...&amp;quot;) o R (propia del proyecto, se genera automáticamente y se usa para acceder por ejemplo a los &amp;quot;@string/...&amp;quot;).&lt;/p&gt;
&lt;p&gt;Ya esta la vista de listado, ahora se define una vista para el detalle de las notas, se llamará &amp;quot;notes_row.xml&amp;quot;. Click con el botón derecho sobre layout &amp;gt; new... &amp;gt; Android XML File. Nombre: &amp;quot;notes_row.xml&amp;quot; y se indica que es un Layout y en root element TextView. Solo hace falta añadir una linea, el id:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
android:id=&amp;quot;@+id/text1&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El &amp;quot;+&amp;quot; significa que si cuando se accede no existe el recurso llamado text1, se cree al vuelo.&lt;/p&gt;
&lt;p&gt;¿Qué queda? Pues pegarlo todo usando el código propio de la actividad. Pero eso mañana.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Redimensionar el emulador de Android</title>
      <link>http://www.aguasnegras.es/blog/2011/06/28-Redimensionar+el+emulador+de+Android.html</link>
      <pubDate>mar., 28 jun. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/06/28-Redimensionar+el+emulador+de+Android.html</guid>
      	<description>
	&lt;p&gt;Nota mental:&lt;/p&gt;
&lt;p&gt;Para redimensionar la ventana del emulador de android en Eclipse:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Run &amp;gt; Run Configurations &amp;gt; Pestaña Target&lt;/li&gt;
	&lt;li&gt;En Additional Emulator Command Line Options: -scale .75&lt;/li&gt;
	&lt;li&gt;Apply&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Listo&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/2011/06/Pantallazo-Run-Configurations-.png&quot;&gt;&lt;img class=&quot;aligncenter size-medium wp-image-117&quot; title=&quot;Parámetro scale emulador de Android&quot; src=&quot;/images/2011/06/Pantallazo-Run-Configurations--300x238.png&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;238&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Bases de Datos para Desarrolladores Java - Claves Primarias Artificiales</title>
      <link>http://www.aguasnegras.es/blog/2011/06/27-Bases+de+Datos+para+Desarrolladores+Java+-+Claves+Primarias+Artificiales.html</link>
      <pubDate>lun., 27 jun. 2011 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">blog/2011/06/27-Bases+de+Datos+para+Desarrolladores+Java+-+Claves+Primarias+Artificiales.html</guid>
      	<description>
	&lt;p&gt;La teoría pura y dura de base de datos dice que para una entidad determinada, tendremos varias claves candidatas, que son aquellas que identifican únicamente a la entidad y la clave primaria se escoge de entre ellas como la menor.&lt;br /&gt;
Para un usuario podemos tener como claves candidatas: DNI, nombre de usuario, nombre y apellidos. Nombre y apellidos se descarta (por larga) y ya tenemos que escoger entre DNI y nombre de usuario. A gusto.&lt;/p&gt;
&lt;p&gt;El problema de esto es cuando vamos arrastrando relaciones. Por ejemplo, un post podría tener como clave primaria su título, y un comentario el título y el autor, ¿verdad?&lt;/p&gt;
&lt;p&gt;¿Qué pasa si cambia el título? Pues que hay que modificar también sus referencias. ¿Y si cambia el usuario que escribió el comentario?¿Debemos dejar que un usuario modifique su nombre? Habría que usar un &amp;quot;ON UPDATE CASCADE&amp;quot; o algún artefacto similar.&lt;/p&gt;
&lt;p&gt;¿Y sí en vez de esto cada tabla tiene un identificador único artificial? Un número autogenerado que identifique unívocamente cada una de las filas en la base de datos. La mayoría de bases de datos tienen algún sistema para gestionar esto, en MySQL existen los auto_increment, en Oracle los sequence, etc... En caso de que no haya, siempre se puede utilizar una tabla para generarlos.&lt;/p&gt;
&lt;p&gt;Las ventajas son claras, si el post tiene un identificador 135 y el usuario un identificador 7, el identificador del comentario será (135, 7). El usuario se podrá cambiar el nombre tantas veces como desee sin afectar al resto de los datos, e incluso el post podrá cambiar de título sin más. Y ya en ello, ¿no sería mejor que el comentario tuviera su propio id único? Imaginemos por ejemplo que un comentario contesta a otro, si el id del comentario fuera (135, 7), la clave externa sobre la tabla tendría que tener dos campos (por ejemplo, id_post_comentario_respuesta, id_usuario_comentario_respuesta), con un id único, basta con uno solo (id_comentario_respuesta).&lt;/p&gt;
&lt;p&gt;Como todo, esta solución tiene críticas. La más importante es que la base de datos deja de estar en &lt;a title=&quot;Primera Forma Normal&quot; href=&quot;http://es.wikipedia.org/wiki/1NF&quot; target=&quot;_blank&quot;&gt;Primera Forma Normal&lt;/a&gt;, es decir, puedo tener dos veces al mismo usuario, Agustín con Id 2 y Agustín de nuevo con Id 3, y por tanto tengo que introducir algún otro artificio, como que &amp;quot;la que sería clave primaria&amp;quot;, ahora relegada a clave candidata, sea unique.&lt;/p&gt;
&lt;p&gt;Esto me obliga a incluir una segunda declaración de índice, etc... En el &lt;a title=&quot;Claves Primarias Artificiales en la Wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Surrogate_key&quot; target=&quot;_blank&quot;&gt;artículo de la wikipedia&lt;/a&gt; se pueden consultar más detalles (en inglés, lo siento).&lt;/p&gt;
&lt;p&gt;En general, en mi experiencia, suele ser más que conveniente tenerlo,  ya que nunca sabes cuanto puede crecer la base de datos y en consecuencia cada vez vas teniendo más &amp;quot;sucio&amp;quot; el esquema de base de datos, arrastrando claves primarias compuestas y los &amp;quot;on update cascade&amp;quot;, o te ves forzado a impedir que el usuario cambie su nombre, y otros tipos de restricciones absurdas.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Un poco de Ruby para Rails</title>
      <link>http://www.aguasnegras.es/blog/2011/02/21-Un+poco+de+Ruby+para+Rails.html</link>
      <pubDate>lun., 21 feb. 2011 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2011/02/21-Un+poco+de+Ruby+para+Rails.html</guid>
      	<description>
	&lt;p&gt;Bueno, parece que me han escuchado. El capítulo 4 del tutorial va sobre Ruby más que sobre Rails, para profundizar en el lenguaje y entender conceptos básicos (más allá de lo que viene siendo una variable de instancia...).&lt;br /&gt;
Lo que voy a hacer es definir un helper para construir el contenido de la etiqueta title, en vez de usar una cadena concatenada a una variable. Para ello edito el app/helpers/application_helper.rb y añado esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
# Return a title on a per-page basis.
def title
base_title = &amp;quot;Ruby on Rails Tutorial Sample App&amp;quot;
if @title.nil?
base_title
else
&amp;quot;#{base_title} | #{@title}&amp;quot;
end
end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es bastante sencillo de leer, si @title viene nulo, se &amp;quot;devuelve??&amp;quot; base_title, en otro caso la concatenación de base_title, | y title. Con ésto ya puedo dejar el título como &amp;lt;%=title%&amp;gt;. &lt;strong&gt;Atención!&lt;/strong&gt; que va sin la @, es decir, antes era | &amp;lt;%=@title%&amp;gt; y ahora es &amp;lt;%=title%&amp;gt;, si no, solo sigue usando el título en concreto de la página.&lt;br /&gt;
Es decir, title=Ruby on Rails Tutorial Sample App | Help mientras que @title=Help. Según explica @title es la variable, mientras que title es la invocación a la función... Joder, que fuerte.&lt;br /&gt;
Entiendo que los métodos definidos en el application_helper son visibles por todas las páginas erb, así como que el scope de @title es &amp;quot;global&amp;quot; en tiempo de traducción de las páginas, por eso el application_helper puede usarlo.&lt;br /&gt;
Me encuentro bastante sorprendido... esto es demasiado &amp;quot;ágil&amp;quot; para mí.&lt;br /&gt;
Toque de clarines, en un aparente cambio de tercio, se pasa a definir el CSS de la aplicación... que suerte, con lo que me gusta a mí esto. Además toca utilizar un framework CSS, &lt;a href=&quot;http://www.blueprintcss.org/&quot; target=&quot;_blank&quot;&gt;Blueprint&lt;/a&gt;, lo cual esta muy guay porque nunca he usado uno, hay que ver la de cosas que estoy aprendiendo con este tutorial.&lt;br /&gt;
Abro el tar.gz de la última versión (la 1.0) y descomprimo la carpeta blueprint/ de su interior en $sample_app/public/stylesheets.&lt;br /&gt;
Para que lo use la plantilla de la aplicación añado esto al application.html.erb después de csrf_meta_tag:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;amp;lt;%= stylesheet_link_tag &apos;blueprint/screen&apos;, :media =&amp;amp;gt; &apos;screen&apos; %&amp;amp;gt;
&amp;amp;lt;%= stylesheet_link_tag &apos;blueprint/print&apos;,  :media =&amp;amp;gt; &apos;print&apos; %&amp;amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Entiendo que la parte de stylesheet_link_tag se traduce de alguna manera mágica en un link rel a la hoja de estilo en blueprint/screen o print según proceda.&lt;br /&gt;
Efectivamente, stylesheet_link_tag es otro helper (en este caso uno que ofrece Rails) que se encarga de buscar la hoja de estilo en el directorio por defecto (public/stylesheets) y además le concatena el .css. Lo de :media ya me sobrepasa, supongo que será otro parámetro que se pasa al helper.&lt;br /&gt;
Por cierto que el código fuente HTML generado por la página es LIMPÍSIMO (acostumbrado a JSF...), esto me recuerda mucho a los scriptlets de JSp :&apos;) que tiempos...&lt;br /&gt;
Por otra parte el stylesheet_link_tag se traduce en el link rel tal como esperaba, pero la url de la hoja de estilo es esta: /stylesheets/blueprint/screen.css?1290014457 un tanto extraño, ya veremos para qué es.&lt;br /&gt;
Ahora parece que se cacharrea con la consola de Ruby, así que antes que nada toca subir a git.&lt;br /&gt;
La consola de Ruby es un intérprete, se invoca con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app$ rails console

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para interrumpir un proceso en ejecución dentro de la consola: Ctrl-C, para salir de la consola en sí, Ctrl-D.&lt;br /&gt;
Y empezamos con la descripción del lenguaje en sí, ya sabía yo que de esta no me libraba, en algún momento tiene que pasar, jeje...&lt;br /&gt;
Comentarios: Empiezan con # y se extienden hasta el final de la línea:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
#Esto es un comentario, y lo siguiente es una suma más un comentario
17+42 #Son 69

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Strings: Entre &amp;quot;&amp;quot;, como en Java. Igualmente, se concatenan con +. Por hacer unas pruebas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; &amp;quot;&amp;quot;
=&amp;amp;gt; &amp;quot;&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; &amp;quot;foo&amp;quot;
=&amp;amp;gt; &amp;quot;foo&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; &amp;quot;foo&amp;quot; + &amp;quot; &amp;quot; + &amp;quot;bar&amp;quot;
=&amp;amp;gt; &amp;quot;foo bar&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; foo = &amp;quot;foo&amp;quot;
=&amp;amp;gt; &amp;quot;foo&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; bar = &amp;quot;bar&amp;quot;
=&amp;amp;gt; &amp;quot;bar&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; foo + &amp;quot; &amp;quot; + bar
=&amp;amp;gt; &amp;quot;foo bar&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; &amp;quot;#{foo} #{bar}&amp;quot;
=&amp;amp;gt; &amp;quot;foo bar&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como curiosidad, la última línea. Se imprime foo bar mediante la interpretación de las dos cadenas con #{}. En Ruby a esto se le llama &lt;em&gt;interpolación&lt;/em&gt;.&lt;br /&gt;
Para imprimir, se usa puts, imprime la cadena y n (retorno de línea) y devuelve nil (nulo, vaya). Hay otro similar, print, que se limita a imprimir la cadena y devolver nils, es decir, no imprime el n.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; puts foo
foo
=&amp;amp;gt; nil
ruby-1.9.2-p0 &amp;amp;gt; print foo
foo =&amp;amp;gt; nil
ruby-1.9.2-p0 &amp;amp;gt; print foo+&amp;quot;n&amp;quot; #Esto es igual que puts foo
foo
=&amp;amp;gt; nil

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se pueden usar cadenas definidas con comillas simples: &apos;foo&apos;, con una salvedad, NO permiten interpolación! (ésto no era así también en PHP?).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; &apos;#{foo}&apos;
=&amp;amp;gt; &amp;quot;#{foo}&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además con estas cadenas puedo usar caracteres especiales sin escaparlos, como en n.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; &apos;esto es para marcar una nueva línea n&apos;
=&amp;amp;gt; &amp;quot;esto es para marcar una nueva línea \n&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Total, que la gran utilidad viene a ser que me ahorro escapar los caracteres especiales.&lt;br /&gt;
Bueno, ahora que he ido a aprovisionarme al supersol y he estado hablando un rato con mi frutero de confianza, sigo, vamos a por los objetos.&lt;br /&gt;
En Ruby &lt;strong&gt;TODO&lt;/strong&gt; es un objeto, cosa, que he de admitir que fascina mi lado más &amp;quot;computer scientist&amp;quot;, purista y talibán de la informática, así que puedo escribir cosas como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; &amp;quot;foo&amp;quot;.length
=&amp;amp;gt; 3
ruby-1.9.2-p0 &amp;amp;gt; &amp;quot;foo&amp;quot;.empty?
=&amp;amp;gt; false

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el último caso el &amp;quot;?&amp;quot; indica que el método invocado devuelve un booleano. Así que ya se puede hacer control de flujo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; s = &amp;quot;foobar&amp;quot;
=&amp;amp;gt; &amp;quot;foobar&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; if s.empty?
ruby-1.9.2-p0 ?&amp;amp;gt;  &amp;quot;Es cadena vacía&amp;quot;
ruby-1.9.2-p0 ?&amp;amp;gt;  else
ruby-1.9.2-p0 &amp;amp;gt;     &amp;quot;no es cadena vacía&amp;quot;
ruby-1.9.2-p0 ?&amp;amp;gt;  end
=&amp;amp;gt; &amp;quot;no es cadena vacía&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Me gusta el detallito de que algo tan &amp;quot;rudimentario&amp;quot; como un intérprete, te indente el código.&lt;br /&gt;
Los operadores a usar son los clásicos para booleanos: ||, &amp;amp;&amp;amp; y !&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; true &amp;amp;amp;&amp;amp;amp; false
=&amp;amp;gt; false
ruby-1.9.2-p0 &amp;amp;gt; true || false
=&amp;amp;gt; true
ruby-1.9.2-p0 &amp;amp;gt; !true
=&amp;amp;gt; false

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Me saco de la chistera que los literales booleanos sean true o false, pero oye, funciona.&lt;br /&gt;
Siguiendo con el tutorial veo que si se quiere evaluar una sola condición lógica basta con poner instrucción condición, es decir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; puts &amp;quot;Cadena no vacía&amp;quot; if !foo.empty?
Cadena no vacía
=&amp;amp;gt; nil
ruby-1.9.2-p0 &amp;amp;gt; if !foo.empty?
ruby-1.9.2-p0 ?&amp;amp;gt;  puts &amp;quot;cadena no vacía&amp;quot;
ruby-1.9.2-p0 ?&amp;amp;gt;  end
cadena no vacía
=&amp;amp;gt; nil

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se puede usar unless para hacer lo mismo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; puts &amp;quot;Cadena vacía&amp;quot; unless !foo.empty?
=&amp;amp;gt; nil

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es como aplicar álgebra de Boole al lenguaje en sí, que friki, me parto.&lt;br /&gt;
Como última particularidad booleana del lenguaje, nil siempre vale false, todo lo demás, true. Hasta el 0.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; puts &amp;quot;Cero vale true&amp;quot; if 0
Cero vale true
=&amp;amp;gt; nil
ruby-1.9.2-p0 &amp;amp;gt; puts &amp;quot;nils es siempre false&amp;quot; unless nil
nils es siempre false
=&amp;amp;gt; nil

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por cierto, el toString() es to_s, y nil en sí también es un objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; nil.to_s
=&amp;amp;gt; &amp;quot;&amp;quot;
ruby-1.9.2-p0 &amp;amp;gt; nil.to_s.empty?
=&amp;amp;gt; true
ruby-1.9.2-p0 &amp;amp;gt; nil.to_s.nil?
=&amp;amp;gt; false
ruby-1.9.2-p0 &amp;amp;gt; nil.nil?
=&amp;amp;gt; true

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y se agradece también que haya un método que chequee para nulos, nil?&lt;br /&gt;
Ahora un poco de tipos de variables, ya se ha visto que hay variables locales (title) y &amp;quot;de instancia&amp;quot; (@title), por consola obtenemos esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;amp;gt; title
NameError: undefined local variable or method `title&apos; for main:Object
from (irb):34
from /home/case/.rvm/gems/ruby-1.9.2-p0@rails3/gems/railties-3.0.1/lib/rails/commands/console.rb:44:in `start&apos;
from /home/case/.rvm/gems/ruby-1.9.2-p0@rails3/gems/railties-3.0.1/lib/rails/commands/console.rb:8:in `start&apos;
from /home/case/.rvm/gems/ruby-1.9.2-p0@rails3/gems/railties-3.0.1/lib/rails/commands.rb:23:in `&apos;
from script/rails:6:in `require&apos;
from script/rails:6:in `&apos;
ruby-1.9.2-p0 &amp;amp;gt; @title
=&amp;amp;gt; nil

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como me imagino que todo heredará de Object, voy a echar un vistazo a la &lt;a title=&quot;RDoc de Object&quot; href=&quot;http://www.ruby-doc.org/core/classes/Object.html&quot; target=&quot;_blank&quot;&gt;documentación&lt;/a&gt; para hacerme una idea de que métodos heredan todos los objetos.&lt;br /&gt;
Tenemos .class, == o equal?, is_a? y bastantes métodos más. En general la sintaxis me parece... interesante... ahora voy a hacer un experimentillo de algo que me gustaba bastante hacer en PHP, aprovechando que el lenguaje es de tipado debil.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ruby-1.9.2-p0 &amp;gt; foo.class
 =&amp;gt; String 
ruby-1.9.2-p0 &amp;gt; foo = 0
 =&amp;gt; 0 
ruby-1.9.2-p0 &amp;gt; foo.class
 =&amp;gt; Fixnum 
ruby-1.9.2-p0 &amp;gt; puts &amp;quot;Ok&amp;quot; if foo == 0
Ok
 =&amp;gt; nil 
ruby-1.9.2-p0 &amp;gt; puts &amp;quot;Ok&amp;quot; if foo == &amp;quot;0&amp;quot;
 =&amp;gt; nil 
ruby-1.9.2-p0 &amp;gt; foo.to_s.encoding
 =&amp;gt; #&amp;lt;Encoding:US-ASCII&amp;gt; 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfecto, ha respondido maravillosamente a las patochadas que he hecho, y de propina, he descubierto un método que devuelve el encoding de las cadenas, jeje.&lt;br /&gt;
Bueno, como todavía voy por el punto 4.2.4 y según la barra de desplazamiento me queda la mitad... mañana más y mejor.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Un poco de dinamismo</title>
      <link>http://www.aguasnegras.es/blog/2011/02/20-Un+poco+de+dinamismo.html</link>
      <pubDate>dom., 20 feb. 2011 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2011/02/20-Un+poco+de+dinamismo.html</guid>
      	<description>
	&lt;p&gt;Siguiendo con el tutorial, ya sé añadir páginas y enrutarlas, va siendo hora de añadir algo de contenido dinámico a las páginas. Voy a hacer que el título cambie según la página en la que este. Y esto es lo que voy a chequear con TDD, es decir, que al solicitar /pages/home el título vale Home y que al solicitar /pages/about, el título vale About.&lt;br /&gt;
En rspec, quedaría algo así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
describe &amp;quot;GET &apos;home&apos;&amp;quot; do
it &amp;quot;should be successful&amp;quot; do
get &apos;home&apos;
response.should be_success
end
it &amp;quot;should have the right title&amp;quot; do
get &apos;home&apos;
response.should have_selector(&amp;quot;title&amp;quot;,
:content =&amp;amp;gt; &amp;quot;Home&amp;quot;);
end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El segundo caso, obviamente hay que añadirlo a todas las definiciones. Por otra parte la línea clave es bastante obvia, el response debe contener una etiqueta HTML title que contenga &amp;quot;Home&amp;quot;, que contenga, es decir que si pongo &amp;quot;This is my Home&amp;quot; seguiría tirando... bueno, no esta mal.&lt;br /&gt;
Ejecuto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app/spec$ rspec controllers/
...
Finished in 1.28 seconds
6 examples, 3 failures

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eso es, mis 3 primeras pruebas siguen funcionando y las tres nuevas fallan, estoy en Red. Hora de ir a Green.&lt;br /&gt;
En primero lugar el tutorial me recomienda que borre el application.erb.html que hay en app/views/layouts, después de echarle un vistazo intuyo que será porque usa algo del estilo tiles o facelets para hacer un patrón composite sobre las páginas.&lt;br /&gt;
Borrado.&lt;br /&gt;
Ahora en el home.erb.html tengo que escribir todo el HTML. Completo. Esta clarísimo que el application.erb.html es para hacer de plantilla.&lt;br /&gt;
En fín, que escribo una página guarri y le pongo esto en title: &amp;quot;Ruby on Rails Tutorial Sample App | Home&amp;quot;.&lt;br /&gt;
Voy a pasar rspec a ver si ya estoy en Green. Efectivamente, dos fallos, las dos páginas que no son Home, hora de modificarlas.&lt;br /&gt;
Se modifican, añadiendo un contenido algo distinto para cada una y andando, ya tenemos las páginas listas. Pego un rails s y efectivamente en &lt;a href=&quot;http://localhost:3000/pages/home&quot;&gt;http://localhost:3000/pages/home&lt;/a&gt; tengo el home, y las demás están en contact y en about.&lt;br /&gt;
Problemas:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Me he cargado toda la estructura de plantillas....&lt;/li&gt;
	&lt;li&gt;Poner el título en HTML plano a pelete tiene de dinámico lo mismo que un triciclo de vehículo...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo primero que sugiere el tutorial es poner el título en el action de cada página mediante una variable de instancia. Las variables de instancia se definen especificando una @ delante del nombre (en este caso va a ser @title) y como característica fundamental tienen que toda variable de instancia creada en el action es expuesta automáticamente a la vista... El primer paso entonces es de Java old-school, el controlador pages_controller.rb queda así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;class PagesController &amp;amp;lt; ApplicationController
def home
@title = &amp;quot;Home&amp;quot;
end
def contact
@title = &amp;quot;Contact&amp;quot;
end

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt; def about
@title = &amp;quot;About&amp;quot;
end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el title en las páginas quedaría así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
Ruby on Rails Tutorial Sample App | &amp;amp;lt;%=@title%&amp;amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;¿Alguien dijo scriptlets? Pues a ésto se le llama Embedded Ruby ERb, de ahí la extensión de las páginas.&lt;br /&gt;
Y ahora por seguir el orden inverso, voy a crear la plantilla para aplicársela a todas las páginas...&lt;br /&gt;
Para ello hay que crear en views/layout un archivo llamado application.html..erb... oh, wait... :S al parecer el nombre es obligatorio, y el contenido es este:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;amp;lt;!DOCTYPE html&amp;amp;gt;
&amp;amp;lt;html&amp;amp;gt;
&amp;amp;lt;head&amp;amp;gt;
&amp;amp;lt;title&amp;amp;gt;Ruby on Rails Tutorial Sample App | &amp;amp;lt;%= @title %&amp;amp;gt;&amp;amp;lt;/title&amp;amp;gt;
&amp;amp;lt;%= csrf_meta_tag %&amp;amp;gt;
&amp;amp;lt;/head&amp;amp;gt;
&amp;amp;lt;body&amp;amp;gt;
&amp;amp;lt;%= yield %&amp;amp;gt;
&amp;amp;lt;/body&amp;amp;gt;
&amp;amp;lt;/html&amp;amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El csrf_meta_tag es código que se inserta para evitar &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_request_forgery&quot; target=&quot;_blank&quot;&gt;CSRF&lt;/a&gt;, y el yield es el que lleva el cuerpo de la página, todo se ejecuta a la hora de traducir el erb a html.&lt;br /&gt;
Y ahora le quito la basurilla a las demás páginas. rspec controllers/ y todo sigue en Green.&lt;br /&gt;
Con esto se da por terminado el capítulo, ahora hay que añadir a git, y hacer un merge:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app$ git add .
case@aesir:~/RoR/proyectos/sample_app$ git commit -m &amp;quot;Se acabó la parte de páginas dinámicas y testing&amp;quot;[static-pages 3baeab7] Se acabó la parte de páginas dinámicas y testing
8 files changed, 82 insertions(+), 15 deletions(-)
create mode 100644 app/controllers/pages_controller.rb
create mode 100644 app/helpers/pages_helper.rb
create mode 100644 app/views/pages/about.html.erb
create mode 100644 spec/controllers/pages_controller_spec.rb
case@aesir:~/RoR/proyectos/sample_app$ git checkout master
Switched to branch &apos;master&apos;
case@aesir:~/RoR/proyectos/sample_app$ git merge static-pages
Updating dd987a3..3baeab7
Fast-forward
app/controllers/pages_controller.rb       |   13 +++++++++
app/helpers/pages_helper.rb               |    2 +
app/views/layouts/application.html.erb    |   18 +++++--------
app/views/pages/about.html.erb            |    7 +++++
app/views/pages/contact.html.erb          |    5 +++
app/views/pages/home.html.erb             |    6 ++++
config/routes.rb                          |    5 +++
spec/controllers/pages_controller_spec.rb |   41 +++++++++++++++++++++++++++++
8 files changed, 86 insertions(+), 11 deletions(-)
create mode 100644 app/controllers/pages_controller.rb
create mode 100644 app/helpers/pages_helper.rb
create mode 100644 app/views/pages/about.html.erb
create mode 100644 app/views/pages/contact.html.erb
create mode 100644 app/views/pages/home.html.erb
create mode 100644 spec/controllers/pages_controller_spec.rb
case@aesir:~/RoR/proyectos/sample_app$ rspec spec/
......
Finished in 0.51904 seconds
6 examples, 0 failures
case@aesir:~/RoR/proyectos/sample_app$ git push
Counting objects: 38, done.
Compressing objects: 100% (26/26), done.
Writing objects: 100% (28/28), 2.79 KiB, done.
Total 28 (delta 7), reused 0 (delta 0)
To git@github.com:agustinventura/sample_app.git
dd987a3..3baeab7  master -&amp;amp;gt; master

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y bueno, ¿qué he hecho aquí? Pues básicamente, bichear con las vistas. He aprendido a utilizar el mecanismo de template de rails (aunque habría que ahondar, ver como hacer componentes, etc...) y a pasar variables a las páginas.&lt;br /&gt;
Ahora voy a hacer los ejercicios propuestos. En general son bastante sencillos.&lt;br /&gt;
El primero es repetir los pasos que ya hice al final del &lt;a title=&quot;Comenzando el Testeo&quot; href=&quot;http://aguasnegras.es/wp/?p=72&quot; target=&quot;_blank&quot;&gt;post anterior&lt;/a&gt;, básicamente, modificar el pages_controller.rb, modificar el routes.rb y crear el Help.html.erb. Para ello, ya se sabe, primero los tests, después Red y después Green, así que toca modificar el pages_controller_spec.rb&lt;br /&gt;
Listo, bastante fácil.&lt;br /&gt;
El siguiente es modificar el fichero de pruebas para que concatene dos cadenas a la hora de chequear la validez del título. Es quizás más duro porque es Ruby a palo seco y mucho no entiendo, pero vamos, entiendo que la solución es algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
before(:each) do
    @base_title = &amp;quot;Ruby on Rails Tutorial Sample App &amp;quot;
  end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejecuto y todo guay. No termino de entender muy bien eso del before(:each) do... pufff molaría más entender Ruby, pero digo yo que ya progresaré, por hoy ya esta bien.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Comenzando el Testeo</title>
      <link>http://www.aguasnegras.es/blog/2011/02/16-Comenzando+el+Testeo.html</link>
      <pubDate>mié., 16 feb. 2011 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2011/02/16-Comenzando+el+Testeo.html</guid>
      	<description>
	&lt;p&gt;Estoy rememorando mi trabajo de hace 8 horas... variables que no sabes si se usan en otro sitio, temor a limpiar cosas, en fín... una pesadilla. Por eso, ESTE es el momento de empezar el testing en la aplicación RoR, he hecho un controlador (vacío, sí) y es hora de asegurarnos que ahora y siempre haga lo que tiene que hacer (nada).&lt;br /&gt;
El tutorial, aparte de recomendar TDD y contarte que RSpec es un domain specific language para hacer pruebas en Ruby, dice de instalar autotest, una herramienta que ejecuta continuamente las pruebas sobre los archivos cambiados. Vaya, que si toco un controlador me ejecuta las pruebas dándome feedback instantáneo, una primera aproximación a la integración contínua.&lt;br /&gt;
Amos a ello.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ gem install autotest -v 4.4.6
$ gem install autotest-rails-pure -v 4.1.2

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para lo demás recomiendan seguir &lt;a href=&quot;http://automate-everything.com/2009/08/gnome-and-autospec-notifications/&quot;&gt; este tutorial &lt;/a&gt;, que para mi sorpresa es de un compi de aquí de Sevilla y escrito en perfecto cristiano.&lt;br /&gt;
Se resume en:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ gem install ZenTest
$ gem install redgreen
$ sudo apt-get install libnotify-bin

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No he ejecutado con sudo, espero que no pase nada, si no... habrá que arreglarlo que es lo divertido de esto. Además en el script que recomienda Manuel Morales, me he permitido quitar todas las referencias a imágenes, que paso de ellas.&lt;br /&gt;
Sigo con el tutorial en sí. Se hace una breve introducción a TDD y el ciclo &amp;quot;Red, Green, Refactor&amp;quot;.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Red: Se escribe un test (o tests) que falle&lt;/li&gt;
	&lt;li&gt;Green: Se escribe un test (o tests) que funcione&lt;/li&gt;
	&lt;li&gt;Refactor: Se refactoriza el código, es la hora de eliminar duplicación, aplicar patrones, lo que se me ocurra para que quede bien.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para empezar a picar los tests en rojo, se recomienda eliminar primero los tests de views y helpers, para mantenerlos todos juntos. A mí a priori no me parece buena idea, prefiero mantenerlo todo en limpito y separado, pero el tutorial no lo he hecho yo, así que nada:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app$ rm -rf spec/views/
case@aesir:~/RoR/proyectos/sample_app$ rm -rf spec/helpers

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora abro el test que ha quedado, en /spec/controller y... madre mía, esto no lo entiende ni dios... y dice el colega que se parece al inglés y que es fácil de usar... joder, si el lo dice, pos vale. Analizando este código según lo explicado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
describe &amp;quot;GET &apos;home&apos;&amp;quot; do
  it &amp;quot;should be successful&amp;quot; do
    get &apos;home&apos;
    response.should be_success
  end
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La primera línea NO hace nada, solo dice qué hace el test.&lt;br /&gt;
La segunda línea dice que el test debería ser correcto, vaya que tampoco hace nada.&lt;br /&gt;
La tercera línea ya si hace una petición GET a /pages/home.&lt;br /&gt;
Y la cuarta simplemente comprueba que el resultado tiene un código 200.&lt;br /&gt;
Moraleja... 4 líneas para 2 funcionales... un poco boilerplate.&lt;br /&gt;
Ejecuto los tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app$ rspec /spec
/home/case/.rvm/gems/ruby-1.9.2-p0@rails3/gems/rspec-core-2.3.1/lib/rspec/core/configuration.rb:388:in `load&apos;: no such file to load -- /spec (LoadError)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ufff... pos vamos bien... el tutorial es de &amp;quot;mucha&amp;quot; ayuda, recomienda desinstalar rspec y volverlo a instalar.&lt;br /&gt;
El fallo sin embargo parece que viene dado por el no such file to load... hmm, lo mismo si pruebo pasándole como parámetro el test en sí...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app/spec/controllers$ rspec pages_controller_spec.rb
..
Finished in 0.61139 seconds
2 examples, 0 failures

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voilá... po vaya plan, que raro que falle cuando se le pasa el directorio... esto va a haber que mirarlo porque si no, promete ser un coñazo... Parece ser que si le paso como parámetro /spec/controllers también va... pos bueno, puede valer.&lt;br /&gt;
Ahora se me dice que arranque autotest... y falla también, en concreto falla redgreen, dice que no existe un archivo (que efectivamente no existe)... fuf, vaya plan, ¿no?&lt;br /&gt;
El problema parece que es de que &lt;a title=&quot;redgreen y test-unit&quot; href=&quot;http://kresimirbojcic.com/2009/09/redgreen-plugin-not-working-with-ruby-1-9-1/&quot; target=&quot;_blank&quot;&gt;redgreen necesita test-unit&lt;/a&gt;, pero para eso hay que actualizar gem, en total:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app$ gem update --system
case@aesir:~/RoR/proyectos/sample_app$ gem install test-unit -v 1.2.3

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se ejecuta... y vuelve a fallar, joder, menuda CHUSTA, paso del autotest.&lt;br /&gt;
La siguiente sección habla de Spork, un servidor de pruebas que el mismo tutorial dice que es experimental y que si se quiere, que se salte esa sección... maaadre mía, así será, yo paso.&lt;br /&gt;
Sigo, con el lío, hacer un test Red para la página &amp;quot;about&amp;quot;, copio y pego en el mismo pages_controller_spec.rb el de home, pero cambiando &amp;quot;home&amp;quot; por &amp;quot;about&amp;quot; y va que chuta. Lo ejecuto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/sample_app/spec/controllers$ rspec pages_controller_spec.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y todo correcto, 3 testes, 1 fallo, no hay route para la acción about en el controlador pages.&lt;br /&gt;
Una pequeña parte que me he saltado es que esto comprueba si la acción exista, pero claro... que exista la acción no significa que exista la página como tal, jeje.&lt;br /&gt;
Para eso hay que usar un render_views justo debajo de la declaración del PagesController:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
describe PagesController do
render_views

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez hecho esto, a convertir ese Red en un Green. Pasos a dar:&lt;br /&gt;
Añadir accion al controlador: Es decir, al final de pages_controller.rb añadir esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
def about
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Añadir el about al route: En routes.rb añadir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
get &amp;quot;pages/about&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, crear la vista, el about.html.erb&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;amp;lt;h1&amp;amp;gt;Pages#about&amp;amp;lt;/h1&amp;amp;gt;
&amp;amp;lt;p&amp;amp;gt;Find me in app/views/pages/about.html.erb&amp;amp;lt;/p&amp;amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y vamos a ver si da green... Sí, listo.&lt;br /&gt;
Reflexión, en verdad este capítulo para lo que sirve más bien es para comprobar si tenemos asentados los conocimientos relativos al enrutamiento de peticiones, aparte de configurar el tema de pruebas.&lt;br /&gt;
En cuanto a las pruebas... pues mal, no sé si será el rspec en particular o qué, pero entre los problemas y las investigaciones que he hecho, no parece que por ejemplo redgreen sea lo más estable del mundo... y lo del Spork... para echarle de comer aparte.&lt;br /&gt;
En fín, tampoco pasa nada por estar ejecutando las pruebas a manubrio en otra consola, no hay que ser tan exigente.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Bases de Datos para Desarrolladores Java - Integridad Referencial</title>
      <link>http://www.aguasnegras.es/blog/2011/02/01-Bases+de+Datos+para+Desarrolladores+Java+-+Integridad+Referencial.html</link>
      <pubDate>mar., 1 feb. 2011 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2011/02/01-Bases+de+Datos+para+Desarrolladores+Java+-+Integridad+Referencial.html</guid>
      	<description>
	&lt;p&gt;Como el entorno de desarrollo se ha caído y llevo dos horas aburrido, sigo.&lt;/p&gt;
&lt;p&gt;Segundo Ítem: Usar siempre &lt;strong&gt;SIEMPRE&lt;/strong&gt; la integridad referencial.&lt;/p&gt;
&lt;p&gt;O lo que es lo mismo, si usamos MySQL &lt;strong&gt;NO &lt;/strong&gt;usar MyIsam, ya que no tiene soporte para integridad referencial.&lt;/p&gt;
&lt;p&gt;Hay gente que dice que trabajar sin integridad referencial es más rápido y cómodo. Es verdad, pero al final es como dispararse en el pie. Muchas veces la integridad referencial te salva de cometer errores de calado. Por ejemplo, si borramos los usuarios de un foro, ¿quién sale como autor de sus posts? Por tanto no podemos &amp;quot;borrar&amp;quot; los usuarios, hay que recurrir a un &amp;quot;borrado lógico&amp;quot;, es decir, un campo activo o borrado o como se le quiera llamar. El inconveniente, que puede ser que nunca borremos.&lt;/p&gt;
&lt;p&gt;Otra ventaja colateral es que las claves ajenas, suelen estar siempre indexadas, por tanto en consultas de join, habrá un incremento del rendimiento frente a sistemas como MyIsam.&lt;/p&gt;
&lt;p&gt;Más ventajas (no estrictamente derivadas de la integridad referencial, sino que es aplicable a todo el diseño de la base de datos), es las restricciones sobre datos. Supongamos que tenemos un formulario para introducir nuevos posts y que en el artefacto encargado de realizar ese insert, realizamos las validaciones oportunas: campos que no estén en blanco, que exista el usuario que realiza el post, etc... Supongamos ahora que queremos hacer otro formulario similar en otra zona, podemos repetir el código de las validaciones, o podríamos concentrar esas validaciones en la base de datos y están en un único sitio. Además en general la sintaxis es mucho menos engorrosa y más natural en SQL. Por otra parte si en el futuro otro desarrollador realiza otro formulario contra esa tabla, tendrá las restricciones de manera explícita, sin tener que buscar código anterior que utilice dicha tabla para comprobar las restricciones.&lt;/p&gt;
&lt;p&gt;Para terminar el asunto, si no queremos integridad referencial (que puede ser), a lo mejor es que ni siquiera necesitamos una base de datos SQL. Existen multitud de sistemas &lt;a title=&quot;Wikipedia, NoSQL&quot; href=&quot;http://es.wikipedia.org/wiki/NoSQL&quot; target=&quot;_blank&quot;&gt;NoSQL&lt;/a&gt; enfocados a sistemas sin integridad referencial: &lt;a title=&quot;MongoDB&quot; href=&quot;http://www.mongodb.org/&quot; target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt;, &lt;a title=&quot;Apache Cassandra&quot; href=&quot;http://cassandra.apache.org/&quot; target=&quot;_blank&quot;&gt;Cassandra&lt;/a&gt;, &lt;a title=&quot;Apache CouchDB&quot; href=&quot;http://couchdb.apache.org/&quot; target=&quot;_blank&quot;&gt;CouchDB&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Bases de Datos para Desarrolladores Java - Introducción e Índices</title>
      <link>http://www.aguasnegras.es/blog/2011/01/25-Bases+de+Datos+para+Desarrolladores+Java+-+Introducci%C3%B3n+e+%C3%8Dndices.html</link>
      <pubDate>mar., 25 ene. 2011 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2011/01/25-Bases+de+Datos+para+Desarrolladores+Java+-+Introducci%C3%B3n+e+%C3%8Dndices.html</guid>
      	<description>
	&lt;p&gt;En general en una aplicación Java cualquiera los problemas empiezan desde abajo, con el diseño de la base de datos. He visto (y trabajo) con bases de datos en las que una tabla tiene 5 campos de primary key y uno solo de información. Que esto es un desperdicio se ve a simple vista. Después vienen los parches a nivel superior (en Java) y se termina yendo al infierno el rendimiento de la aplicación.&lt;br /&gt;
Lo bonito, y lo malo del diseño de base de datos es que no te terminas dando cuenta de que esta mal hasta que la aplicación esta avanzada, empieza a crecer y en ese momento es tarde para cambiarlo. Vamos, que es un infierno.&lt;/p&gt;
&lt;p&gt;Lo mejor de toda esta historia es que cada uno lo ve de su manera... efectivamente, para cada guía, suele haber una contraguía, así que vamos a ver si &lt;strong&gt;todo el que lea esto se anima a discutir lo que aquí digo.&lt;/strong&gt; (gracias :))&lt;br /&gt;
En general hay una serie de guías que &lt;strong&gt;no &lt;/strong&gt;te enseñan en la facultad, estas guías te las van dando la experiencia y el instinto (recordando siempre que hay gente que no aprende ni a palos y que además tiene el instinto atrofiado), pero hace tiempo que ví en Stack Overflow un &lt;a title=&quot;Database development mistakes&quot; href=&quot;http://stackoverflow.com/questions/621884/database-development-mistakes-made-by-application-developers&quot; target=&quot;_blank&quot;&gt;resumen bastante bueno&lt;/a&gt; y descubrí también un sitio dedicado a tratar el tema en más profundidad, &lt;a title=&quot;Use the Index, Luke&quot; href=&quot;http://use-the-index-luke.com/&quot; target=&quot;_blank&quot;&gt;Use the Index, Luke&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voy a ver si escribo un par de artículos tratando los temas que considero importantes o interesantes para un desarrollador Java. Por tanto, no voy a hablar de SQL (que también puede ser que las consultas estén mal construidas), ya que asumo que se usa un Hibernate o cualquier implementación de JPA, hecha por gente más lista que yo. Voy a hablar del diseño de la base de datos y la forma de sacarle el mayor partido posible a la misma.&lt;/p&gt;
&lt;p&gt;Un breve recordatorio de la teoría más esencial y fundamental para esto.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Base de Datos: Para mí es un conjunto de datos estructurado e interrelacionado. Punto. Para más detalles, la &lt;a title=&quot;Base de Datos, Wikipedia.&quot; href=&quot;http://es.wikipedia.org/wiki/Base_de_datos&quot; target=&quot;_blank&quot;&gt;wikipedia&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;Índices: La información de la base de datos esta ordenada (estructurada) siguiendo unos determinados índices. Estos son implícitos (clave primaria) o explícitos (create index...). La utilidad se puede examinar pensando en una guía de teléfonos. La guía de teléfonos (en papel :P) se encuentra indexada por primer apellido. Sin embargo en una base de datos podemos indexar por primer apellido, segundo apellido, nombre o incluso número de teléfono, según nos sea conveniente. ¿Para qué es útil ésto? Para nada, excepto para flexibilizar el acceso a la información, lo que es lo mismo, poder buscar (más rápido, más eficientemente) por distintos criterios. Normalmente en la guía de teléfonos buscábamos por primer apellido, después por segundo apellido y por último, por nombre. En una aplicación normalmente se pide buscar por cualquiera de ellos o combinación.&lt;/li&gt;
	&lt;li&gt;Por último la dicotomía de siempre... memoria vs. ciclos (y potencialmente más memoria). Un índice es un &lt;a title=&quot;Wikipedia, árbol binario&quot; href=&quot;http://es.wikipedia.org/wiki/Arbol_binario&quot; target=&quot;_blank&quot;&gt;B-Tree&lt;/a&gt; normalmente, por tanto mantenerlo ocupa espacio en disco y, naturalmente, hay que calcularlo y mantenerlo actualizado. Por tanto no puedo indexar todo lo que quiera o lo que me gustaría. En el ejemplo de la guía, es como si tuviéramos un tomo por cada uno de los criterios de ordenación (cosa que podríamos hacer, pero... buff..., ¿no?). Aparte la guía hay que hacerla nueva todos los años.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y aquí va la primera perla de sabiduría del artículo de Stack Overflow, uso apropiado de índices:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Las claves externas (fóraneas, o como se le diga en español) deben estar siempre indexadas.&lt;/li&gt;
	&lt;li&gt;Si se usa un campo en una cláusula &lt;em&gt;where&lt;/em&gt; debería estar indexado.&lt;/li&gt;
	&lt;li&gt;En el caso anterior deberías plantearte tener índices de varias columnas  según las consultas que hagas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eso es todo, de cosecha propia un par de recomendaciones:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Las claves primarias están siempre indexadas, no hace falta que se cree un índice sobre ellas (la guía de teléfonos YA viene indexada por apellidos y nombre).&lt;/li&gt;
	&lt;li&gt;No siempre debes tener un índice en un campo que se usa en un &lt;em&gt;where&lt;/em&gt;, puede ser que solo lo uses en una consulta que se ejecuta raramente y no te compense, o cualquier otro motivo. Es decir, conoce cuando saltarte la regla.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Poco más, a ver si se me van ocurriendo más cosas o alguien comenta algo.&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;line-height: 24px;&quot;&gt;P.D.: No, no aparezco en la guía de teléfonos, marqué la opción de no aparecer :)&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Instalación de Ruby on Rails en Ubuntu</title>
      <link>http://www.aguasnegras.es/blog/2010/12/27-Instalaci%C3%B3n+de+Ruby+on+Rails+en+Ubuntu.html</link>
      <pubDate>lun., 27 dic. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/12/27-Instalaci%C3%B3n+de+Ruby+on+Rails+en+Ubuntu.html</guid>
      	<description>
	&lt;p&gt;En este post he encontrado bastante bien resumidos los pasos:&lt;br /&gt;
&lt;a href=&quot;http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you/&quot;&gt;Life of a Radar&lt;/a&gt;&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Sirviendo contenido estático</title>
      <link>http://www.aguasnegras.es/blog/2010/12/27-Sirviendo+contenido+est%C3%A1tico.html</link>
      <pubDate>lun., 27 dic. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/12/27-Sirviendo+contenido+est%C3%A1tico.html</guid>
      	<description>
	&lt;p&gt;Después de unas buenas (y merecidas) vacaciones, sigo con el tutorial de RoR, esta vez en el capítulo tres voy a empezar a desarrollar una aplicación completa y entendiéndola en profundidad, ya no solo voy a usar scaffolding y punto.&lt;br /&gt;
Empiezo por la sección de &amp;quot;Contenido Estático&amp;quot;, me parece cojonuda la idea, siempre es buena idea maximizar a tope el contenido estático, ya que no solo salva tiempo de CPU, sino que además permite que funcionen las técnicas de cacheo de apache, etc...&lt;br /&gt;
Creo el proyecto nuevo tal y como se especifica.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ rails new sample_app -T

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El -T es nuevo, por lo visto es para NO crear un directorio de tests asociado al framework de pruebas unitarias Test::Unit, ya que se va a utilizar otro llamado RSpec.&lt;br /&gt;
Ahora edito el Gemfile para incluir las dependencias, incluyendo sqlite y rspec:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ cat Gemfile 
source &apos;http://rubygems.org&apos;

gem &apos;rails&apos;, &apos;3.0.1&apos;

gem &apos;sqlite3-ruby&apos;, &apos;1.2.5&apos;, :require =&amp;gt; &apos;sqlite3&apos;

group :development do
	gem &apos;rspec-rails&apos;, &apos;2.3.0&apos;
end

group :test do
	gem &apos;rspec&apos;, &apos;2.3.0&apos;
	gem &apos;webrat&apos;, &apos;0.7.1&apos;
end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En un principio y sin saber muy bien como va esto, diría que son como tasks de Ant o fases del ciclo de vida de Maven, es decir, los gems solo se instalan para determinados &amp;quot;perfiles&amp;quot; de compilación, sqlite sería siempre pero rspec solo cuando hagamos &amp;quot;development&amp;quot; o &amp;quot;test&amp;quot;, a ver si lo explican más adelante.&lt;br /&gt;
Hago un bundle install para instalar RSpec y como esta tardando, voy a mirar en la wikipedia algo de este framework.&lt;br /&gt;
Vaya artículo más &amp;quot;escueto&amp;quot; dice que es un framework para Behavior Driven Development (primera vez en mi vida que escucho esto) y que incluye su propio mock framework, cosa que está muy bien pensada, en general pruebas unitarias sin un mock framework se quedan un poco cortas. Y con esto ya me he respondido una de mis primeras preguntas sobre frameworks de pruebas unitarias, si que existen, al menos dos.&lt;br /&gt;
Anda, ha fallado el bundle install:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
Installing nokogiri (1.4.4) with native extensions /home/case/.rvm/rubies/ruby-1.9.2-p0/lib/ruby/1.9.1/rubygems/installer.rb:483:in `rescue in block in build_extensions&apos;: ERROR: Failed to build gem native extension. (Gem::Installer::ExtensionBuildError)

/home/case/.rvm/rubies/ruby-1.9.2-p0/bin/ruby extconf.rb 
checking for libxml/parser.h... yes
checking for libxslt/xslt.h... no
-----
libxslt is missing.  please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Venga, pues voy a pegarle un apt-get de las dependencias para asegurarme que lo tengo todo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
sudo apt-get install libxslt-dev libxml2-dev

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y efectivamente, libxml2 ya la tenía pero no libxslt. Hago el bundle install de nuevo.&lt;br /&gt;
Para instalar los archivos necesarios de RSpec:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ rails generate rspec:install

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora cambio el README, hago el primer commit en git, creo el repositorio en GitHub y lo despliego en Heroku.&lt;br /&gt;
Seguimos con contenidos estáticos, por defecto en el directorio /public de la aplicación se encuentran los contenidos estáticos y accesibles directamente, es decir, todo lo que hay en esta carpeta es servido al cliente sin mayor problema.&lt;br /&gt;
Ahí esta index.html que es la página que se sirve por defecto al primer request y lo dicho, es estática.&lt;br /&gt;
Como ya he visto además, Rails puede mezclar código Ruby y HTML al más puro estilo jsp-old-skool... hmm... no sé si eso es una ventaja o un inconveniente y me surge otra duda ¿hay algún tipo de composite pattern?¿Un Tiles o un Facelets? In tutorial we trust...&lt;br /&gt;
Muy bien, ahora lo que voy a hacer es crear un controlador para que sirva el contenido estático de la aplicación, es decir, voy a empezar a integrar el contenido estático con el MVC. El controlador va a servir la página About y la de Contact.&lt;br /&gt;
Creo un branch en git para ir haciendo el trabajo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
p$ git checkout -b static-pages

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, para crear el controlador que las va a usar se usará generate. Generate es un script de Rails que genera controladores, toma como parámetros el nombre del controlador y las acciones que ejecuta, es decir:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ rails generate controller Pages home contact

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La salida del generate dá una lista de las acciones efectuadas&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
create  app/controllers/pages_controller.rb
       route  get &amp;quot;pages/contact&amp;quot;
       route  get &amp;quot;pages/home&amp;quot;
      invoke  erb
      create    app/views/pages
      create    app/views/pages/home.html.erb
      create    app/views/pages/contact.html.erb
      invoke  rspec
      create    spec/controllers/pages_controller_spec.rb
      create    spec/views/pages
      create    spec/views/pages/home.html.erb_spec.rb
      create    spec/views/pages/contact.html.erb_spec.rb
      invoke  helper
      create    app/helpers/pages_helper.rb
      invoke    rspec
      create      spec/helpers/pages_helper_spec.rb

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Primero se crea el pages_controller.rb, después se crean los routes de ambas acciones, se invoca erb para generar las páginas (vistas) de cada una de las acciones y por último con rspec se generan las pruebas y algunos helpers.&lt;br /&gt;
Las líneas de route anteriores implican que si hago una petición get a sample_app/pages/home y sample_app/pages/contact voy a obtener las páginas generadas por erb. Compruebo y todo correcto (que plantilla más fea).&lt;br /&gt;
Es hora de hacer que se muestre una página html plana, para ello, abro el controlador que acabo de crear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
class PagesController &amp;lt; ApplicationController
  def home
  end

  def contact
  end

end

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Efectivamente, las acciones están vacías, así que salvo la lógica que esté definida por defecto en ApplicationController, no se ejecuta nada, habrá que redirigir a la vista, ¿no?&lt;br /&gt;
Punto interesante, en Ruby on Rails, se ejecuta el controlador y a continuación se renderiza la vista, es decir, no voy a tener que &amp;quot;redirigir&amp;quot;... cosa que por otra parte ya había comprobado experimentalmente, la vista estaba saliendo pero el controlador estaba vacío.&lt;br /&gt;
Si abro la vista en sample_app/app/views/pages, me encuentro esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
&amp;amp;lt;h1&amp;amp;gt;Pages#home&amp;amp;lt;/h1&amp;amp;gt;
&amp;amp;lt;p&amp;amp;gt;Find me in app/views/pages/home.html.erb&amp;amp;lt;/p&amp;amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es decir, html SIN encabezado, ni body, ni nada. Solo la manteca. Esta bien, esto va indicando a algún sistema de plantillas como pensaba más arriba.&lt;br /&gt;
Se acabó. Así se sirve contenido estático.&lt;br /&gt;
Generalizando, con generate se crea el controlador, las vistas, etc y en views tenemos las páginas en las cuales puedo poner el html relevante.&lt;br /&gt;
Esta bien, se sube a git y palante.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
$ git add .
$ git commit -am &amp;quot;Añadido controlador Pages (contenido estático)&amp;quot;

&lt;/code&gt;&lt;/pre&gt;

	</description>
    </item>
    <item>
      <title>Seguimos con el Tuíte, ahora vamos a crear los microposts</title>
      <link>http://www.aguasnegras.es/blog/2010/12/02-Seguimos+con+el+Tu%C3%ADte%2C+ahora+vamos+a+crear+los+microposts.html</link>
      <pubDate>jue., 2 dic. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/12/02-Seguimos+con+el+Tu%C3%ADte%2C+ahora+vamos+a+crear+los+microposts.html</guid>
      	<description>
	&lt;p&gt;La estructura de un micropost es fácil a más no poder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content (string)&lt;/li&gt;
&lt;li&gt;user_id (integer)&lt;/li&gt;
&lt;li&gt;que guay que rails me genera solo el id para los microposts :)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así que nada, tiro de nuevo de scaffolding:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/RoR/proyectos/demo_app$ rails generate scaffold Micropost content:string user_id:integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y hago el migrate para crearlo en la base de datos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/RoR/proyectos/demo_app$ rake db:migrate
(in /home/case/RoR/proyectos/demo_app)
==  CreateMicroposts: migrating ===============================================
-- create_table(:microposts)
   -&amp;amp;gt; 0.0061s
==  CreateMicroposts: migrated (0.0066s) ======================================
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si hago un cat del route.rb, me sale que efectivamente ha añadido solo los microposts&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;cat config/routes.rb
DemoApp::Application.routes.draw do
  resources :microposts

  resources :users
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto del router no lo veo yo muy claro, estaría bien profundizar en esta parte de la arquitectura, quiero decir, si tengo el controlador, ¿para qué es el router? hmmm&lt;br /&gt;
Como en el caso de Users, la combinación de métodos http con la url, me dá todas las acciones posibles, listar todos, crear, editar, ver y borrar, un CRUD de toda la vida, nada nuevo por aquí.&lt;br /&gt;
Esta vez voy a mirar el controlador pero voy a tratar de entender algo, el asunto en cuestión esta en app/controllers/microposts_controller.rb, la primera cosa que me llama la atención es que puede devolver la salida tanto en html como en xml y parece que nativamente, tiene sentido de cara a una integración con web services.&lt;br /&gt;
Aparte estan comentados los métodos a los que se responde, voy a mirar el método del formulario para crear un nuevo micropost (http://localhost:3000/microposts/new):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
form id=&amp;quot;new_micropost&amp;quot; class=&amp;quot;new_micropost&amp;quot; action=&amp;quot;/microposts&amp;quot; accept-charset=&amp;quot;UTF-8&amp;quot; method=&amp;quot;post&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahí esta, va en un post, creo uno y le doy a edit, ver código fuente:&lt;/p&gt;
&lt;p&gt;hmm... un poco más abajo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
input name=&amp;quot;_method&amp;quot; type=&amp;quot;hidden&amp;quot; value=&amp;quot;put&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Parece que sobreescribe el método con algún javascript de satanás... habrá que investigarlo también.&lt;br /&gt;
En el caso del enlace de borrar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;a href=&amp;quot;/microposts/1&amp;quot; data-confirm=&amp;quot;Are you sure?&amp;quot; data-method=&amp;quot;delete&amp;quot; rel=&amp;quot;nofollow&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahí tenemos también el método y el mensaje de confirmación para el borrado, está bien.&lt;br /&gt;
Evidentemente me deja crear un micropost con user_id = 2 sin problema, no se ha forzado la integridad referencial... aún.&lt;br /&gt;
Pero primero el tutorial me sugiere añadir un tamaño máximo al contenido de los micropost, 140, pero yo voy a escoger 144 que es 12^2 y me mola más...&lt;br /&gt;
Edito el modelo de micropost en app/models/micropost.rb&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/RoR/proyectos/demo_app$ cat app/models/micropost.rb
class Micropost &amp;amp;lt; ActiveRecord::Base 	validates :content, :length =&amp;amp;gt; { :maximum =&amp;amp;gt; 144}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Voy a probarlo... (con &lt;em&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis aliquet arcu vitae massa pharetra nec malesuada diam facilisis. Donec orci aliquam.&lt;/em&gt;) y...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;1 error prohibited this micropost from being saved:
Content is too long (maximum is 144 characters)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfecto, le quito una letra y pa dentro, funciona.&lt;br /&gt;
A por la integridad referencial. Vamos a ver, un usuario tiene muchos microposts... pues eso pero en inglés:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/RoR/proyectos/demo_app$ cat app/models/user.rb
class User &amp;amp;lt; ActiveRecord::Base
	has_many: micropost
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y claro, un micropost... &quot;pertenece&quot; a un usuario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;class Micropost &amp;amp;lt; ActiveRecord::Base 	belongs_to :user 	validates :content, :length =&amp;amp;gt; { :maximum =&amp;amp;gt; 144}
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El tutorial sugiere que se mire mediante la consola de rails, que me dá la impresión que es una especie de intérprete del sql de RoR, algo similar al intérprete de hql de Eclipse, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/RoR/proyectos/demo_app$ rails console
Loading development environment (Rails 3.0.1)
ruby-1.9.2-p0 &amp;amp;gt; first_user = User.first
SyntaxError: /home/case/RoR/proyectos/demo_app/app/models/user.rb:2: syntax error, unexpected &apos;:&apos;, expecting keyword_end
	has_many: micropost
	         ^
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yeeeppaaa, fallo de síntaxis! Corrijo y:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;Loading development environment (Rails 3.0.1)
ruby-1.9.2-p0 &amp;amp;gt; first_user = User.first
 =&amp;amp;gt; #
ruby-1.9.2-p0 &amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;ruby-1.9.2-p0 &amp;amp;gt; first_user.microposts
 =&amp;amp;gt; [#, #, #]
ruby-1.9.2-p0 &amp;amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hora de poner a prueba esa integridad referencial en la web... primero voy a hacer un db:migrate por lo que pueda pasar y a ver... Pues me deja, supongo que habrá que hacer algo más, se me estará escapando alguna cosa.&lt;br /&gt;
Sigo con el tutorial que ya entraremos en eso, digo yo.&lt;br /&gt;
Lo que viene ahora es una chapa de teoría y además muy parecida a lo que gasto yo en el trabajo, todas las clases del modelo heredan de ActiveRecord::Base (que algo me dice que implementa toda la funcionalidad CRUD parametrizando simplemente el nombre de tabla). Nota: Sería muy interesante ver si hay soporte para tipos de acceso a las colecciones, es decir, si el acceso a microposts se podría definir como lazy o eager a là JPA.&lt;br /&gt;
Los controladores heredan de ApplicationController que a su vez hereda de ActionController::Base (¿por qué algunas clases llevan el ::Loquesea y otras no?). El ActionController según dice el tutorial, aporta métodos de conveniencia para la gestión de http y generación de html, así como acceso a las entidades del modelo.&lt;br /&gt;
Pos mu bien.&lt;br /&gt;
Toca subida a GitHub y a Heroku, simplemente para refrescar la memoria con los comandos.
&lt;p&gt;El capítulo termina con una serie de comentarios (Strengths and Weaknesses), comentarios sobre las debilidades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No custom layout or styling. Hmm... esto no creo que sea realmente un problema, cualquier aplicación web tiene este problema al principio =)&lt;/li&gt;
&lt;li&gt;No static pages (like “Home” or “About”), tampoco creo que sea algún problema, digo yo que rails podrá servir contenido estático.&lt;/li&gt;
&lt;li&gt;No user passwords... bueno, ya puestos, podríamos tirar de LDAP... o algo asín, ¿alguien dijo soporte de certificado digital? Dios, mi trabajo me está obsesionando.&lt;/li&gt;
&lt;li&gt;No user images&lt;/li&gt;
&lt;li&gt;No signing in&lt;/li&gt;
&lt;li&gt;No security. Este resume el anterior y el de contraseñas ¿no? No creo que valga repetir ;P&lt;/li&gt;
&lt;li&gt;No automatic user/micropost association. Síiiii&lt;/li&gt;
&lt;li&gt;No notion of “following” or “followed”... ¿esto no sería una relación de User sobre sí mismo?&lt;/li&gt;
&lt;li&gt;No micropost feed&lt;/li&gt;
&lt;li&gt;No test-driven development. Me parece que es ponerse un poco pijo, pero vale.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No real understanding. Aquí estoy de acuerdo!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y fín, del capítulo, supongo que en el próximo empezará la manteca.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Capítulo Dos - Vamos a hacer un Twuttur en Ruby on Rails</title>
      <link>http://www.aguasnegras.es/blog/2010/11/25-Cap%C3%ADtulo+Dos+-+Vamos+a+hacer+un+Twuttur+en+Ruby+on+Rails.html</link>
      <pubDate>jue., 25 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/25-Cap%C3%ADtulo+Dos+-+Vamos+a+hacer+un+Twuttur+en+Ruby+on+Rails.html</guid>
      	<description>
	&lt;p&gt;Pues eso, utilizando &lt;a title=&quot;Wikipedia - Scaffolding&quot; href=&quot;http://en.wikipedia.org/wiki/Scaffold_(programming)&quot; target=&quot;_blank&quot;&gt;scaffolding&lt;/a&gt; a cascoporro vamos a hacer un Twuttur, la idea no es hacerme experto en RoR del tirón, sino ir poco a poco viendo la estructura en general y el funcionamiento de una aplicación.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rails new demo_app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ya tenemos la base creada. Edito el Gemfile, que creo recordar que contiene los módulos (Gems) de los que depende la aplicación. Lo dejo con esta pinta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;source &apos;http://rubygems.org&apos;

gem &apos;rails&apos;, &apos;3.0.1&apos;
gem &apos;sqlite3-ruby&apos;, &apos;1.2.5&apos;, :require =&amp;amp;gt; &apos;sqlite3&apos;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esc+:wq... entiendo que estoy diciendo que voy a usar rails 3.0.1 y sqlite3-ruby 1.2.5 lo cual depende de sqlite3. Para instalar estas dependencias:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora, antes de seguir, commit inicial a GitHub, creando previamente un repositorio.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;git init
Initialized empty Git repository in /home/case/RoR/proyectos/demo_app/.git/
case@aesir:~/RoR/proyectos/demo_app$ git add .
case@aesir:~/RoR/proyectos/demo_app$ git commit -m &amp;quot;Commit Inicial&amp;quot;
case@aesir:~/RoR/proyectos/demo_app$ git remote add origin git@github.com:agustinventura/demo_app.git
case@aesir:~/RoR/proyectos/demo_app$ git push origin master
Counting objects: 63, done.
Compressing objects: 100% (48/48), done.
Writing objects: 100% (63/63), 85.79 KiB, done.
Total 63 (delta 2), reused 0 (delta 0)
To git@github.com:agustinventura/demo_app.git
 * [new branch]      master -&amp;amp;gt; master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto, como he venido viendo, ya estoy listo para empezar a picar código.&lt;br /&gt;
En primer lugar, las entidades, hay dos claramente definidas con los siguientes atributos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;User: id (integer), name (string), mail (string)&lt;/li&gt;
	&lt;li&gt;Micropost: id (integer), content (string), user_id (integer)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Me gusta mucho que primero se definan las entidades conceptualmente y después nos metamos a ver si tablas en base de datos, si clases o qué... primero un modelo de datos consistente, el resto vendrá solo.&lt;br /&gt;
Ahora, se tira de scaffold para generar el User, importante, no se indica el id porque se genera automáticamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rails generate scaffold User name:string email:string
invoke  active_record
      create    db/migrate/20101123192053_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/unit/user_test.rb
      create      test/fixtures/users.yml
       route  resources :users
      invoke  scaffold_controller
      create    app/controllers/users_controller.rb
      invoke    erb
      create      app/views/users
      create      app/views/users/index.html.erb
      create      app/views/users/edit.html.erb
      create      app/views/users/show.html.erb
      create      app/views/users/new.html.erb
      create      app/views/users/_form.html.erb
      invoke    test_unit
      create      test/functional/users_controller_test.rb
      invoke    helper
      create      app/helpers/users_helper.rb
      invoke      test_unit
      create        test/unit/helpers/users_helper_test.rb
      invoke  stylesheets
      create    public/stylesheets/scaffold.css
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez más me encuentro con buenas prácticas embebidas (bonito palabro...), se generan automáticamente los tests unitarios. Muy bien.&lt;br /&gt;
Mirando bien la salida esta también el controlador y hasta el CSS!! Vamos, que esta listo para funcionar, solo hay que crear la base de datos.&lt;br /&gt;
Para eso se &amp;quot;migra&amp;quot; usando Rake, el tutorial promete explicar más adelante esto de las migraciones, de momento ejecuto el comando en plan script-kiddie:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rake db:migrate
(in /home/case/RoR/proyectos/demo_app)
==  CreateUsers: migrating ====================================================
-- create_table(:users)
   -&amp;amp;gt; 0.0285s
==  CreateUsers: migrated (0.0287s) ===========================================
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Comparando los tiempos que tarda mi portátil en ejecutar las cosas con el tutorial me entran ganas de llorar... pero no de ahorrar para comprar uno nuevo, jeje.&lt;br /&gt;
Arranco el servidor con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rails s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; tengo la aplicación. Joder, de momento es igual que la de ejemplo, lo mismo me he equivocao.&lt;br /&gt;
Pues no, es que esta en &lt;a href=&quot;http://localhost:3000/users&quot;&gt;http://localhost:3000/users&lt;/a&gt;, ha generado solo toda la funcionalidad CRUD, ahí tenemos un listado de usuarios (inicialmente vacío) con la opción de añadir nuevo y para los existentes, show, edit y destroy.&lt;br /&gt;
Se me ocurre que siendo un poco cabrón puedo inyectar código malicioso... a ver qué tratamiento hace por defecto, pero bueno, tampoco me voy a poner en ese plan, que hay más cosas que aprender.&lt;br /&gt;
Interesante, cuando le doy a destroy automáticamente me dispara un confirm javascript.&lt;br /&gt;
Ahora el tutorial pasa a una discusión sobre el MVC en Ruby on Rails. De entrada me llama la atención que el controlador invoca la clase que genera el html y es el controlador el que devuelve el html. Aparte, las peticiones pasan obligatoriamente por un router de Rails.&lt;br /&gt;
Y llegamos a la madre del cordero, la arquitectura REST. Simplificadamente, es algo para lo que la especificación de servlets de Java tiene soporte pero nunca se ha usado y la verdad sea dicha, a mí me parece extremadamente elegante. Consiste en usar el par url | método http para definir la acción que hace el usuario. Por ejemplo &lt;a href=&quot;http://localhost:3000/users&quot;&gt;http://localhost:3000/users&lt;/a&gt; | GET significa &amp;quot;quiero el listado de usuarios&amp;quot;, pero &lt;a href=&quot;http://localhost:3000/users&quot;&gt;http://localhost:3000/users&lt;/a&gt; | POST significa &amp;quot;quiero crear el usuario (cuyos datos van en el POST)&amp;quot;... espectacular, sencillo y se adapta como un guante al http.&lt;br /&gt;
La vista... la vista... jejeje... el users/index.html.erb es good old jsp como el que dice pero con Ruby dentro en vez de Java, la verdad que muchas veces echo de menos este enfoque en el mundo de componentes JSF, GWT, etc... En fín, a lo que iba, por lo visto el controlador carga la variable @users y el erb puede verla automáticamente.&lt;br /&gt;
Esta parte acaba con una reseña sobre el scaffolding, explicando, por ejemplo, que no te valida los datos (me autorrespondo), que no te genera un layout (vaya, esto es más plano que google) y que los tests generados son bastante inflexibles. Además no hay login ni autenticación de ningún tipo.&lt;br /&gt;
Bueno, poco a poco, ya es bastante que te genera el CRUD solo y de una forma bastante clara.&lt;br /&gt;
Para el próximo día me dejo de deberes la parte de microposts que incluye ya cosas como validaciones y relaciones 1:n.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Aprendiendo Ruby on Rails - Resumen Capítulo Uno</title>
      <link>http://www.aguasnegras.es/blog/2010/11/21-Aprendiendo+Ruby+on+Rails+-+Resumen+Cap%C3%ADtulo+Uno.html</link>
      <pubDate>dom., 21 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/21-Aprendiendo+Ruby+on+Rails+-+Resumen+Cap%C3%ADtulo+Uno.html</guid>
      	<description>
	&lt;p&gt;Bueno, pues en el capítulo uno del tutorial he configurado el entorno y seguido un pequeño workflow de trabajo, desde la creación de la aplicación hasta su despliegue en Heroku, pasando por el control de versiones con Git y GitHub.&lt;/p&gt;
&lt;p&gt;El único inconveniente que le veo es que... efectivamente, no he aprendido nada de Ruby ni de Rails.&lt;/p&gt;
&lt;p&gt;Ahora pequeña lista de cosas que me gustan:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Ecosistema de herramientas bien acoplado y funcional (espectacular la comunicación Heroku - GitHub)&lt;/li&gt;
	&lt;li&gt;Generador de código automático (¿&lt;a title=&quot;Spring Roo&quot; href=&quot;http://www.springsource.org/roo&quot; target=&quot;_blank&quot;&gt;Spring Roo&lt;/a&gt;?)&lt;/li&gt;
	&lt;li&gt;El tutorial te hace seguir buenas prácticas y con herramientas modernas.&lt;/li&gt;
	&lt;li&gt;El entorno de desarrollo es UNIX!&lt;/li&gt;
	&lt;li&gt;No es necesario un IDE mamotrético, al menos de momento.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cosas que no me han gustado:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Todavía no he visto nada de código como tal, jeje.&lt;/li&gt;
	&lt;li&gt;Pequeños problemas en la instalación.&lt;/li&gt;
	&lt;li&gt;Algunos conceptos se dan demasiado rápido, habría que verlos más pausadamente (ver lista más abajo).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ahora voy a resumir los pasos de instalación en la Ubuntu 10.04:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Paquetes apt-get: gVim, Git, ruby, curl, &lt;del datetime=&quot;2010-11-24T16:11:06+00:00&quot;&gt;libruby1.8&lt;/del&gt;, zlib1g-dev, libssl-dev, libreadline5-dev, build-essential, rubygems, &lt;del datetime=&quot;2010-11-24T16:11:06+00:00&quot;&gt;irb&lt;/del&gt;, ri, &lt;del datetime=&quot;2010-11-24T16:11:06+00:00&quot;&gt;rdoc&lt;/del&gt;, rake, ruby1.8-dev, libopenssl-ruby, sqlite3, libsqlite3-dev, &lt;del datetime=&quot;2010-11-24T16:11:06+00:00&quot;&gt;sqlite3-ruby&lt;/del&gt;libsqlite3-ruby&lt;/li&gt;
	&lt;li&gt;RVM: Con Git, seguir instrucciones en su página.&lt;/li&gt;
	&lt;li&gt;Instalación de Ruby 1.9.2 en RVM con zlib leer &lt;a title=&quot;Ruby 1.9.2 y Zlib&quot; href=&quot;http://rvm.beginrescueend.com/packages/zlib/&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Instalación de Rails 3 en sí, &lt;a href=&quot;http://www.aguasnegras.es/wp/?p=15&quot; target=&quot;_blank&quot;&gt;aquí&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;También es más que conveniente una cuenta de usuario de GitHub y otra de Heroku.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Y listo. Conceptos que me gustaría repasar:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Lenguaje Ruby como tal.&lt;/li&gt;
	&lt;li&gt;Gems&lt;/li&gt;
	&lt;li&gt;Rake&lt;/li&gt;
	&lt;li&gt;RVM&lt;/li&gt;
	&lt;li&gt;Rails&lt;/li&gt;
	&lt;li&gt;Git&lt;/li&gt;
	&lt;li&gt;Heroku&lt;/li&gt;
	&lt;li&gt;Markdown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y &amp;quot;ya esta&amp;quot;, claro, hay que tener en cuenta que Ruby y Rails es el objetivo fundamental, así que eso espero tenerlo bastante cubierto de aquí a terminar.&lt;/p&gt;
&lt;p&gt;Hmmm... una cosa que me llama la atención ahora que lo pienso, ¿no hay ningún framework de pruebas unitarias? Interesante, a ver si el tutorial dice algo.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Despliegue en Heroku</title>
      <link>http://www.aguasnegras.es/blog/2010/11/21-Despliegue+en+Heroku.html</link>
      <pubDate>dom., 21 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/21-Despliegue+en+Heroku.html</guid>
      	<description>
	&lt;p&gt;Por último y para acabar con el ciclo de vida, voy a ver el despliegue en &lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt;.&lt;br /&gt;
Primero te das de alta y te envían un mail de confirmación, con este email vas a una página en la que pones la contraseña y listo.&lt;br /&gt;
Ahora hay que instalar el gem de Heroku&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
gem install heroku

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vez hecho esto, añado también mi clave pública a Heroku para poder comunicarlo con Git (increible esto... vaya ecosistema, me tiene alucinando).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
heroku keys:add

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le suministro la información de la cuenta de Heroku y lo hace todo solo.&lt;br /&gt;
Por último, creo la aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
heroku create

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto ya esta hecho, basta con pasar la aplicación de Git a Heroku (flipo).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git push heroku master

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y se acabó, si se desea se puede lanzar la aplicación desde la misma línea de comandos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
heroku open

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A volar... la verdad que de momento me gusta lo que veo, unas herramientas bien coordinadas para hacerle la vida más sencilla al desarrollador con un ecosistema amigable. Me gusta.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>JUnit 4 y DataSources</title>
      <link>http://www.aguasnegras.es/blog/2010/11/20-JUnit+4+y+DataSources.html</link>
      <pubDate>sáb., 20 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/20-JUnit+4+y+DataSources.html</guid>
      	<description>
	&lt;p&gt;Cuando desarrollo aplicaciones web (y tengo tiempo) me gusta seguir una variante propia de &lt;a title=&quot;Test Driven Development&quot; href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot; target=&quot;_blank&quot;&gt;TDD&lt;/a&gt;. Básicamente trato de ser exhaustivo con las pruebas y en este sentido JUnit es lo suyo, diseño el DAO y le hago pruebas unitarias, diseño la capa de servicios y le hago pruebas unitarias, es más, si tengo tiempo hago pruebas unitarias sobre las mismas entidades.&lt;/p&gt;
&lt;p&gt;A las malas malas, JUnit me sirve para probar la funcionalidad de la aplicación antes de hacer la interfaz de usuario.&lt;/p&gt;
&lt;p&gt;Últimamente trabajo siempre con Spring o JPA, por lo que los accesos a base de datos son a través de un DataSource, bien gestionado por Spring, bien gestionado por JPA.&lt;/p&gt;
&lt;p&gt;El caso es que para las pruebas en general, en vez de andar creando las conexiones a base de datos aparte y pasarlas a los DAO, mola crear un DataSource y publicarlo por JNDI, así nunca hay que volver a tocar nada.&lt;/p&gt;
&lt;p&gt;Tras investigar algo me encuentro que esto no es algo que este muy trillado, así que nada, manos a la obra. Lo que hago es definir un método @BeforeClass para que me cree el DataSource y me lo publique en el contexto JNDI antes de que se ejecute ninguna prueba.&lt;/p&gt;
&lt;p&gt;El código es bastante sencillo y autoexplicativo, para que funcione, es necesario el naming-commons.jar, naming-factory.jar y el naming-resources.jar, se encuentra normalmente en cualquier tomcat en $CATALINA_HOME/common/lib.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;public class DataBaseTest {

	@BeforeClass
	public static void setDataSource() {
		try {
			// Create initial context
			System.setProperty(Context.INITIAL_CONTEXT_FACTORY,
					&amp;quot;org.apache.naming.java.javaURLContextFactory&amp;quot;);
			System.setProperty(Context.URL_PKG_PREFIXES, &amp;quot;org.apache.naming&amp;quot;);
			InitialContext ic = new InitialContext();
			ic.createSubcontext(&amp;quot;jdbc&amp;quot;);

			// Construct DataSource
			OracleConnectionPoolDataSource ds = new OracleConnectionPoolDataSource();
			ds.setURL(&amp;quot;jdbc:oracle:thin:@server:port:SID&amp;quot;);
			ds.setUser(&amp;quot;user&amp;quot;);
			ds.setPassword(&amp;quot;password&amp;quot;);

			ic.bind(&amp;quot;jdbc/ds&amp;quot;, ds);
		} catch (NamingException ex) {
			Logger.getLogger(DataBaseTest.class.getName()).log(
					Level.SEVERE, null, ex);
		} catch (SQLException e) {
			Logger.getLogger(DataBaseTest.class.getName()).log(
					Level.SEVERE, null, e);
		}
	}

	public DataBaseTest() {
		super();
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y eso es todo, para usar exactamente esta implementación también es conveniente tener log4j y el ojdbc14.jar.&lt;/p&gt;
&lt;p&gt;Referencias:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;a href=&quot;http://blogs.sun.com/randystuph/entry/injecting_jndi_datasources_for_junit&quot;&gt;http://blogs.sun.com/randystuph/entry/injecting_jndi_datasources_for_junit&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.coderanch.com/howto/java/CodeBarnLibrariesAndFrameworks&quot;&gt;http://www.coderanch.com/how-to/java/CodeBarnLibrariesAndFrameworks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

	</description>
    </item>
    <item>
      <title>Control de Versiones con Git para Ruby on Rails</title>
      <link>http://www.aguasnegras.es/blog/2010/11/20-Control+de+Versiones+con+Git+para+Ruby+on+Rails.html</link>
      <pubDate>sáb., 20 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/20-Control+de+Versiones+con+Git+para+Ruby+on+Rails.html</guid>
      	<description>
	&lt;p&gt;Vale, una semana más tarde, siguiente capítulo, Git. En Subversion ya soy el experto de la empresa, así que mato dos pájaros de un tiro aprendo Git por el mismo precio :)&lt;/p&gt;
&lt;p&gt;Ya lo tengo instalado siguiendo las instrucciones de &lt;a title=&quot;Pro Git&quot; href=&quot;http://progit.org/&quot; target=&quot;_blank&quot;&gt;Pro Git&lt;/a&gt;, así que seguimos para adelante, la sugerencia de usar co en vez de checkout ya que checkout es demasiado &amp;quot;verbose&amp;quot; me la voy a saltar también, me gusta lo verbose (soy de los que odian los splash screens de las distros de linux, me gusta ver el texto).&lt;/p&gt;
&lt;p&gt;El core editor, según la sección de instalación de Pro Git esta establecido como gVim, por si acaso, checkeo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Salida&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;user.name=Agustin Ventura
user.email=agustin@aguasnegras.es
core.editor=gvim
merge.tool=gvimdiff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Todo correcto, toca crear el primer repositorio. En la raíz de la aplicación de pruebas que hice (first_app) ejecuto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/RoR/proyectos/first_app$ git init
Initialized empty Git repository in /home/case/RoR/proyectos/first_app/.git/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto he creado el repositorio, ahora el tutorial comenta que para llevar la lista de los archivos ignorados git usa un archivo .gitignore y que rails ya me ha creado uno por defecto conteniendo según que tipos de archivo (los logs, los de sqlite, los tmp...), vaya que viene todo integrado, muy bien. Como estoy usando gVim, sigo el consejo del tutorial y dejo el .gitignore tal y como sigue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
.bundle
db/*.sqlite3*
log/*.log
*.log
tmp/**/*
tmp/*
doc/api
doc/app
*.swp
*~
.DS_Store

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahora vamos a añadir los archivos que ya tenemos, tan fácil como&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git add .

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ya está, por lo visto van a parar a una lista de &amp;quot;archivos para enviar a git&amp;quot;, una especie de caché, podemos comprobar que archivos hay ahí con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git status

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Que claro, ahora mismo son todos, jeje... Es hora de hacer commit con, si, eso mismo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git commit -m &amp;quot;Commit Inicial del Proyecto first_app&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Me gusta que git te obligue a poner siempre un comentario en los commit, eso esta muy bien.&lt;br /&gt;
Con esto he hecho los cambios al repositorio local, no al remoto, vaya que esto funciona en dos niveles, un poco &amp;quot;a là&amp;quot; Maven.&lt;br /&gt;
Por último, para ver los commits&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git log

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es hora de proporcionarse un repositorio remoto, así que habrá que crear una cuenta en &lt;a href=&quot;https://github.com/&quot;&gt;GitHub&lt;/a&gt;.&lt;br /&gt;
GitHub ofrece un servicio de hosting gratuito de repositorios para código libre, para ello le doy a &amp;quot;Tarifas y Registros&amp;quot; y pulso en &amp;quot;Crear una cuenta gratuita&amp;quot;.&lt;br /&gt;
Escojo nombre de usuario, pongo mail y contraseña y listo... vaya, ni siquiera me pide el clásico mail de confirmación. Pues mejor.&lt;br /&gt;
En la misma pantalla principal tengo un botón &amp;quot;Nuevo repositorio&amp;quot;, así que yo que soy muy valiente le doy del tirón. Nombre, del proyecto, descripción y esta página como web y palante. Esta muy bien, me ponen ahora un tutorial de como empezar a usar el repositorio e incluso como migrar desde SVN.&lt;br /&gt;
Ya está creado, es hora de añadir el repositorio y ver que pasa. La guía me avisa que es posible que tenga que mirar unos temas de claves SSH, pero primero voy a probar a pelo, si no, ya nos meteremos en berenjenales.&lt;br /&gt;
Primero añado el repositorio remoto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git remote add origin git@github.com:agustinventura/first_app.git

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y después le doy a enviar los cambios del master (lo que es el trunk en subversion) al repositorio.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
case@aesir:~/RoR/proyectos/first_app$ git push origin master
The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &apos;github.com,207.97.227.239&apos; (RSA) to the list of known hosts.
Permission denied (publickey).
fatal: The remote end hung up unexpectedly

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Falla, toca leer el &lt;a href=&quot;http://help.github.com/linux-key-setup/&quot;&gt;tutorial&lt;/a&gt;, que casualmente usa Ubuntu, así que no debe ser muy complicado.&lt;br /&gt;
El tutorial dice que en .ssh en mi home, debo tener una serie de claves id_rsa o id_dsa y que haga una copia porque las vamos a generar... no es el caso, así que paso a generarlas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ssh-keygen -t rsa -C &amp;quot;agustinventura@aguasnegras.es&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, generados el id_rsa y el id_rsa.pub.&lt;br /&gt;
Ahora en GitHub le doy a &amp;quot;Configuración&amp;quot; y añadir una nueva clave pública, es bastante sencillo, donde pone &amp;quot;Llave&amp;quot; pongo el contenido de id_rsa.pub (ays, benditas clases de Introducción a la Matemática Discreta...).&lt;br /&gt;
Para comprobar si todo ha ido bien:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
ssh git@github.com
PTY allocation request failed on channel 0
ERROR: Hi agustinventura! You&apos;ve successfully authenticated, but GitHub does not provide shell access
                     Connection to github.com closed.


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfecto, vuelvo a hacer el push.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;

Counting objects: 63, done.
Compressing objects: 100% (49/49), done.
Writing objects: 100% (63/63), 86.09 KiB, done.
Total 63 (delta 2), reused 0 (delta 0)
To git@github.com:agustinventura/first_app.git
 * [new branch]      master -&amp;gt; master

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Volviendo al tutorial de RoR, me encuentro con que también me hacen una introducción a un flujo de trabajo basado en branch, edit, commit, merge.&lt;br /&gt;
Las ventajas de esto son evidentes, si trabajamos en un branch, tenemos siempre el master &amp;quot;limpio&amp;quot;, dicen que git es muy bueno haciendo los merge... ya veremos.&lt;br /&gt;
Creo la rama&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git checkout -b modify-README
Switched to a new branch &apos;modify-README&apos;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Perfecto, estoy en la rama. Para la edición de ejemplo, se recomienda usar un lenguaje de formateo llamado &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt;, por lo visto es para convertir fácilmente a xhtml y GitHub lo reconoce para el formateo de según que documentos, ya le echaré un vistazo.&lt;br /&gt;
Renombro el archivo como README.markdown y lo edito para poner lo sugerido en el ejemplo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git mv README README.markdown
gvim README.markdown 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con git -status compruebo que todo este bien y hago commit, usando git commit -a me puedo saltar el comando add, ya que lo ejecuta solo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git commit -a -m &amp;quot;Modificado archivo README&amp;quot;
[modify-README ee90542] Modificado archivo README
 2 files changed, 5 insertions(+), 256 deletions(-)
 delete mode 100644 README
 create mode 100644 README.markdown

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para hacer el merge, se hace un checkout del master y un merge de la rama.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git checkout master
Switched to branch &apos;master&apos;
git merge modify-README
Updating 0afa892..ee90542
Fast-forward
 README          |  256 -------------------------------------------------------
 README.markdown |    5 +
 2 files changed, 5 insertions(+), 256 deletions(-)
 delete mode 100644 README
 create mode 100644 README.markdown

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y listo, se borra la rama&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git branch -d modify-README
Deleted branch modify-README (was ee90542).

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por último, push y voy a GitHub a ver si ha funcionado.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;
git push
Counting objects: 4, done.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 419 bytes, done.
Total 3 (delta 1), reused 0 (delta 0)
To git@github.com:agustinventura/first_app.git
   0afa892..ee90542  master -&amp;gt; master

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Todo perfecto en GitHub... Hora de un descanso.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Aprendiendo Ruby on Rails</title>
      <link>http://www.aguasnegras.es/blog/2010/11/13-Aprendiendo+Ruby+on+Rails.html</link>
      <pubDate>sáb., 13 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/13-Aprendiendo+Ruby+on+Rails.html</guid>
      	<description>
	&lt;p&gt;En mi trabajo, uno de los proyectos en los que ando metido es la estandarización de proyectos de desarrollo Java en entorno web, a todos los niveles.&lt;/p&gt;
&lt;p&gt;A priori esto parece muy fácil y un trabajo bonito, pero el asunto se complica mucho cuando te das cuenta de la amplitud del trabajo:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Definición de herramientas a usar (IDE, gestor de versiones, herramienta de construcción...)&lt;/li&gt;
	&lt;li&gt;Definición de framework de desarrollo (framework MVC, framework ORM, framework IoC...)&lt;/li&gt;
	&lt;li&gt;Definición de estándares de código&lt;/li&gt;
	&lt;li&gt;Formación del personal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Con ésto no quiero decir que el desarrollo en Java sea demasiado complicado, más bien al revés, el entorno es tan flexible que puedes hacer auténticas maravillas y habitualmente encontrar múltiples soluciones al mismo problema, así que si no puedes aplicar una, te resultará muy sencillo aplicar la otra.&lt;/p&gt;
&lt;p&gt;Sin embargo, esto resulta ser muchas veces un engorro, ya que a veces el entorno es demasiado &amp;quot;difuso&amp;quot;, dicho de otra manera, se echa de menos tener un entorno de estudio más cerrado en el cual convertirte en un experto (en Java, es muy posible que seas un experto en JPA, pero no en Hibernate... y viceversa, pero claro, ¿para qué lo vas a ser cuando ambas tecnologías sirven para lo mismo?).&lt;/p&gt;
&lt;p&gt;Así que he decidido aprender algo nuevo, y después de curiosear y mirar por ahí he decidido darle una oportunidad a Ruby on Rails e ir posteando por aquí mis experiencias.&lt;/p&gt;
&lt;p&gt;El tutorial que voy a seguir es este: &lt;a title=&quot;railstutorial.org&quot; href=&quot;http://railstutorial.org/book&quot; target=&quot;_blank&quot;&gt;railstutorial.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No voy a entrar en detalles de por qué Ruby on Rails y no PHP ya que no pretendo que sea una comparativa exhaustiva, sencillamente me ha dado por ahí y ya esta :)&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Entorno de Ruby on Rails - Parte 1</title>
      <link>http://www.aguasnegras.es/blog/2010/11/13-Entorno+de+Ruby+on+Rails+-+Parte+1.html</link>
      <pubDate>sáb., 13 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/13-Entorno+de+Ruby+on+Rails+-+Parte+1.html</guid>
      	<description>
	&lt;p&gt;Para seguir el tutorial voy a usar mi viejo buen portátil (tiene ya 6 años), con una Ubuntu 10.04 y el siguiente stack de desarrollo (siguiendo lo recomendado en el tutorial):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Editor: gVim (y las extensiones de ruby de vim)&lt;/li&gt;
	&lt;li&gt;Control de versiones: git (apt-get install git-core)&lt;/li&gt;
	&lt;li&gt;Ruby versión 1.8.7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y hasta aquí todo bien, no deja de ser todo apt-get install, ahora el tutorial recomienda instalar &lt;a title=&quot;Ruby Version Management&quot; href=&quot;http://rvm.beginrescueend.com/&quot; target=&quot;_blank&quot;&gt;RVM (Ruby Version Management)&lt;/a&gt;, un gestor de versiones de Ruby. El tema me suena, haciendo un símil con Java, yo puedo estar desarrollando con Java 1.6 pero querer compilar con Java 1.5 (por cuestión de compatibilidad o cualquier motivo), al parecer Ruby tiene una herramienta que gestiona este tipo de cosas... la verdad, tiene buena pinta, vamos a ver.&lt;/p&gt;
&lt;p&gt;La instalación es con git (primera toma de contacto):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;bash &amp;amp;lt; &amp;amp;lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head )
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se ejecuta sin problemas y sale un bonito texto dando información varia. Básicamente y según la sección &amp;quot;Postinstall&amp;quot; de la misma página de rvm, hay que añadir una línea al final del .bashrc:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;[[ -s &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot; ]] &amp;amp;amp;&amp;amp;amp; . &amp;quot;$HOME/.rvm/scripts/rvm&amp;quot;  # This loads RVM into a shell session
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se comprueba si esta funcionando con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;type rvm | head -n1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Salida, correcta, así que seguimos y nos volvemos al tutorial donde dicen como usar RVM una vez instalado.&lt;/p&gt;
&lt;p&gt;Básicamente, según estoy entendiendo, Ruby se distribuye en Gems, que son programas autosuficientes con sus librerías, etc... y con RVM vamos a instalar varios perfiles de ejecución incluyendo sus Gems y vamos a definir uno por defecto.&lt;/p&gt;
&lt;p&gt;Asi que nada:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rvm install 1.8.7 #instala Ruby 1.8.7
rvm install 1.9.2 #instala Ruby 1.9.2
#etiquetamos lo perfiles
rvm --create 1.8.7@rails2
rvm --create 1.9.2@rails3
#usamos rails3 por defecto
rvm --default use 1.9.2@rails3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por cierto, la compilación de la versiones de Ruby... tarda. O será que mi portátil esta ya bien viejuno.&lt;/p&gt;
&lt;p&gt;Una vez hechas todas estas operaciones, me llevo la grata sorpresa de que de propina tenemos instalado RubyGems, un gestor de paquetes de Ruby, para probarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;which gem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trato de actualizar tal y como dice el manual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;gem update --system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y... ¡ZAS!¡En toda la boca!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;no such file to load -- zlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y por fín se pone interesante la cosa, veo un post específico para la configuración: &lt;a title=&quot;Ruby on Rails 3 and Ubuntu&quot; href=&quot;http://toranbillups.com/blog/archive/2010/09/01/How-to-install-Rails-3.0-and-Ruby-1.9.2-on-Ubuntu&quot; target=&quot;_blank&quot;&gt;How to install Rails 3.0 and Ruby 1.9.2 on Ubuntu&lt;/a&gt;, aunque me salto los dos primeros pasos, ya tengo instalado RVM y Ruby 1.8.7... sigo intentando pero nada de nada, sigue diciendo que no hay zlib... vaya. En &lt;a title=&quot;Stackoverflow: Ruby and Zlib&quot; href=&quot;http://stackoverflow.com/questions/2441248/rvm-ruby-1-9-1-troubles&quot; target=&quot;_blank&quot;&gt;Stackoverflow&lt;/a&gt; leo esto:&lt;/p&gt;
&lt;blockquote&gt;rvm package install zlib
rvm remove 1.9.1
rvm install 1.9.1 -C --with-zlib-dir=$rvm_path/usr&lt;/blockquote&gt;
&lt;p&gt;Y en la &lt;a title=&quot;RVM y zlib&quot; href=&quot;http://rvm.beginrescueend.com/packages/zlib/&quot; target=&quot;_blank&quot;&gt;referencia de RVM&lt;/a&gt; esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;$ rvm package install zlib
$ rvm remove 1.9.2
$ rvm install 1.9.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto parece más razonable... buf, otra vez a compilar... vamos a por un café que siempre viene bien.&lt;/p&gt;

	</description>
    </item>
    <item>
      <title>Entorno de Ruby on Rails - Parte 2</title>
      <link>http://www.aguasnegras.es/blog/2010/11/13-Entorno+de+Ruby+on+Rails+-+Parte+2.html</link>
      <pubDate>sáb., 13 nov. 2010 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2010/11/13-Entorno+de+Ruby+on+Rails+-+Parte+2.html</guid>
      	<description>
	&lt;p&gt;Bazinga! Eso era, por fín:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;case@aesir:~/.rvm/usr/lib$ gem update --system
Updating RubyGems
Nothing to update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se vuelve a ejecutar el rvm --create y el --default y seguimos adelante, ahora a instalar rails con gem.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;gem install rails --version 3.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muy bien, creo el directorio de proyecto y&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rails new fist_app
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ya está creada, repaso los directorios y algún fichero de configuración según el tutorial e instalo los gems con bundle tal y como se especifica.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-prettyprint&quot;&gt;rails server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahí esta, funcionando sin problemas. Pasamos a recapitular.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Efectivamente, las herramientas son útiles y potentes, parece que se está pensando en todo.&lt;/li&gt;
	&lt;li&gt;La estructura de directorios parece también clara y estándar.&lt;/li&gt;
	&lt;li&gt;El uso de git y el incluir una carpeta tests por defecto, parece que sigue metodologías modernas, o mejor dicho, te guía al uso de las mismas.&lt;/li&gt;
	&lt;li&gt;El que haya una y solo una herramienta para cada cosa, no tienes que aprender a hacer lo mismo de 4 formas distintas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Y poco más, de momento ya esta bien, mañana más y mejor.&lt;/p&gt;
&lt;p&gt;Vamos a descogelar sushi pa la cena.&lt;/p&gt;

	</description>
    </item>

  </channel>
</rss>
