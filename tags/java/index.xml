<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Java on AguasNegras</title>
    <link>https://www.aguasnegras.es/tags/java/</link>
    <description>Recent content in Java on AguasNegras</description>
    <image>
      <url>https://www.aguasnegras.es/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.aguasnegras.es/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 12 Oct 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aguasnegras.es/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SDKMAN</title>
      <link>https://www.aguasnegras.es/posts/2018/10/12-sdkman/</link>
      <pubDate>Fri, 12 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2018/10/12-sdkman/</guid>
      <description>SDKMAN es un gestor de entornos y herramientas Java. Cuando trabajas en un entorno &amp;ldquo;corporativo&amp;rdquo; (¿aburrido?) sueles tener claramente fijadas las versiones de herramientas de desarrollo a utilizar, por ejemplo, Java 8 en la versión 1.8.0_121 o Maven 3.2.1, etc&amp;hellip; Sin embargo cuando empiezas a cacharrear y a tratar de instalar cosas nuevas es relativamente normal que acabes con dos (o tres o seis) versiones del JDK: la &amp;ldquo;buena&amp;rdquo; (1.8), la de &amp;ldquo;los módulos&amp;rdquo; (9), la de &amp;ldquo;los val&amp;rdquo; (10) y la &amp;ldquo;nueva buena&amp;rdquo; (11).</description>
    </item>
    
    <item>
      <title>Spring Boot 2, Spring Security 5 y OAuth 2</title>
      <link>https://www.aguasnegras.es/posts/2017/12/14-spring-boot-oauth2/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2017/12/14-spring-boot-oauth2/</guid>
      <description>Proyecto de ejemplo: https://github.com/spring-projects/spring-security/tree/5.0.0.RELEASE/samples/boot/oauth2login
Pasos:
Crear nueva aplicación en la consola de google (https://developers.google.com/identity/protocols/OpenIDConnect): https://console.developers.google.com/cloud-resource-manager?previousPage=%2F Crear credenciales OAuth para la aplicación: https://console.developers.google.com/apis/credentials?project=&amp;hellip; Asegurarse de que en redirect URI se pone http://localhost:8080/login/oauth2/code/google en application.properties establecer las propiedades spring.security.oauth2.client.registration.google.client-id y spring.security.oauth2.client.registration.google.client-secret </description>
    </item>
    
    <item>
      <title>Domain Driven Design, Sesión 2</title>
      <link>https://www.aguasnegras.es/posts/2017/05/29-ddd-sesion-2/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2017/05/29-ddd-sesion-2/</guid>
      <description>Ayer tuvimos la segunda sesión de DDD en las oficinas de Comalis. Personalmente se me hizo bastante corto ya que tuvimos bastante debate y muy interesante. Yo aprendí muchísimo… pero por otra parte salí con nuevas lagunas. Empezamos con una pequeña introducción por parte de Tamara de Comalis sobre la empresa. Se dedican fundamentalmente al hosting, cloud, antispam, ssl, etc. Son franceses (el CPD esta en Lyon) pero tienen las oficinas aquí, en Sevilla.</description>
    </item>
    
    <item>
      <title>Spring Boot y AngularJS</title>
      <link>https://www.aguasnegras.es/posts/2017/05/07-spring-boot-y-angularjs/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2017/05/07-spring-boot-y-angularjs/</guid>
      <description>Con Spring Boot es relativamente sencillo generar un backend para una aplicación por complejo que sea su dominio, precisamente lo bueno de Spring Boot es que permite realizar rápidamente todo el trabajo de infraestructura para centrarse por una parte en el código del dominio y por otra&amp;hellip; en la UI. En los últimos años hemos pasado de un paradigma de desarrollo en servidor a uno nuevo cliente/servidor (otra vez). El servidor suele ser una API [REST ] (https://en.</description>
    </item>
    
    <item>
      <title>Logging de consultas y parametros de Hibernate</title>
      <link>https://www.aguasnegras.es/posts/2017/03/27-logging-consultas-parametros-hibernate/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2017/03/27-logging-consultas-parametros-hibernate/</guid>
      <description>Una de las funcionalidades básicas de Hibernate es abstraer la base de datos, pero sin embargo en tiempo de desarrollo resulta bastante útil controlar las consultas que va generando el motor así como sus parámetros. Desde las primeras versiones Hibernate tiene una propiedad, show_sql que muestra estas consultas por consola. Esto tiene dos desventajas, la primera que usa la consola y la segunda que para habilitarlo y deshabilitarlo se depende de un archivo de configuración específico (normalmente el propio de Hibernate o incluso una clase Java si se esta utilizando la configuración Java de Spring).</description>
    </item>
    
    <item>
      <title>Nueva API de Fecha y Hora en Java 8</title>
      <link>https://www.aguasnegras.es/posts/2016/06/16-nueva-api-de-fecha-y-hora-en-java-8/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/06/16-nueva-api-de-fecha-y-hora-en-java-8/</guid>
      <description>Unos apuntes rápidos sobre la nueva API de fecha y hora en Java 8. Primero, clases fundamentales:
LocalDate: La fecha en el contexto local. En una zona horaria determinada. LocalTime: La hora en el contexto local. LocalDateTime: La composición de ambas. Aquí lo fundamental es que corresponden al contexto local del observador, es decir esa hora es válida para Sevilla pero no para Canarias. La hora y la fecha (por extensión) si la necesito completa se representa mediante una fecha/hora y un offset con respecto a UTC.</description>
    </item>
    
    <item>
      <title>Wordpress to JBake - Generación de Archivos</title>
      <link>https://www.aguasnegras.es/posts/2016/06/10-wp2jbake-generacion/</link>
      <pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/06/10-wp2jbake-generacion/</guid>
      <description>Bueno, pues ya queda la parte final, lanzarlo. Creo un método main en Wp2JBake, el primer argumento será el archivo de origen y el segundo el directorio de destino. Como de toda la gestión de errores se encarga el programa en sí, lo único que tengo que hacer es capturar la posible IllegalArgumentException y listo:
public static void main (String... args) { if (args.length!=2) { System.out.println(&amp;#34;Wp2JBake needs two arguments to work: First the input file and second the destination folder&amp;#34;); } else { try { Wp2JBake exporter = new Wp2JBake(args[0], args[1]); Set&amp;lt;File&amp;gt; exportResult = exporter.</description>
    </item>
    
    <item>
      <title>Wordpress to JBake - Integración</title>
      <link>https://www.aguasnegras.es/posts/2016/06/08-wp2jbake-integracion/</link>
      <pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/06/08-wp2jbake-integracion/</guid>
      <description>Realmente las pruebas de integración ya casi estan hechas y son muy sencillas ya que se trata de interactuar en todo caso con la clase principal Wp2JBake, usando donde sea necesario el archivo de pruebas. Lo único interesante van a ser los asserts para comprobar que todo es correcto. En un principio, las pruebas definidas pasan sin mayor problema, pero en primer lugar, hay que preguntarse si se estan exportando todos los posts o solo aquellos que estan publicados, es decir, el test usando el wp-source.</description>
    </item>
    
    <item>
      <title>Wordpress to JBake - Escritura</title>
      <link>https://www.aguasnegras.es/posts/2016/06/05-wp2jbake-escritura/</link>
      <pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/06/05-wp2jbake-escritura/</guid>
      <description>Retomando la migración del blog, una vez resuelta la parte de leer los posts, hay que hacer la escritura. El enfoque pasa por lo siguiente:
Tener una plantilla de post que se leerá en el constructor. Esta plantilla tendrá placeholders para saber donde van los campos. Tratar según que campos, por ejemplo los tags habrá que representarlos como un string y separados por comas, las etiquetas &amp;lt;pre&amp;gt; que indican código habrá que convertiras a shell.</description>
    </item>
    
    <item>
      <title>Spring Boot Developer Tools e Intellij IDEA</title>
      <link>https://www.aguasnegras.es/posts/2016/05/30-springdevtoolsintellij/</link>
      <pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/05/30-springdevtoolsintellij/</guid>
      <description>Una de las mejores incorporaciones que tuvo Spring Boot en la versión 1.3 fueron las Developer Tools. De entre toda la funcionalidad, lo que me parece mas útil es sin lugar a dudas el automatic restart, que relanza la aplicación en cuanto detecta cambios en un fichero que esta en el classpath y el LiveReload, que en conjunción con un plugin de Chrome detecta cuando ha habido cambios en la aplicación (como un reinicio) y refresca automáticamente la página.</description>
    </item>
    
    <item>
      <title>Wordpress to JBake - Parseo</title>
      <link>https://www.aguasnegras.es/posts/2016/03/20-wp2jbake-parseo/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/03/20-wp2jbake-parseo/</guid>
      <description>Pues ahora que ya tengo el constructor y construyo un objeto siempre que, al menos es coherente, toca parsear el xml para extraer los datos. En Java, esencialmente hay tres formas de parsear xml, todas dentro de lo que se denomina Java XML Processing API, JAXP:
SAX: La API originaria, orientada a eventos. Muy rápida, muy eficiente y muy farragosa. Técnicamente es una API de streaming mediante push, es decir, nosotros arrancamos el procesamiento del documento y la API empieza a funcionar mandándonos eventos conforme va encontrando elementos.</description>
    </item>
    
    <item>
      <title>Wordpress to JBake - Inicio</title>
      <link>https://www.aguasnegras.es/posts/2016/02/04-wp2jbake-inicio/</link>
      <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/02/04-wp2jbake-inicio/</guid>
      <description>En la migración del blog a GitHub Pages uno de los objetivos era no perder contenido, por lo que una vez puesta en pie toda la infraestructura, toca migrar los posts (mucho me temo que los comentarios si se van a perder&amp;hellip;). Solución: Hacer un pequeño programa en Java (casi que diría script) que realice automáticamente esta conversión, además voy a seguir TDD para &amp;ldquo;mantenerme en forma&amp;rdquo;. En un principio lo voy a plantear como una mera conversión de formatos, como formato inicial tengo el que devuelve Wordpress para la exportación: Wordpress Extended RSS y como formato final quiero un archivo en el formato específico de JBake, que no deja de ser Markdown con unas cabeceras (metadata) particulares:</description>
    </item>
    
    <item>
      <title>Migrando el blog</title>
      <link>https://www.aguasnegras.es/posts/2016/01/03-migracion/</link>
      <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2016/01/03-migracion/</guid>
      <description>Desde hace ya bastantes años llevo pagando religiosamente todos los años un dominio (aguasnegras.es) y un alojamiento para tener el blog. El blog ha tenido mejores y peores momentos, pero en general me gusta tener un sitio donde poder escribir en un momento dado, y por supuesto compartir con la comunidad (sobre todo en español, es por lo que escribo en este idioma).
El asunto es que si nos paramos a pensarlo, el blog tiene bastantes pocos comentarios y sobre todo entradas mías, es decir, es fundamentalmente un medio de solo lectura.</description>
    </item>
    
    <item>
      <title>Logging en Java con SLF4J y Log4j2</title>
      <link>https://www.aguasnegras.es/posts/2013/09/02-logging-en-java-con-slf4j-y-log4j2/</link>
      <pubDate>Mon, 02 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2013/09/02-logging-en-java-con-slf4j-y-log4j2/</guid>
      <description>En este artículo se hace una breve introducción a la generación de logs en Java usando SLF4J y Log4j2, así como un breve repaso de las mejores prácticas relativas.
En Java se da una circunstancia muy extraña, siendo el logging tan importante como es, no hay una buena solución integrada en el framework como tal. Es cierto que existe la Java Logging API o Java Logging Framework, pero fue una adición bastante a posteriori (en concreto, se añadió en el 2002, en la versión 1.</description>
    </item>
    
    <item>
      <title>Amazon Elastic Beanstalk</title>
      <link>https://www.aguasnegras.es/posts/2012/01/19-amazon-elastic-beanstalk/</link>
      <pubDate>Thu, 19 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2012/01/19-amazon-elastic-beanstalk/</guid>
      <description>Visto que con Heroku se me esta atragantando el tema del despliegue de JSF 2, me he decidido a seguir los cantos de sirena y probar Amazon Elastic Beanstalk. La publicidad dice que Amazon me dá gratuitamente un Tomcat 6 o Tomcat 7 en la nube, así que merecía darle una ojeada. Lo primero de lo que me doy cuenta es que Amazon Elastic Beanstalk en realidad no es solo un Tomcat, sino que mas bien podríamos definirlo como un agrupamiento de tecnologías que Amazon ya tenía que se ofrecen simplificadamente y bajo un mismo paragüas, como EC2, S3, EBS, CloudWatch, etc&amp;hellip; La página de Beanstalk promete que se despliegan WARs normales y corrientes y que se puede usar cualquier librería Java con normalidad, a esto le sumamos Amazon SimpleDB como base de datos relacional y Amazon DynamoDB como NoSQL y tenemos un stack potentísimo a nuestra disposición.</description>
    </item>
    
    <item>
      <title>Sun Java y OpenJDK en Linux</title>
      <link>https://www.aguasnegras.es/posts/2011/11/11-sun-java-y-openjdk-en-linux/</link>
      <pubDate>Fri, 11 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/11/11-sun-java-y-openjdk-en-linux/</guid>
      <description>Para trabajar con Heroku, recomiendan usar OpenJDK, sin embargo, hasta el momento vengo usando el Sun JDK, así que voy a instalar el OpenJDK:
$ sudo apt-get install openjdk-6-jdk Con esto se instala el OpenJDK 6, pero con un desafortunado efecto secundario:
$ java -version java version &amp;#34;1.6.0_22&amp;#34; OpenJDK Runtime Environment (IcedTea6 1.10.2) (6b22-1.10.2-0ubuntu1~11.04.1) OpenJDK 64-Bit Server VM (build 20.0-b11, mixed mode) Efectivamente, se ha establecido el OpenJDK como máquina virtual de Java por defecto, pero esto no es lo que quiero (al menos, yo no), me gustaría seguir usando el Sun JDK.</description>
    </item>
    
    <item>
      <title>Despliegue de Spring Roo en Heroku</title>
      <link>https://www.aguasnegras.es/posts/2011/10/13-despliegue-de-spring-roo-en-heroku/</link>
      <pubDate>Thu, 13 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/10/13-despliegue-de-spring-roo-en-heroku/</guid>
      <description>Hasta ahora, las aplicaciones que he desplegado eran muy básicas, hechas con jsp y acceso a base de datos a base de jdbc plano.
Estas tecnologías no estan mal (y de hecho son la base de todo lo posterior), pero lo más normal es utilizar frameworks para el desarrollo de aplicaciones Java.
La quinta práctica del libro de Java para Heroku es un despliegue de aplicaciones hechas con Spring Roo en Heroku.</description>
    </item>
    
    <item>
      <title>Add-ons para Heroku</title>
      <link>https://www.aguasnegras.es/posts/2011/09/22-add-ons-para-heroku/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/09/22-add-ons-para-heroku/</guid>
      <description>La arquitectura de Heroku es modular, es decir, se pueden añadir funcionalidades al Stack mediante piezas de software llamadas add-ons. Un ejemplo de eso lo vi aquí cuando añadí el soporte para gestión de releases a través de un add-on.
Hay bastantes más add-ons disponibles en la página, para enviar sms, para conectar como amazon rds, etc&amp;hellip; Los hay gratuitos, de pago, en beta&amp;hellip; en fín, de todo tipo.
En esta práctica voy a añadir el add-on de Redis.</description>
    </item>
    
    <item>
      <title>Procesos Java en Heroku</title>
      <link>https://www.aguasnegras.es/posts/2011/09/22-procesos-java-en-heroku/</link>
      <pubDate>Thu, 22 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/09/22-procesos-java-en-heroku/</guid>
      <description>Heroku no solo sirve para ejecutar aplicaciones web Java, sino que en realidad sirve para ejecutar cualquier tipo de aplicación Java. Observando el proyecto podemos ver que hay dos aplicaciones bien diferenciadas, la aplicación web (que se lanza a través del script webapp generado por Maven) y la aplicación SchemaGenerator, ejecutada a través del script schemaGenerator. Mientras que la primera es una aplicación web normal y corriente, SchemaGenerator es simplemente un proceso Java puro, se lanza se ejecuta y termina sin ningún tipo de interfaz gráfica involucrada.</description>
    </item>
    
    <item>
      <title>Java, PostgreSQL y Heroku</title>
      <link>https://www.aguasnegras.es/posts/2011/09/18-java-postgresql-y-heroku/</link>
      <pubDate>Sun, 18 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/09/18-java-postgresql-y-heroku/</guid>
      <description>Ya he visto como desplegar en Heroku, pero lo que he desplegado no llega ni al nivel de aplicación web, en realidad es una página web estática y punto. Para poder considerarla aplicación web ha de tener algún tipo de contenido dinámico, normalmente este contenido se genera de algún almacén persistente, usualmente una base de datos. Por tanto voy a ver como me las apaño para poner una base de datos en Heroku y atacarla desde mi aplicación.</description>
    </item>
    
    <item>
      <title>Java en Heroku</title>
      <link>https://www.aguasnegras.es/posts/2011/09/16-java-en-heroku/</link>
      <pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/09/16-java-en-heroku/</guid>
      <description>Una de las cosas que más me impresionó de Ruby on Rails, más que el framework en sí o el lenguaje, fue el excelente soporte que había creado la comunidad. Hablo específicamente de como se enlazaba tu proyecto local con GitHub y GitHub con Heroku, con lo cual podías tener el proyecto en producción en cuestión de minutos.
Esto es algo que lamentablemente no he visto en Java en los cinco años que llevo dedicado a estos menesteres, y menos con un alojamiento de la categoría de Heroku (otro día hablaré sobre ello y el PaaS, etc&amp;hellip;).</description>
    </item>
    
    <item>
      <title>Redimensionar el emulador de Android</title>
      <link>https://www.aguasnegras.es/posts/2011/06/28-redimensionar-el-emulador-de-android/</link>
      <pubDate>Tue, 28 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/06/28-redimensionar-el-emulador-de-android/</guid>
      <description>Nota mental:
Para redimensionar la ventana del emulador de android en Eclipse:
Listo</description>
    </item>
    
    <item>
      <title>Bases de Datos para Desarrolladores Java - Claves Primarias Artificiales</title>
      <link>https://www.aguasnegras.es/posts/2011/06/27-bases-de-datos-para-desarrolladores-java-claves-primarias-artificiales/</link>
      <pubDate>Mon, 27 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/06/27-bases-de-datos-para-desarrolladores-java-claves-primarias-artificiales/</guid>
      <description>La teoría pura y dura de base de datos dice que para una entidad determinada, tendremos varias claves candidatas, que son aquellas que identifican únicamente a la entidad y la clave primaria se escoge de entre ellas como la menor. Para un usuario podemos tener como claves candidatas: DNI, nombre de usuario, nombre y apellidos. Nombre y apellidos se descarta (por larga) y ya tenemos que escoger entre DNI y nombre de usuario.</description>
    </item>
    
    <item>
      <title>Bases de Datos para Desarrolladores Java - Integridad Referencial</title>
      <link>https://www.aguasnegras.es/posts/2011/02/01-bases-de-datos-para-desarrolladores-java-integridad-referencial/</link>
      <pubDate>Tue, 01 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/02/01-bases-de-datos-para-desarrolladores-java-integridad-referencial/</guid>
      <description>Como el entorno de desarrollo se ha caído y llevo dos horas aburrido, sigo.
Segundo Ítem: Usar siempre SIEMPRE la integridad referencial.
O lo que es lo mismo, si usamos MySQL NO usar MyIsam, ya que no tiene soporte para integridad referencial.
Hay gente que dice que trabajar sin integridad referencial es más rápido y cómodo. Es verdad, pero al final es como dispararse en el pie. Muchas veces la integridad referencial te salva de cometer errores de calado.</description>
    </item>
    
    <item>
      <title>Bases de Datos para Desarrolladores Java - Introducción e Índices</title>
      <link>https://www.aguasnegras.es/posts/2011/01/25-bases-de-datos-para-desarrolladores-java-introducci%C3%B3n-e-%C3%ADndices/</link>
      <pubDate>Tue, 25 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/01/25-bases-de-datos-para-desarrolladores-java-introducci%C3%B3n-e-%C3%ADndices/</guid>
      <description>En general en una aplicación Java cualquiera los problemas empiezan desde abajo, con el diseño de la base de datos. He visto (y trabajo) con bases de datos en las que una tabla tiene 5 campos de primary key y uno solo de información. Que esto es un desperdicio se ve a simple vista. Después vienen los parches a nivel superior (en Java) y se termina yendo al infierno el rendimiento de la aplicación.</description>
    </item>
    
    <item>
      <title>JUnit 4 y DataSources</title>
      <link>https://www.aguasnegras.es/posts/2010/11/20-junit-4-y-datasources/</link>
      <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/20-junit-4-y-datasources/</guid>
      <description>Cuando desarrollo aplicaciones web (y tengo tiempo) me gusta seguir una variante propia de TDD. Básicamente trato de ser exhaustivo con las pruebas y en este sentido JUnit es lo suyo, diseño el DAO y le hago pruebas unitarias, diseño la capa de servicios y le hago pruebas unitarias, es más, si tengo tiempo hago pruebas unitarias sobre las mismas entidades.
A las malas malas, JUnit me sirve para probar la funcionalidad de la aplicación antes de hacer la interfaz de usuario.</description>
    </item>
    
  </channel>
</rss>
