<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Ruby on Rails on AguasNegras</title>
    <link>https://www.aguasnegras.es/tags/ruby-on-rails/</link>
    <description>Recent content in Ruby on Rails on AguasNegras</description>
    <image>
      <url>https://www.aguasnegras.es/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.aguasnegras.es/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 21 Feb 2011 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aguasnegras.es/tags/ruby-on-rails/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Un poco de Ruby para Rails</title>
      <link>https://www.aguasnegras.es/posts/2011/02/21-un-poco-de-ruby-para-rails/</link>
      <pubDate>Mon, 21 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/02/21-un-poco-de-ruby-para-rails/</guid>
      <description>Bueno, parece que me han escuchado. El capítulo 4 del tutorial va sobre Ruby más que sobre Rails, para profundizar en el lenguaje y entender conceptos básicos (más allá de lo que viene siendo una variable de instancia&amp;hellip;). Lo que voy a hacer es definir un helper para construir el contenido de la etiqueta title, en vez de usar una cadena concatenada a una variable. Para ello edito el app/helpers/application_helper.rb y añado esto:</description>
    </item>
    
    <item>
      <title>Un poco de dinamismo</title>
      <link>https://www.aguasnegras.es/posts/2011/02/20-un-poco-de-dinamismo/</link>
      <pubDate>Sun, 20 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/02/20-un-poco-de-dinamismo/</guid>
      <description>Siguiendo con el tutorial, ya sé añadir páginas y enrutarlas, va siendo hora de añadir algo de contenido dinámico a las páginas. Voy a hacer que el título cambie según la página en la que este. Y esto es lo que voy a chequear con TDD, es decir, que al solicitar /pages/home el título vale Home y que al solicitar /pages/about, el título vale About. En rspec, quedaría algo así:</description>
    </item>
    
    <item>
      <title>Comenzando el Testeo</title>
      <link>https://www.aguasnegras.es/posts/2011/02/16-comenzando-el-testeo/</link>
      <pubDate>Wed, 16 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2011/02/16-comenzando-el-testeo/</guid>
      <description>Estoy rememorando mi trabajo de hace 8 horas&amp;hellip; variables que no sabes si se usan en otro sitio, temor a limpiar cosas, en fín&amp;hellip; una pesadilla. Por eso, ESTE es el momento de empezar el testing en la aplicación RoR, he hecho un controlador (vacío, sí) y es hora de asegurarnos que ahora y siempre haga lo que tiene que hacer (nada). El tutorial, aparte de recomendar TDD y contarte que RSpec es un domain specific language para hacer pruebas en Ruby, dice de instalar autotest, una herramienta que ejecuta continuamente las pruebas sobre los archivos cambiados.</description>
    </item>
    
    <item>
      <title>Instalación de Ruby on Rails en Ubuntu</title>
      <link>https://www.aguasnegras.es/posts/2010/12/27-instalaci%C3%B3n-de-ruby-on-rails-en-ubuntu/</link>
      <pubDate>Mon, 27 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/12/27-instalaci%C3%B3n-de-ruby-on-rails-en-ubuntu/</guid>
      <description>En este post he encontrado bastante bien resumidos los pasos: Life of a Radar</description>
    </item>
    
    <item>
      <title>Sirviendo contenido estático</title>
      <link>https://www.aguasnegras.es/posts/2010/12/27-sirviendo-contenido-est%C3%A1tico/</link>
      <pubDate>Mon, 27 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/12/27-sirviendo-contenido-est%C3%A1tico/</guid>
      <description>Después de unas buenas (y merecidas) vacaciones, sigo con el tutorial de RoR, esta vez en el capítulo tres voy a empezar a desarrollar una aplicación completa y entendiéndola en profundidad, ya no solo voy a usar scaffolding y punto. Empiezo por la sección de &amp;ldquo;Contenido Estático&amp;rdquo;, me parece cojonuda la idea, siempre es buena idea maximizar a tope el contenido estático, ya que no solo salva tiempo de CPU, sino que además permite que funcionen las técnicas de cacheo de apache, etc&amp;hellip; Creo el proyecto nuevo tal y como se especifica.</description>
    </item>
    
    <item>
      <title>Seguimos con el Tuíte, ahora vamos a crear los microposts</title>
      <link>https://www.aguasnegras.es/posts/2010/12/02-seguimos-con-el-tu%C3%ADte-ahora-vamos-a-crear-los-microposts/</link>
      <pubDate>Thu, 02 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/12/02-seguimos-con-el-tu%C3%ADte-ahora-vamos-a-crear-los-microposts/</guid>
      <description>case@aesir:~/RoR/proyectos/demo_app$ rails generate scaffold Micropost content:string user_id:integer case@aesir:~/RoR/proyectos/demo_app$ rake db:migrate (in /home/case/RoR/proyectos/demo_app) == CreateMicroposts: migrating =============================================== -- create_table(:microposts) -&amp;amp;gt; 0.0061s == CreateMicroposts: migrated (0.0066s) ====================================== cat config/routes.rb DemoApp::Application.routes.draw do resources :microposts resources :users form id=&amp;#34;new_micropost&amp;#34; class=&amp;#34;new_micropost&amp;#34; action=&amp;#34;/microposts&amp;#34; accept-charset=&amp;#34;UTF-8&amp;#34; method=&amp;#34;post&amp;#34; hmm&amp;hellip; un poco más abajo:
input name=&amp;#34;_method&amp;#34; type=&amp;#34;hidden&amp;#34; value=&amp;#34;put&amp;#34; /&amp;gt; a href=&amp;#34;/microposts/1&amp;#34; data-confirm=&amp;#34;Are you sure?&amp;#34; data-method=&amp;#34;delete&amp;#34; rel=&amp;#34;nofollow&amp;#34; case@aesir:~/RoR/proyectos/demo_app$ cat app/models/micropost.rb class Micropost &amp;amp;lt; ActiveRecord::Base validates :content, :length =&amp;amp;gt; { :maximum =&amp;amp;gt; 144} end 1 error prohibited this micropost from being saved: Content is too long (maximum is 144 characters) case@aesir:~/RoR/proyectos/demo_app$ cat app/models/user.</description>
    </item>
    
    <item>
      <title>Capítulo Dos - Vamos a hacer un Twuttur en Ruby on Rails</title>
      <link>https://www.aguasnegras.es/posts/2010/11/25-cap%C3%ADtulo-dos-vamos-a-hacer-un-twuttur-en-ruby-on-rails/</link>
      <pubDate>Thu, 25 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/25-cap%C3%ADtulo-dos-vamos-a-hacer-un-twuttur-en-ruby-on-rails/</guid>
      <description>Pues eso, utilizando scaffolding a cascoporro vamos a hacer un Twuttur, la idea no es hacerme experto en RoR del tirón, sino ir poco a poco viendo la estructura en general y el funcionamiento de una aplicación.
rails new demo_app Y ya tenemos la base creada. Edito el Gemfile, que creo recordar que contiene los módulos (Gems) de los que depende la aplicación. Lo dejo con esta pinta:
source &amp;#39;http://rubygems.org&amp;#39; gem &amp;#39;rails&amp;#39;, &amp;#39;3.</description>
    </item>
    
    <item>
      <title>Aprendiendo Ruby on Rails - Resumen Capítulo Uno</title>
      <link>https://www.aguasnegras.es/posts/2010/11/21-aprendiendo-ruby-on-rails-resumen-cap%C3%ADtulo-uno/</link>
      <pubDate>Sun, 21 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/21-aprendiendo-ruby-on-rails-resumen-cap%C3%ADtulo-uno/</guid>
      <description>Bueno, pues en el capítulo uno del tutorial he configurado el entorno y seguido un pequeño workflow de trabajo, desde la creación de la aplicación hasta su despliegue en Heroku, pasando por el control de versiones con Git y GitHub.
El único inconveniente que le veo es que&amp;hellip; efectivamente, no he aprendido nada de Ruby ni de Rails.
Ahora pequeña lista de cosas que me gustan:
Cosas que no me han gustado:</description>
    </item>
    
    <item>
      <title>Despliegue en Heroku</title>
      <link>https://www.aguasnegras.es/posts/2010/11/21-despliegue-en-heroku/</link>
      <pubDate>Sun, 21 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/21-despliegue-en-heroku/</guid>
      <description>Por último y para acabar con el ciclo de vida, voy a ver el despliegue en Heroku. Primero te das de alta y te envían un mail de confirmación, con este email vas a una página en la que pones la contraseña y listo. Ahora hay que instalar el gem de Heroku
gem install heroku Una vez hecho esto, añado también mi clave pública a Heroku para poder comunicarlo con Git (increible esto&amp;hellip; vaya ecosistema, me tiene alucinando).</description>
    </item>
    
    <item>
      <title>Control de Versiones con Git para Ruby on Rails</title>
      <link>https://www.aguasnegras.es/posts/2010/11/20-control-de-versiones-con-git-para-ruby-on-rails/</link>
      <pubDate>Sat, 20 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/20-control-de-versiones-con-git-para-ruby-on-rails/</guid>
      <description>Vale, una semana más tarde, siguiente capítulo, Git. En Subversion ya soy el experto de la empresa, así que mato dos pájaros de un tiro aprendo Git por el mismo precio :)
Ya lo tengo instalado siguiendo las instrucciones de Pro Git, así que seguimos para adelante, la sugerencia de usar co en vez de checkout ya que checkout es demasiado &amp;ldquo;verbose&amp;rdquo; me la voy a saltar también, me gusta lo verbose (soy de los que odian los splash screens de las distros de linux, me gusta ver el texto).</description>
    </item>
    
    <item>
      <title>Aprendiendo Ruby on Rails</title>
      <link>https://www.aguasnegras.es/posts/2010/11/13-aprendiendo-ruby-on-rails/</link>
      <pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/13-aprendiendo-ruby-on-rails/</guid>
      <description>En mi trabajo, uno de los proyectos en los que ando metido es la estandarización de proyectos de desarrollo Java en entorno web, a todos los niveles.
A priori esto parece muy fácil y un trabajo bonito, pero el asunto se complica mucho cuando te das cuenta de la amplitud del trabajo:
Con ésto no quiero decir que el desarrollo en Java sea demasiado complicado, más bien al revés, el entorno es tan flexible que puedes hacer auténticas maravillas y habitualmente encontrar múltiples soluciones al mismo problema, así que si no puedes aplicar una, te resultará muy sencillo aplicar la otra.</description>
    </item>
    
    <item>
      <title>Entorno de Ruby on Rails - Parte 1</title>
      <link>https://www.aguasnegras.es/posts/2010/11/13-entorno-de-ruby-on-rails-parte-1/</link>
      <pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/13-entorno-de-ruby-on-rails-parte-1/</guid>
      <description>Para seguir el tutorial voy a usar mi viejo buen portátil (tiene ya 6 años), con una Ubuntu 10.04 y el siguiente stack de desarrollo (siguiendo lo recomendado en el tutorial):
Y hasta aquí todo bien, no deja de ser todo apt-get install, ahora el tutorial recomienda instalar RVM (Ruby Version Management), un gestor de versiones de Ruby. El tema me suena, haciendo un símil con Java, yo puedo estar desarrollando con Java 1.</description>
    </item>
    
    <item>
      <title>Entorno de Ruby on Rails - Parte 2</title>
      <link>https://www.aguasnegras.es/posts/2010/11/13-entorno-de-ruby-on-rails-parte-2/</link>
      <pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.aguasnegras.es/posts/2010/11/13-entorno-de-ruby-on-rails-parte-2/</guid>
      <description>Bazinga! Eso era, por fín:
case@aesir:~/.rvm/usr/lib$ gem update --system Updating RubyGems Nothing to update Se vuelve a ejecutar el rvm &amp;ndash;create y el &amp;ndash;default y seguimos adelante, ahora a instalar rails con gem.
gem install rails --version 3.0.1 Muy bien, creo el directorio de proyecto y
rails new fist_app Ya está creada, repaso los directorios y algún fichero de configuración según el tutorial e instalo los gems con bundle tal y como se especifica.</description>
    </item>
    
  </channel>
</rss>
